{"ast":null,"code":"import nacl from 'tweetnacl';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$7 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\nvar hash$1 = {};\nvar utils$9 = {};\nvar minimalisticAssert = assert$6;\nfunction assert$6(val, msg) {\n  if (!val) throw new Error(msg || 'Assertion failed');\n}\nassert$6.equal = function assertEqual(l, r, msg) {\n  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);\n};\nvar inherits_browser = {\n  exports: {}\n};\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n    }\n  };\n} else {\n  // old school shim for old browsers\n  inherits_browser.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      var TempCtor = function () {};\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    }\n  };\n}\nvar assert$5 = minimalisticAssert;\nvar inherits = inherits_browser.exports;\nutils$9.inherits = inherits;\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg)) return msg.slice();\n  if (!msg) return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = c >> 6 | 192;\n          res[p++] = c & 63 | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = c >> 18 | 240;\n          res[p++] = c >> 12 & 63 | 128;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        } else {\n          res[p++] = c >> 12 | 224;\n          res[p++] = c >> 6 & 63 | 128;\n          res[p++] = c & 63 | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0) msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n  }\n  return res;\n}\nutils$9.toArray = toArray;\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));\n  return res;\n}\nutils$9.toHex = toHex;\nfunction htonl(w) {\n  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n  return res >>> 0;\n}\nutils$9.htonl = htonl;\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little') w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nutils$9.toHex32 = toHex32;\nfunction zero2(word) {\n  if (word.length === 1) return '0' + word;else return word;\n}\nutils$9.zero2 = zero2;\nfunction zero8(word) {\n  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n}\nutils$9.zero8 = zero8;\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert$5(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nutils$9.join32 = join32;\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = m >>> 16 & 0xff;\n      res[k + 2] = m >>> 8 & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = m >>> 16 & 0xff;\n      res[k + 1] = m >>> 8 & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nutils$9.split32 = split32;\nfunction rotr32$1(w, b) {\n  return w >>> b | w << 32 - b;\n}\nutils$9.rotr32 = rotr32$1;\nfunction rotl32$2(w, b) {\n  return w << b | w >>> 32 - b;\n}\nutils$9.rotl32 = rotl32$2;\nfunction sum32$3(a, b) {\n  return a + b >>> 0;\n}\nutils$9.sum32 = sum32$3;\nfunction sum32_3$1(a, b, c) {\n  return a + b + c >>> 0;\n}\nutils$9.sum32_3 = sum32_3$1;\nfunction sum32_4$2(a, b, c, d) {\n  return a + b + c + d >>> 0;\n}\nutils$9.sum32_4 = sum32_4$2;\nfunction sum32_5$2(a, b, c, d, e) {\n  return a + b + c + d + e >>> 0;\n}\nutils$9.sum32_5 = sum32_5$2;\nfunction sum64$1(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nutils$9.sum64 = sum64$1;\nfunction sum64_hi$1(ah, al, bh, bl) {\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nutils$9.sum64_hi = sum64_hi$1;\nfunction sum64_lo$1(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nutils$9.sum64_lo = sum64_lo$1;\nfunction sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nutils$9.sum64_4_hi = sum64_4_hi$1;\nfunction sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nutils$9.sum64_4_lo = sum64_4_lo$1;\nfunction sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = lo + el >>> 0;\n  carry += lo < el ? 1 : 0;\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nutils$9.sum64_5_hi = sum64_5_hi$1;\nfunction sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\nutils$9.sum64_5_lo = sum64_5_lo$1;\nfunction rotr64_hi$1(ah, al, num) {\n  var r = al << 32 - num | ah >>> num;\n  return r >>> 0;\n}\nutils$9.rotr64_hi = rotr64_hi$1;\nfunction rotr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\nutils$9.rotr64_lo = rotr64_lo$1;\nfunction shr64_hi$1(ah, al, num) {\n  return ah >>> num;\n}\nutils$9.shr64_hi = shr64_hi$1;\nfunction shr64_lo$1(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\nutils$9.shr64_lo = shr64_lo$1;\nvar common$5 = {};\nvar utils$8 = utils$9;\nvar assert$4 = minimalisticAssert;\nfunction BlockHash$4() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\ncommon$5.BlockHash = BlockHash$4;\nBlockHash$4.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils$8.toArray(msg, enc);\n  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0) this.pending = null;\n    msg = utils$8.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);\n  }\n  return this;\n};\nBlockHash$4.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert$4(this.pending === null);\n  return this._digest(enc);\n};\nBlockHash$4.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - (len + this.padLength) % bytes;\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++) res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++) res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = len >>> 8 & 0xff;\n    res[i++] = len >>> 16 & 0xff;\n    res[i++] = len >>> 24 & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    for (t = 8; t < this.padLength; t++) res[i++] = 0;\n  }\n  return res;\n};\nvar sha = {};\nvar common$4 = {};\nvar utils$7 = utils$9;\nvar rotr32 = utils$7.rotr32;\nfunction ft_1$1(s, x, y, z) {\n  if (s === 0) return ch32$1(x, y, z);\n  if (s === 1 || s === 3) return p32(x, y, z);\n  if (s === 2) return maj32$1(x, y, z);\n}\ncommon$4.ft_1 = ft_1$1;\nfunction ch32$1(x, y, z) {\n  return x & y ^ ~x & z;\n}\ncommon$4.ch32 = ch32$1;\nfunction maj32$1(x, y, z) {\n  return x & y ^ x & z ^ y & z;\n}\ncommon$4.maj32 = maj32$1;\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\ncommon$4.p32 = p32;\nfunction s0_256$1(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\ncommon$4.s0_256 = s0_256$1;\nfunction s1_256$1(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\ncommon$4.s1_256 = s1_256$1;\nfunction g0_256$1(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n}\ncommon$4.g0_256 = g0_256$1;\nfunction g1_256$1(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n}\ncommon$4.g1_256 = g1_256$1;\nvar utils$6 = utils$9;\nvar common$3 = common$5;\nvar shaCommon$1 = common$4;\nvar rotl32$1 = utils$6.rotl32;\nvar sum32$2 = utils$6.sum32;\nvar sum32_5$1 = utils$6.sum32_5;\nvar ft_1 = shaCommon$1.ft_1;\nvar BlockHash$3 = common$3.BlockHash;\nvar sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\nfunction SHA1() {\n  if (!(this instanceof SHA1)) return new SHA1();\n  BlockHash$3.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.W = new Array(80);\n}\nutils$6.inherits(SHA1, BlockHash$3);\nvar _1 = SHA1;\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n  for (; i < W.length; i++) W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32$1(b, 30);\n    b = a;\n    a = t;\n  }\n  this.h[0] = sum32$2(this.h[0], a);\n  this.h[1] = sum32$2(this.h[1], b);\n  this.h[2] = sum32$2(this.h[2], c);\n  this.h[3] = sum32$2(this.h[3], d);\n  this.h[4] = sum32$2(this.h[4], e);\n};\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$6.toHex32(this.h, 'big');else return utils$6.split32(this.h, 'big');\n};\nvar utils$5 = utils$9;\nvar common$2 = common$5;\nvar shaCommon = common$4;\nvar assert$3 = minimalisticAssert;\nvar sum32$1 = utils$5.sum32;\nvar sum32_4$1 = utils$5.sum32_4;\nvar sum32_5 = utils$5.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\nvar BlockHash$2 = common$2.BlockHash;\nvar sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\nfunction SHA256$1() {\n  if (!(this instanceof SHA256$1)) return new SHA256$1();\n  BlockHash$2.call(this);\n  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils$5.inherits(SHA256$1, BlockHash$2);\nvar _256 = SHA256$1;\nSHA256$1.blockSize = 512;\nSHA256$1.outSize = 256;\nSHA256$1.hmacStrength = 192;\nSHA256$1.padLength = 64;\nSHA256$1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n  for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n  for (; i < W.length; i++) W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n  assert$3(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32$1(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32$1(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32$1(T1, T2);\n  }\n  this.h[0] = sum32$1(this.h[0], a);\n  this.h[1] = sum32$1(this.h[1], b);\n  this.h[2] = sum32$1(this.h[2], c);\n  this.h[3] = sum32$1(this.h[3], d);\n  this.h[4] = sum32$1(this.h[4], e);\n  this.h[5] = sum32$1(this.h[5], f);\n  this.h[6] = sum32$1(this.h[6], g);\n  this.h[7] = sum32$1(this.h[7], h);\n};\nSHA256$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$5.toHex32(this.h, 'big');else return utils$5.split32(this.h, 'big');\n};\nvar utils$4 = utils$9;\nvar SHA256 = _256;\nfunction SHA224() {\n  if (!(this instanceof SHA224)) return new SHA224();\n  SHA256.call(this);\n  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];\n}\nutils$4.inherits(SHA224, SHA256);\nvar _224 = SHA224;\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex') return utils$4.toHex32(this.h.slice(0, 7), 'big');else return utils$4.split32(this.h.slice(0, 7), 'big');\n};\nvar utils$3 = utils$9;\nvar common$1 = common$5;\nvar assert$2 = minimalisticAssert;\nvar rotr64_hi = utils$3.rotr64_hi;\nvar rotr64_lo = utils$3.rotr64_lo;\nvar shr64_hi = utils$3.shr64_hi;\nvar shr64_lo = utils$3.shr64_lo;\nvar sum64 = utils$3.sum64;\nvar sum64_hi = utils$3.sum64_hi;\nvar sum64_lo = utils$3.sum64_lo;\nvar sum64_4_hi = utils$3.sum64_4_hi;\nvar sum64_4_lo = utils$3.sum64_4_lo;\nvar sum64_5_hi = utils$3.sum64_5_hi;\nvar sum64_5_lo = utils$3.sum64_5_lo;\nvar BlockHash$1 = common$1.BlockHash;\nvar sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\nfunction SHA512$1() {\n  if (!(this instanceof SHA512$1)) return new SHA512$1();\n  BlockHash$1.call(this);\n  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils$3.inherits(SHA512$1, BlockHash$1);\nvar _512 = SHA512$1;\nSHA512$1.blockSize = 1024;\nSHA512$1.outSize = 512;\nSHA512$1.hmacStrength = 192;\nSHA512$1.padLength = 128;\nSHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++) W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14]; // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32]; // i - 16\n    var c3_lo = W[i - 31];\n    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n  }\n};\nSHA512$1.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n  var W = this.W;\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n  assert$2(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n    hh = gh;\n    hl = gl;\n    gh = fh;\n    gl = fl;\n    fh = eh;\n    fl = el;\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n    dh = ch;\n    dl = cl;\n    ch = bh;\n    cl = bl;\n    bh = ah;\n    bl = al;\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\nSHA512$1.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$3.toHex32(this.h, 'big');else return utils$3.split32(this.h, 'big');\n};\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ ~xh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ ~xl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = xh & yh ^ xh & zh ^ yh & zh;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = xl & yl ^ xl & zl ^ yl & zl;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2); // 34\n  var c2_hi = rotr64_hi(xl, xh, 7); // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2); // 34\n  var c2_lo = rotr64_lo(xl, xh, 7); // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9); // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9); // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29); // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29); // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0) r += 0x100000000;\n  return r;\n}\nvar utils$2 = utils$9;\nvar SHA512 = _512;\nfunction SHA384() {\n  if (!(this instanceof SHA384)) return new SHA384();\n  SHA512.call(this);\n  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];\n}\nutils$2.inherits(SHA384, SHA512);\nvar _384 = SHA384;\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$2.toHex32(this.h.slice(0, 12), 'big');else return utils$2.split32(this.h.slice(0, 12), 'big');\n};\nsha.sha1 = _1;\nsha.sha224 = _224;\nsha.sha256 = _256;\nsha.sha384 = _384;\nsha.sha512 = _512;\nvar ripemd = {};\nvar utils$1 = utils$9;\nvar common = common$5;\nvar rotl32 = utils$1.rotl32;\nvar sum32 = utils$1.sum32;\nvar sum32_3 = utils$1.sum32_3;\nvar sum32_4 = utils$1.sum32_4;\nvar BlockHash = common.BlockHash;\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n  BlockHash.call(this);\n  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n  this.endian = 'little';\n}\nutils$1.inherits(RIPEMD160, BlockHash);\nripemd.ripemd160 = RIPEMD160;\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex') return utils$1.toHex32(this.h, 'little');else return utils$1.split32(this.h, 'little');\n};\nfunction f(j, x, y, z) {\n  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);\n}\nfunction K(j) {\n  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;\n}\nfunction Kh(j) {\n  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;\n}\nvar r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\nvar rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\nvar s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\nvar sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\nvar utils = utils$9;\nvar assert$1 = minimalisticAssert;\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n  this._init(utils.toArray(key, enc));\n}\nvar hmac = Hmac;\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n  assert$1(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++) key.push(0);\n  for (i = 0; i < key.length; i++) key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++) key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n(function (exports) {\n  var hash = exports;\n  hash.utils = utils$9;\n  hash.common = common$5;\n  hash.sha = sha;\n  hash.ripemd = ripemd;\n  hash.hmac = hmac;\n\n  // Proxy hash functions to the main object\n  hash.sha1 = hash.sha.sha1;\n  hash.sha256 = hash.sha.sha256;\n  hash.sha224 = hash.sha.sha224;\n  hash.sha384 = hash.sha.sha384;\n  hash.sha512 = hash.sha.sha512;\n  hash.ripemd160 = hash.ripemd.ripemd160;\n})(hash$1);\nvar hash = hash$1;\nconst version$2 = \"logger/5.6.0\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nlet _globalLogger = null;\nfunction _checkNormalize() {\n  try {\n    const missing = [];\n    // Make sure all forms of normalization are supported\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n  return null;\n}\nconst _normalizeError = _checkNormalize();\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nvar ErrorCode;\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  // Not Implemented\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n  // Unsupported Operation\n  //   - operation\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n  // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n  // Some sort of bad response from the server\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n  // Timeout\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n  ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n  // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n  ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n  // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n  // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n  // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n  ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n  // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n  // Nonce has already been used\n  //   - transaction: the transaction attempted\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n  // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n  // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n  // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\nconst HEX = \"0123456789abcdef\";\nclass Logger {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n    console.log.apply(console, args);\n  }\n  debug() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    this._log(Logger.levels.DEBUG, args);\n  }\n  info() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    this._log(Logger.levels.INFO, args);\n  }\n  warn() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    this._log(Logger.levels.WARNING, args);\n  }\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n    if (!params) {\n      params = {};\n    }\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      const value = params[key];\n      try {\n        if (value instanceof Uint8Array) {\n          let hex = \"\";\n          for (let i = 0; i < value.length; i++) {\n            hex += HEX[value[i] >> 4];\n            hex += HEX[value[i] & 0x0f];\n          }\n          messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n        } else {\n          messageDetails.push(key + \"=\" + JSON.stringify(value));\n        }\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n    let url = \"\";\n    switch (code) {\n      case ErrorCode.NUMERIC_FAULT:\n        {\n          url = \"NUMERIC_FAULT\";\n          const fault = message;\n          switch (fault) {\n            case \"overflow\":\n            case \"underflow\":\n            case \"division-by-zero\":\n              url += \"-\" + fault;\n              break;\n            case \"negative-power\":\n            case \"negative-width\":\n              url += \"-unsupported\";\n              break;\n            case \"unbound-bitwise-result\":\n              url += \"-unbound-result\";\n              break;\n          }\n          break;\n        }\n      case ErrorCode.CALL_EXCEPTION:\n      case ErrorCode.INSUFFICIENT_FUNDS:\n      case ErrorCode.MISSING_NEW:\n      case ErrorCode.NONCE_EXPIRED:\n      case ErrorCode.REPLACEMENT_UNDERPRICED:\n      case ErrorCode.TRANSACTION_REPLACED:\n      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n        url = code;\n        break;\n    }\n    if (url) {\n      message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n    }\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    }\n    // @TODO: Any??\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n    this.throwError(message, code, params);\n  }\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n    this.throwArgumentError(message, name, value);\n  }\n  checkNormalize(message) {\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n    if (message == null) {\n      message = \"value not safe\";\n    }\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version$2);\n    }\n    return _globalLogger;\n  }\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n    _logLevel = level;\n  }\n  static from(version) {\n    return new Logger(version);\n  }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\nconst version$1 = \"bytes/5.6.0\";\nconst logger = new Logger(version$1);\n///////////////////////////////\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n  return array;\n}\nfunction isInteger(value) {\n  return typeof value === \"number\" && value == value && value % 1 === 0;\n}\nfunction isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n  if (typeof value === \"string\") {\n    return false;\n  }\n  if (!isInteger(value.length) || value.length < 0) {\n    return false;\n  }\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n    if (!isInteger(v) || v < 0 || v >= 256) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    const result = [];\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n    if (result.length === 0) {\n      result.push(0);\n    }\n    return addSlice(new Uint8Array(result));\n  }\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n    const result = [];\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n    return addSlice(new Uint8Array(result));\n  }\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nfunction isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n  return true;\n}\nconst version = \"sha2/5.6.0\";\nnew Logger(version);\nfunction sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\n\n/**\n * Maximum length of derived pubkey seed\n */\n\nconst MAX_SEED_LENGTH = 32;\n/**\n * Value to be converted into public key\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n/**\n * A public key\n */\n\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key\n   */\n\n  toBytes() {\n    return this.toBuffer();\n  }\n  /**\n   * Return the Buffer representation of the public key\n   */\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n  /* eslint-disable require-await */\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n  /* eslint-disable require-await */\n\n  static async createProgramAddress(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n  static async findProgramAddress(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n  static isOnCurve(pubkey) {\n    return is_on_curve(pubkey) == 1;\n  }\n}\nPublicKey.default = new PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n}); // @ts-ignore\n\nlet naclLowLevel = nacl.lowlevel; // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\nclass Account {\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    this._keypair = void 0;\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account\n   */\n\n  get secretKey() {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Layout for a public key\n */\n\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nconst rustString = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n/**\n * Layout for an Authorized object\n */\n\nconst authorized = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\nconst lockup = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n/**\n *  Layout for a VoteInit object\n */\n\nconst voteInit = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'voteInit';\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\nfunction getAlloc(type, fields) {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\n/**\n * The message header, identifying signed and read-only account\n */\n\nconst PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst SIGNATURE_LENGTH = 64;\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    this.keys = void 0;\n    this.programId = void 0;\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    this.signatures = [];\n    this.feePayer = void 0;\n    this.instructions = [];\n    this.recentBlockhash = void 0;\n    this.nonceInfo = void 0;\n    opts && Object.assign(this, opts);\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n  add() {\n    for (var _len4 = arguments.length, items = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      items[_key4] = arguments[_key4];\n    }\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n  compileMessage() {\n    const {\n      nonceInfo\n    } = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {\n      recentBlockhash\n    } = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable = x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(_ref => {\n      let {\n        pubkey,\n        isSigner,\n        isWritable\n      } = _ref;\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    instructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n  setSigners() {\n    for (var _len5 = arguments.length, signers = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      signers[_key5] = arguments[_key5];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n  sign() {\n    for (var _len6 = arguments.length, signers = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      signers[_key6] = arguments[_key6];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n  partialSign() {\n    for (var _len7 = arguments.length, signers = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      signers[_key7] = arguments[_key7];\n    }\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n  _partialSign(message) {\n    const signData = message.serialize();\n    for (var _len8 = arguments.length, signers = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n      signers[_key8 - 1] = arguments[_key8];\n    }\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n\n  verifySignatures() {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n  /**\n   * @internal\n   */\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach((_ref2, index) => {\n      let {\n        signature\n      } = _ref2;\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n  static populate(message) {\n    let signatures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    return transaction;\n  }\n}\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\nfunction decodeData(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\n\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), rustString('seed'), publicKey('programId')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: params.lamports\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\nvar browserPonyfill = {\n  exports: {}\n};\n(function (module, exports) {\n  var global = typeof self !== 'undefined' ? self : commonjsGlobal;\n  var __self__ = function () {\n    function F() {\n      this.fetch = false;\n      this.DOMException = global.DOMException;\n    }\n    F.prototype = global;\n    return new F();\n  }();\n  (function (self) {\n    (function (exports) {\n      var support = {\n        searchParams: 'URLSearchParams' in self,\n        iterable: 'Symbol' in self && 'iterator' in Symbol,\n        blob: 'FileReader' in self && 'Blob' in self && function () {\n          try {\n            new Blob();\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }(),\n        formData: 'FormData' in self,\n        arrayBuffer: 'ArrayBuffer' in self\n      };\n      function isDataView(obj) {\n        return obj && DataView.prototype.isPrototypeOf(obj);\n      }\n      if (support.arrayBuffer) {\n        var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];\n        var isArrayBufferView = ArrayBuffer.isView || function (obj) {\n          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n        };\n      }\n      function normalizeName(name) {\n        if (typeof name !== 'string') {\n          name = String(name);\n        }\n        if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n          throw new TypeError('Invalid character in header field name');\n        }\n        return name.toLowerCase();\n      }\n      function normalizeValue(value) {\n        if (typeof value !== 'string') {\n          value = String(value);\n        }\n        return value;\n      }\n\n      // Build a destructive iterator for the value list\n      function iteratorFor(items) {\n        var iterator = {\n          next: function () {\n            var value = items.shift();\n            return {\n              done: value === undefined,\n              value: value\n            };\n          }\n        };\n        if (support.iterable) {\n          iterator[Symbol.iterator] = function () {\n            return iterator;\n          };\n        }\n        return iterator;\n      }\n      function Headers(headers) {\n        this.map = {};\n        if (headers instanceof Headers) {\n          headers.forEach(function (value, name) {\n            this.append(name, value);\n          }, this);\n        } else if (Array.isArray(headers)) {\n          headers.forEach(function (header) {\n            this.append(header[0], header[1]);\n          }, this);\n        } else if (headers) {\n          Object.getOwnPropertyNames(headers).forEach(function (name) {\n            this.append(name, headers[name]);\n          }, this);\n        }\n      }\n      Headers.prototype.append = function (name, value) {\n        name = normalizeName(name);\n        value = normalizeValue(value);\n        var oldValue = this.map[name];\n        this.map[name] = oldValue ? oldValue + ', ' + value : value;\n      };\n      Headers.prototype['delete'] = function (name) {\n        delete this.map[normalizeName(name)];\n      };\n      Headers.prototype.get = function (name) {\n        name = normalizeName(name);\n        return this.has(name) ? this.map[name] : null;\n      };\n      Headers.prototype.has = function (name) {\n        return this.map.hasOwnProperty(normalizeName(name));\n      };\n      Headers.prototype.set = function (name, value) {\n        this.map[normalizeName(name)] = normalizeValue(value);\n      };\n      Headers.prototype.forEach = function (callback, thisArg) {\n        for (var name in this.map) {\n          if (this.map.hasOwnProperty(name)) {\n            callback.call(thisArg, this.map[name], name, this);\n          }\n        }\n      };\n      Headers.prototype.keys = function () {\n        var items = [];\n        this.forEach(function (value, name) {\n          items.push(name);\n        });\n        return iteratorFor(items);\n      };\n      Headers.prototype.values = function () {\n        var items = [];\n        this.forEach(function (value) {\n          items.push(value);\n        });\n        return iteratorFor(items);\n      };\n      Headers.prototype.entries = function () {\n        var items = [];\n        this.forEach(function (value, name) {\n          items.push([name, value]);\n        });\n        return iteratorFor(items);\n      };\n      if (support.iterable) {\n        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n      }\n      function consumed(body) {\n        if (body.bodyUsed) {\n          return Promise.reject(new TypeError('Already read'));\n        }\n        body.bodyUsed = true;\n      }\n      function fileReaderReady(reader) {\n        return new Promise(function (resolve, reject) {\n          reader.onload = function () {\n            resolve(reader.result);\n          };\n          reader.onerror = function () {\n            reject(reader.error);\n          };\n        });\n      }\n      function readBlobAsArrayBuffer(blob) {\n        var reader = new FileReader();\n        var promise = fileReaderReady(reader);\n        reader.readAsArrayBuffer(blob);\n        return promise;\n      }\n      function readBlobAsText(blob) {\n        var reader = new FileReader();\n        var promise = fileReaderReady(reader);\n        reader.readAsText(blob);\n        return promise;\n      }\n      function readArrayBufferAsText(buf) {\n        var view = new Uint8Array(buf);\n        var chars = new Array(view.length);\n        for (var i = 0; i < view.length; i++) {\n          chars[i] = String.fromCharCode(view[i]);\n        }\n        return chars.join('');\n      }\n      function bufferClone(buf) {\n        if (buf.slice) {\n          return buf.slice(0);\n        } else {\n          var view = new Uint8Array(buf.byteLength);\n          view.set(new Uint8Array(buf));\n          return view.buffer;\n        }\n      }\n      function Body() {\n        this.bodyUsed = false;\n        this._initBody = function (body) {\n          this._bodyInit = body;\n          if (!body) {\n            this._bodyText = '';\n          } else if (typeof body === 'string') {\n            this._bodyText = body;\n          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n            this._bodyBlob = body;\n          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n            this._bodyFormData = body;\n          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n            this._bodyText = body.toString();\n          } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n            this._bodyArrayBuffer = bufferClone(body.buffer);\n            // IE 10-11 can't handle a DataView body.\n            this._bodyInit = new Blob([this._bodyArrayBuffer]);\n          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n            this._bodyArrayBuffer = bufferClone(body);\n          } else {\n            this._bodyText = body = Object.prototype.toString.call(body);\n          }\n          if (!this.headers.get('content-type')) {\n            if (typeof body === 'string') {\n              this.headers.set('content-type', 'text/plain;charset=UTF-8');\n            } else if (this._bodyBlob && this._bodyBlob.type) {\n              this.headers.set('content-type', this._bodyBlob.type);\n            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n            }\n          }\n        };\n        if (support.blob) {\n          this.blob = function () {\n            var rejected = consumed(this);\n            if (rejected) {\n              return rejected;\n            }\n            if (this._bodyBlob) {\n              return Promise.resolve(this._bodyBlob);\n            } else if (this._bodyArrayBuffer) {\n              return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n            } else if (this._bodyFormData) {\n              throw new Error('could not read FormData body as blob');\n            } else {\n              return Promise.resolve(new Blob([this._bodyText]));\n            }\n          };\n          this.arrayBuffer = function () {\n            if (this._bodyArrayBuffer) {\n              return consumed(this) || Promise.resolve(this._bodyArrayBuffer);\n            } else {\n              return this.blob().then(readBlobAsArrayBuffer);\n            }\n          };\n        }\n        this.text = function () {\n          var rejected = consumed(this);\n          if (rejected) {\n            return rejected;\n          }\n          if (this._bodyBlob) {\n            return readBlobAsText(this._bodyBlob);\n          } else if (this._bodyArrayBuffer) {\n            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n          } else if (this._bodyFormData) {\n            throw new Error('could not read FormData body as text');\n          } else {\n            return Promise.resolve(this._bodyText);\n          }\n        };\n        if (support.formData) {\n          this.formData = function () {\n            return this.text().then(decode);\n          };\n        }\n        this.json = function () {\n          return this.text().then(JSON.parse);\n        };\n        return this;\n      }\n\n      // HTTP methods whose capitalization should be normalized\n      var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n      function normalizeMethod(method) {\n        var upcased = method.toUpperCase();\n        return methods.indexOf(upcased) > -1 ? upcased : method;\n      }\n      function Request(input, options) {\n        options = options || {};\n        var body = options.body;\n        if (input instanceof Request) {\n          if (input.bodyUsed) {\n            throw new TypeError('Already read');\n          }\n          this.url = input.url;\n          this.credentials = input.credentials;\n          if (!options.headers) {\n            this.headers = new Headers(input.headers);\n          }\n          this.method = input.method;\n          this.mode = input.mode;\n          this.signal = input.signal;\n          if (!body && input._bodyInit != null) {\n            body = input._bodyInit;\n            input.bodyUsed = true;\n          }\n        } else {\n          this.url = String(input);\n        }\n        this.credentials = options.credentials || this.credentials || 'same-origin';\n        if (options.headers || !this.headers) {\n          this.headers = new Headers(options.headers);\n        }\n        this.method = normalizeMethod(options.method || this.method || 'GET');\n        this.mode = options.mode || this.mode || null;\n        this.signal = options.signal || this.signal;\n        this.referrer = null;\n        if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n          throw new TypeError('Body not allowed for GET or HEAD requests');\n        }\n        this._initBody(body);\n      }\n      Request.prototype.clone = function () {\n        return new Request(this, {\n          body: this._bodyInit\n        });\n      };\n      function decode(body) {\n        var form = new FormData();\n        body.trim().split('&').forEach(function (bytes) {\n          if (bytes) {\n            var split = bytes.split('=');\n            var name = split.shift().replace(/\\+/g, ' ');\n            var value = split.join('=').replace(/\\+/g, ' ');\n            form.append(decodeURIComponent(name), decodeURIComponent(value));\n          }\n        });\n        return form;\n      }\n      function parseHeaders(rawHeaders) {\n        var headers = new Headers();\n        // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n        // https://tools.ietf.org/html/rfc7230#section-3.2\n        var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n        preProcessedHeaders.split(/\\r?\\n/).forEach(function (line) {\n          var parts = line.split(':');\n          var key = parts.shift().trim();\n          if (key) {\n            var value = parts.join(':').trim();\n            headers.append(key, value);\n          }\n        });\n        return headers;\n      }\n      Body.call(Request.prototype);\n      function Response(bodyInit, options) {\n        if (!options) {\n          options = {};\n        }\n        this.type = 'default';\n        this.status = options.status === undefined ? 200 : options.status;\n        this.ok = this.status >= 200 && this.status < 300;\n        this.statusText = 'statusText' in options ? options.statusText : 'OK';\n        this.headers = new Headers(options.headers);\n        this.url = options.url || '';\n        this._initBody(bodyInit);\n      }\n      Body.call(Response.prototype);\n      Response.prototype.clone = function () {\n        return new Response(this._bodyInit, {\n          status: this.status,\n          statusText: this.statusText,\n          headers: new Headers(this.headers),\n          url: this.url\n        });\n      };\n      Response.error = function () {\n        var response = new Response(null, {\n          status: 0,\n          statusText: ''\n        });\n        response.type = 'error';\n        return response;\n      };\n      var redirectStatuses = [301, 302, 303, 307, 308];\n      Response.redirect = function (url, status) {\n        if (redirectStatuses.indexOf(status) === -1) {\n          throw new RangeError('Invalid status code');\n        }\n        return new Response(null, {\n          status: status,\n          headers: {\n            location: url\n          }\n        });\n      };\n      exports.DOMException = self.DOMException;\n      try {\n        new exports.DOMException();\n      } catch (err) {\n        exports.DOMException = function (message, name) {\n          this.message = message;\n          this.name = name;\n          var error = Error(message);\n          this.stack = error.stack;\n        };\n        exports.DOMException.prototype = Object.create(Error.prototype);\n        exports.DOMException.prototype.constructor = exports.DOMException;\n      }\n      function fetch(input, init) {\n        return new Promise(function (resolve, reject) {\n          var request = new Request(input, init);\n          if (request.signal && request.signal.aborted) {\n            return reject(new exports.DOMException('Aborted', 'AbortError'));\n          }\n          var xhr = new XMLHttpRequest();\n          function abortXhr() {\n            xhr.abort();\n          }\n          xhr.onload = function () {\n            var options = {\n              status: xhr.status,\n              statusText: xhr.statusText,\n              headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n            };\n            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n            var body = 'response' in xhr ? xhr.response : xhr.responseText;\n            resolve(new Response(body, options));\n          };\n          xhr.onerror = function () {\n            reject(new TypeError('Network request failed'));\n          };\n          xhr.ontimeout = function () {\n            reject(new TypeError('Network request failed'));\n          };\n          xhr.onabort = function () {\n            reject(new exports.DOMException('Aborted', 'AbortError'));\n          };\n          xhr.open(request.method, request.url, true);\n          if (request.credentials === 'include') {\n            xhr.withCredentials = true;\n          } else if (request.credentials === 'omit') {\n            xhr.withCredentials = false;\n          }\n          if ('responseType' in xhr && support.blob) {\n            xhr.responseType = 'blob';\n          }\n          request.headers.forEach(function (value, name) {\n            xhr.setRequestHeader(name, value);\n          });\n          if (request.signal) {\n            request.signal.addEventListener('abort', abortXhr);\n            xhr.onreadystatechange = function () {\n              // DONE (success or failure)\n              if (xhr.readyState === 4) {\n                request.signal.removeEventListener('abort', abortXhr);\n              }\n            };\n          }\n          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n        });\n      }\n      fetch.polyfill = true;\n      if (!self.fetch) {\n        self.fetch = fetch;\n        self.Headers = Headers;\n        self.Request = Request;\n        self.Response = Response;\n      }\n      exports.Headers = Headers;\n      exports.Request = Request;\n      exports.Response = Response;\n      exports.fetch = fetch;\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      return exports;\n    })({});\n  })(__self__);\n  __self__.fetch.ponyfill = true;\n  // Remove \"polyfill\" property added by whatwg-fetch\n  delete __self__.fetch.polyfill;\n  // Choose between native implementation (global) or custom implementation (__self__)\n  // var ctx = global.fetch ? global : __self__;\n  var ctx = __self__; // this line disable service worker support temporarily\n  exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'\n  exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.\n  exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'\n  exports.Headers = ctx.Headers;\n  exports.Request = ctx.Request;\n  exports.Response = ctx.Response;\n  module.exports = exports;\n})(browserPonyfill, browserPonyfill.exports);\nvar fetch = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfill.exports);\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    this.slotsPerEpoch = void 0;\n    this.leaderScheduleSlotOffset = void 0;\n    this.warmup = void 0;\n    this.firstNormalEpoch = void 0;\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\nfunction promiseTimeout(promise, timeoutMs) {\n  let timeoutId;\n  const timeoutPromise = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\nfunction makeWebsocketUrl(endpoint) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number())\n}));\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit) {\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url, options) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) => resolve([modifiedUrl, modifiedOptions]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {})\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429\n        /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {}\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string()\n  })\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string()\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\n\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult\n})));\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\n\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\n\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    this._commitment = void 0;\n    this._confirmTransactionInitialTimeout = void 0;\n    this._rpcEndpoint = void 0;\n    this._rpcWsEndpoint = void 0;\n    this._rpcClient = void 0;\n    this._rpcRequest = void 0;\n    this._rpcBatchRequest = void 0;\n    this._rpcWebSocket = void 0;\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketHeartbeat = null;\n    this._rpcWebSocketIdleTimeout = null;\n    this._disableBlockhashCaching = false;\n    this._pollingBlockhash = false;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    this._accountChangeSubscriptionCounter = 0;\n    this._accountChangeSubscriptions = {};\n    this._programAccountChangeSubscriptionCounter = 0;\n    this._programAccountChangeSubscriptions = {};\n    this._rootSubscriptionCounter = 0;\n    this._rootSubscriptions = {};\n    this._signatureSubscriptionCounter = 0;\n    this._signatureSubscriptions = {};\n    this._slotSubscriptionCounter = 0;\n    this._slotSubscriptions = {};\n    this._logsSubscriptionCounter = 0;\n    this._logsSubscriptions = {};\n    this._slotUpdateSubscriptionCounter = 0;\n    this._slotUpdateSubscriptions = {};\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(url.toString(), useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * The RPC endpoint\n   */\n\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n  async getBalanceAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error('failed to get balance for ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n  async getBalance(publicKey, commitment) {\n    return await this.getBalanceAndContext(publicKey, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get block time for slot ' + slot + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get minimum ledger slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get first available block: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token account balance: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error('failed to get token largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n  async getAccountInfoAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n  async getParsedAccountInfo(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n  async getAccountInfo(publicKey, commitment) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n\n  async getMultipleAccountsInfoAndContext(publicKeys, commitment) {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new Error('failed to get info for accounts ' + keys + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n\n  async getMultipleAccountsInfo(publicKeys, commitment) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitment);\n    return res.value;\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n  async getStakeActivation(publicKey, commitment, epoch) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined, epoch !== undefined ? {\n      epoch\n    } : undefined);\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(`failed to get Stake Activation ${publicKey.toBase58()}: ${res.error.message}`);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', extra);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n\n  async confirmTransaction(signature, commitment) {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n    let subscriptionId;\n    let response = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(signature, (result, context) => {\n          subscriptionId = undefined;\n          response = {\n            context,\n            value: result\n          };\n          resolve(null);\n        }, subscriptionCommitment);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip':\n        {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n    }\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(`Transaction was not confirmed in ${duration.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`);\n    }\n    return response;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n  async getSlot(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n  async getSlotLeader(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n  async getTransactionCount(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n  async getInflationReward(addresses, epoch, commitment) {\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined, {\n      epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n  async getEpochInfo(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n  async getRecentPerformanceSamples(limit) {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', args);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent performance samples: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n\n  async getLatestBlockhash(commitment) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n\n  async getLatestBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the node version\n   */\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the genesis hash\n   */\n\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   */\n\n  async getBlock(slot, opts) {\n    const args = this._buildArgsAtLeastConfirmed([slot], opts && opts.commitment);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transactions: result.transactions.map(_ref3 => {\n        let {\n          transaction,\n          meta\n        } = _ref3;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n  }\n  /*\n   * Returns the current block height of the node\n   */\n\n  async getBlockHeight(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get block height information: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error('failed to get block production information: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n\n  async getTransaction(signature, opts) {\n    const args = this._buildArgsAtLeastConfirmed([signature], opts && opts.commitment);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n\n  async getParsedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n  async getParsedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(_ref4 => {\n        let {\n          transaction,\n          meta\n        } = _ref4;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(_ref5 => {\n        let {\n          transaction,\n          meta\n        } = _ref5;\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get confirmed transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed signatures for address: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signatures for address: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n  async getNonceAndContext(nonceAccount, commitment) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitment);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n  async getNonce(nonceAccount, commitment) {\n    return await this.getNonceAndContext(nonceAccount, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error('airdrop to ' + to.toBase58() + ' failed: ' + res.error.message);\n    }\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n  async _recentBlockhash(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {\n          blockhash\n        } = await this.getRecentBlockhash('finalized');\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return blockhash;\n        } // Sleep for approximately half a slot\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * Simulate a transaction\n   */\n\n  async simulateTransaction(transactionOrMessage, signers, includeAccounts) {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   */\n\n  async sendTransaction(transaction, signers, options) {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnError(err) {\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnClose(code) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n    this._resetSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n  async _subscribe(sub, rpcMethod, rpcArgs) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n  async _unsubscribe(sub, rpcMethod) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._programAccountChangeSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._rootSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._signatureSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._slotSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._slotUpdateSubscriptions).forEach(s => s.subscriptionId = null);\n  }\n  /**\n   * @internal\n   */\n\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    const programKeys = Object.keys(this._programAccountChangeSubscriptions).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (accountKeys.length === 0 && programKeys.length === 0 && slotKeys.length === 0 && slotUpdateKeys.length === 0 && signatureKeys.length === 0 && rootKeys.length === 0 && logsKeys.length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(sub, 'accountSubscribe', this._buildArgs([sub.publicKey], sub.commitment, 'base64'));\n    }\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(sub, 'programSubscribe', this._buildArgs([sub.programId], sub.commitment, 'base64', {\n        filters: sub.filters\n      }));\n    }\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {\n          mentions: [sub.filter.toString()]\n        };\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(sub, 'logsSubscribe', this._buildArgs([filter], sub.commitment));\n    }\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnAccountNotification(notification) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n  onAccountChange(publicKey, callback, commitment) {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n  async removeAccountChangeListener(id) {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnProgramAccountNotification(notification) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {\n          value,\n          context\n        } = res.result;\n        sub.callback({\n          accountId: value.pubkey,\n          accountInfo: value.account\n        }, context);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n  async removeProgramAccountChangeListener(id) {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n  onLogs(filter, callback, commitment) {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n\n  async removeOnLogsListener(id) {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnLogsNotification(notification) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSlotNotification(notification) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n  onSlotChange(callback) {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n  async removeSlotChangeListener(id) {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n  onSlotUpdate(callback) {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n  async removeSlotUpdateListener(id) {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnSignatureNotification(notification) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback({\n            type: 'received'\n          }, res.result.context);\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback({\n            type: 'status',\n            result: res.result.value\n          }, res.result.context);\n        }\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n  onSignature(signature, callback, commitment) {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {\n        commitment\n      },\n      subscriptionId: null\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n  onSignatureWithOptions(signature, callback, options) {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n  async removeSignatureListener(id) {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n  _wsOnRootNotification(notification) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n  onRootChange(callback) {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n  async removeRootChangeListener(id) {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n  static generate() {\n    return new Keypair(nacl.sign.keyPair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n  static fromSecretKey(secretKey, options) {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n  static fromSeed(seed) {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n  /**\n   * The public key for this keypair\n   */\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n  get secretKey() {\n    return this._keypair.secretKey;\n  }\n}\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    this.staker = void 0;\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    this.unixTimestamp = void 0;\n    this.epoch = void 0;\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n}\n\nLockup.default = new Lockup(0, 0, PublicKey.default);\n\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * @internal\n   */\n\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n  static split(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n\n  static splitWithSeed(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\nStakeProgram.space = 200;\nconst {\n  publicKeyCreate,\n  ecdsaSign\n} = secp256k1;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(sha3.keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(sha3.keccak_256.update(toBuffer(message)).digest());\n      const {\n        signature,\n        recid: recoveryId\n      } = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    this.key = void 0;\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n  static fromConfigData(buffer) {\n    const PUBKEY_LENGTH = 32;\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$7(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter(_ref6) {\n  let {\n    authorizedVoter,\n    epoch\n  } = _ref6;\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters(_ref7) {\n  let {\n    authorizedPubkey,\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  } = _ref7;\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters(_ref8) {\n  let {\n    buf,\n    idx,\n    isEmpty\n  } = _ref8;\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\n/**\n * Vote account info\n */\n\nclass VoteInit {\n  /** [0, 100] */\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n/**\n * Create vote account transaction params\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  }\n});\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Vote program\n */\n\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\nVoteProgram.space = 3731;\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\n\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PublicKey, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionInstruction, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"sources":["../src/util/to-buffer.ts","../node_modules/minimalistic-assert/index.js","../node_modules/inherits/inherits_browser.js","../node_modules/hash.js/lib/hash/utils.js","../node_modules/hash.js/lib/hash/common.js","../node_modules/hash.js/lib/hash/sha/common.js","../node_modules/hash.js/lib/hash/sha/1.js","../node_modules/hash.js/lib/hash/sha/256.js","../node_modules/hash.js/lib/hash/sha/224.js","../node_modules/hash.js/lib/hash/sha/512.js","../node_modules/hash.js/lib/hash/sha/384.js","../node_modules/hash.js/lib/hash/sha.js","../node_modules/hash.js/lib/hash/ripemd.js","../node_modules/hash.js/lib/hash/hmac.js","../node_modules/hash.js/lib/hash.js","../node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/bytes/lib.esm/_version.js","../node_modules/@ethersproject/bytes/lib.esm/index.js","../node_modules/@ethersproject/sha2/lib.esm/_version.js","../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/util/assert.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/cross-fetch/dist/browser-ponyfill.js","../src/epoch-schedule.ts","../src/errors.ts","../src/timing.ts","../src/util/promise-timeout.ts","../src/util/url.ts","../src/connection.ts","../src/keypair.ts","../src/ed25519-program.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/vote-program.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"names":["toBuffer","arr","Buffer","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength","assert","inherits_browserModule","require$$0","require$$1","rotr32","rotl32","sum32","sum32_3","sum32_4","sum32_5","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","utils","BlockHash","ft_1","ch32","maj32","s0_256","s1_256","g0_256","g1_256","common","shaCommon","require$$2","require$$3","SHA256","SHA512","require$$4","version","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","isPublicKeyData","value","_bn","undefined","PublicKey","decoded","bs58","BN","default","equals","publicKey","eq","toBase58","toBytes","toJSON","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","hash","sha256","slice","createProgramAddress","seeds","forEach","TypeError","publicKeyBytes","toArray","is_on_curve","findProgramAddress","nonce","address","seedsWithNonce","err","isOnCurve","pubkey","set","kind","fields","naclLowLevel","nacl","lowlevel","p","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","A","pow2523","neq25519","I","a","c","d","pack25519","crypto_verify_32","Account","_keypair","secretKey","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","getAlloc","type","layout","item","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PUBKEY_LENGTH","Message","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","args","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","Array","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","condition","message","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Transaction","signatures","signature","feePayer","nonceInfo","add","items","compileMessage","nonceInstruction","unshift","console","warn","accountMetas","accountMeta","includes","isSigner","isWritable","sort","x","y","pubkeySorting","localeCompare","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","signers","seen","Set","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","JSON","stringify","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccount","params","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","chunkSize","getMinNumSignatures","Math","ceil","load","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","this","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","promiseTimeout","promise","timeoutMs","timeoutId","timeoutPromise","race","then","result","clearTimeout","makeWebsocketUrl","endpoint","url","URL","useHttps","protocol","host","port","String","Number","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","code","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","fetchWithMiddleware","modifiedFetchArgs","reject","modifiedUrl","modifiedOptions","fetch","clientBrowser","RpcClient","request","callback","agent","method","body","headers","too_many_requests_retries","res","waitTime","log","statusText","text","ok","createRpcRequest","client","response","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","isArray","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","lastValidBlockHeight","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_accountChangeSubscriptionCounter","_accountChangeSubscriptions","_programAccountChangeSubscriptionCounter","_programAccountChangeSubscriptions","_rootSubscriptionCounter","_rootSubscriptions","_signatureSubscriptionCounter","_signatureSubscriptions","_slotSubscriptionCounter","_slotSubscriptions","_logsSubscriptionCounter","_logsSubscriptions","_slotUpdateSubscriptionCounter","_slotUpdateSubscriptions","commitmentOrConfig","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleAccountsInfoAndContext","publicKeys","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","extra","encoding","filters","getParsedProgramAccounts","decodedSignature","start","Date","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","removeSignatureListener","duration","toFixed","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getBlockHeight","getBlockProduction","rest","getTransaction","getParsedTransaction","getParsedTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","info","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","disableCache","timeSinceFetch","expired","_pollNewBlockhash","startTime","simulateTransaction","transactionOrMessage","includeAccounts","encodedTransaction","sigVerify","traceIndent","logTrace","join","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","_subscribe","sub","rpcMethod","rpcArgs","call","_unsubscribe","unsubscribeId","s","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","close","connect","mentions","notification","onAccountChange","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","removeProgramAccountChangeListener","onLogs","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","override","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","generate","skipValidation","encoder","TextEncoder","fromSeed","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","publicKeyCreate","ecdsaSign","secp256k1","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","sha3","keccak_256","update","digest","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","buf","idx","isEmpty","VoteInit","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"mappings":";;;;;;;;;;;AAEO,MAAMA,QAAQ,GAAIC,GAAD,IAAsD;EAC5E,IAAIC,MAAM,CAACC,QAAPD,CAAgBD,GAAhBC,CAAJ,EAA0B;IACxB,OAAOD,GAAP;EACD,CAFD,MAEO,IAAIA,GAAG,YAAYG,UAAnB,EAA+B;IACpC,OAAOF,MAAM,CAACG,IAAPH,CAAYD,GAAG,CAACK,MAAhBJ,EAAwBD,GAAG,CAACM,UAA5BL,EAAwCD,GAAG,CAACO,UAA5CN,CAAP;EACD,CAFM,MAEA;IACL,OAAOA,MAAM,CAACG,IAAPH,CAAYD,GAAZC,CAAP;EACD;AACF,CARM;;;;;;;ICFP,kBAAc,GAAGO,QAAM;AAEvB,SAASA,QAAM,CAAC,GAAG,EAAE,GAAG,EAAE;EACxB,IAAI,CAAC,GAAG,EACN,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,kBAAkB,CAAC;AAC9C;AAEAA,QAAM,CAAC,KAAK,GAAG,SAAS,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE;EAC7C,IAAI,CAAC,IAAI,CAAC,EACR,MAAM,IAAI,KAAK,CAAC,GAAG,IAAK,oBAAoB,GAAG,CAAC,GAAG,MAAM,GAAG,CAAE,CAAC;AACnE,CAAC;;;;ACVD,IAAI,OAAO,MAAM,CAAC,MAAM,KAAK,UAAU,EAAE;EACzC;EACEC,gBAAAA,CAAAA,OAAc,GAAG,SAAS,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAE;IAClD,IAAI,SAAS,EAAE;MACb,IAAI,CAAC,MAAM,GAAG,SAAA;MACd,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE;QAClD,WAAW,EAAE;UACX,KAAK,EAAE,IAAI;UACX,UAAU,EAAE,KAAK;UACjB,QAAQ,EAAE,IAAI;UACd,YAAY,EAAE;QACxB;MACA,CAAO,CAAA;IACP;EACA,CAAG;AACH,CAAC,MAAM;EACP;EACEA,gBAAAA,CAAAA,OAAc,GAAG,SAAS,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAE;IAClD,IAAI,SAAS,EAAE;MACb,IAAI,CAAC,MAAM,GAAG,SAAA;MACd,IAAI,QAAQ,GAAG,YAAY,CAAA,CAAA;MAC3B,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC,SAAA;MAC/B,IAAI,CAAC,SAAS,GAAG,IAAI,QAAQ,EAAA;MAC7B,IAAI,CAAC,SAAS,CAAC,WAAW,GAAG,IAAA;IACnC;EACA,CAAA;AACA;ACxBA,IAAID,QAAM,GAAGE,kBAA8B;AAC3C,IAAI,QAAQ,GAAGC,gBAAAA,CAAAA,OAAmB;gBAElB,GAAG,QAAA;AAEnB,SAAS,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE;EAC/B,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM,MAAM,MAAM,EAAE;IAC3C,OAAO,KAAK;EAChB;EACE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,MAAM,EAAE;IAChC,OAAO,KAAK;EAChB;EACE,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,MAAM,MAAM;AACpD;AAEA,SAAS,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE;EACzB,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EACpB,OAAO,GAAG,CAAC,KAAK,EAAE;EACpB,IAAI,CAAC,GAAG,EACN,OAAO,EAAE;EACX,IAAI,GAAG,GAAG,EAAE;EACZ,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;IAC3B,IAAI,CAAC,GAAG,EAAE;MACd;MACA;MACA;MACA;MACM,IAAI,CAAC,GAAG,CAAC;MACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnC,IAAI,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,GAAG,GAAG,EAAE;UACX,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;QACtB,CAAS,MAAM,IAAI,CAAC,GAAG,IAAI,EAAE;UACnB,GAAG,CAAC,CAAC,EAAE,CAAC,GAAI,CAAC,IAAI,CAAC,GAAI,GAAG;UACzB,GAAG,CAAC,CAAC,EAAE,CAAC,GAAI,CAAC,GAAG,EAAE,GAAI,GAAG;QACnC,CAAS,MAAM,IAAI,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE;UAClC,CAAC,GAAG,OAAO,IAAI,CAAC,CAAC,GAAG,MAAM,KAAK,EAAE,CAAC,IAAI,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC;UACnE,GAAG,CAAC,CAAC,EAAE,CAAC,GAAI,CAAC,IAAI,EAAE,GAAI,GAAG;UAC1B,GAAG,CAAC,CAAC,EAAE,CAAC,GAAK,CAAC,IAAI,EAAE,GAAI,EAAE,GAAI,GAAG;UACjC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAK,CAAC,IAAI,CAAC,GAAI,EAAE,GAAI,GAAG;UAChC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAI,CAAC,GAAG,EAAE,GAAI,GAAG;QACnC,CAAS,MAAM;UACL,GAAG,CAAC,CAAC,EAAE,CAAC,GAAI,CAAC,IAAI,EAAE,GAAI,GAAG;UAC1B,GAAG,CAAC,CAAC,EAAE,CAAC,GAAK,CAAC,IAAI,CAAC,GAAI,EAAE,GAAI,GAAG;UAChC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAI,CAAC,GAAG,EAAE,GAAI,GAAG;QACnC;MACA;IACA,CAAK,MAAM,IAAI,GAAG,KAAK,KAAK,EAAE;MACxB,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;MACrC,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EACtB,GAAG,GAAG,GAAG,GAAG,GAAG;MACjB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAChC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACnD;EACA,CAAG,MAAM;IACL,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAC7B,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACzB;EACE,OAAO,GAAG;AACZ;eACe,GAAG,OAAA;AAElB,SAAS,KAAK,CAAC,GAAG,EAAE;EAClB,IAAI,GAAG,GAAG,EAAE;EACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EACjC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;EACnC,OAAO,GAAG;AACZ;aACa,GAAG,KAAA;AAEhB,SAAS,KAAK,CAAC,CAAC,EAAE;EAChB,IAAI,GAAG,GAAI,CAAC,KAAK,EAAE,GACP,CAAC,KAAK,CAAC,GAAI,MAAO,GAClB,CAAC,IAAI,CAAC,GAAI,QAAS,GACpB,CAAC,CAAC,GAAG,IAAI,KAAK,EAAG;EAC5B,OAAO,GAAG,KAAK,CAAC;AAClB;aACa,GAAG,KAAA;AAEhB,SAAS,OAAO,CAAC,GAAG,EAAE,MAAM,EAAE;EAC5B,IAAI,GAAG,GAAG,EAAE;EACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACnC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACd,IAAI,MAAM,KAAK,QAAQ,EACrB,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IACd,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;EAChC;EACE,OAAO,GAAG;AACZ;eACe,GAAG,OAAA;AAElB,SAAS,KAAK,CAAC,IAAI,EAAE;EACnB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EACnB,OAAO,GAAG,GAAG,IAAI,CAAC,KAElB,OAAO,IAAI;AACf;aACa,GAAG,KAAA;AAEhB,SAAS,KAAK,CAAC,IAAI,EAAE;EACnB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EACnB,OAAO,GAAG,GAAG,IAAI,CAAC,KACf,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EACxB,OAAO,IAAI,GAAG,IAAI,CAAC,KAChB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EACxB,OAAO,KAAK,GAAG,IAAI,CAAC,KACjB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EACxB,OAAO,MAAM,GAAG,IAAI,CAAC,KAClB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EACxB,OAAO,OAAO,GAAG,IAAI,CAAC,KACnB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EACxB,OAAO,QAAQ,GAAG,IAAI,CAAC,KACpB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EACxB,OAAO,SAAS,GAAG,IAAI,CAAC,KAExB,OAAO,IAAI;AACf;aACa,GAAG,KAAA;AAEhB,SAAS,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE;EACvC,IAAI,GAAG,GAAG,GAAG,GAAG,KAAK;EACrBH,QAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;EACrB,IAAI,GAAG,GAAG,IAAI,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;EAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;IACtD,IAAI,CAAC;IACL,IAAI,MAAM,KAAK,KAAK,EAClB,CAAC,GAAI,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,GAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAG,GAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAE,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAEzE,CAAC,GAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAG,GAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAE,GAAG,GAAG,CAAC,CAAC,CAAC;IAC1E,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC;EACpB;EACE,OAAO,GAAG;AACZ;cACc,GAAG,MAAA;AAEjB,SAAS,OAAO,CAAC,GAAG,EAAE,MAAM,EAAE;EAC5B,IAAI,GAAG,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;EACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;IAClD,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACd,IAAI,MAAM,KAAK,KAAK,EAAE;MACpB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE;MACjB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAI,CAAC,KAAK,EAAE,GAAI,IAAI;MAC9B,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAI,CAAC,KAAK,CAAC,GAAI,IAAI;MAC7B,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI;IAC3B,CAAK,MAAM;MACL,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE;MACrB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAI,CAAC,KAAK,EAAE,GAAI,IAAI;MAC9B,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAI,CAAC,KAAK,CAAC,GAAI,IAAI;MAC7B,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI;IACvB;EACA;EACE,OAAO,GAAG;AACZ;eACe,GAAG,OAAA;AAElB,SAASI,QAAM,CAAC,CAAC,EAAE,CAAC,EAAE;EACpB,OAAQ,CAAC,KAAK,CAAC,GAAK,CAAC,IAAK,EAAE,GAAG,CAAG;AACpC;cACc,GAAGA,QAAAA;AAEjB,SAASC,QAAM,CAAC,CAAC,EAAE,CAAC,EAAE;EACpB,OAAQ,CAAC,IAAI,CAAC,GAAK,CAAC,KAAM,EAAE,GAAG,CAAG;AACpC;cACc,GAAGA,QAAAA;AAEjB,SAASC,OAAK,CAAC,CAAC,EAAE,CAAC,EAAE;EACnB,OAAQ,CAAC,GAAG,CAAC,KAAM,CAAC;AACtB;aACa,GAAGA,OAAAA;AAEhB,SAASC,SAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EACxB,OAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAM,CAAC;AAC1B;eACe,GAAGA,SAAAA;AAElB,SAASC,SAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EAC3B,OAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAM,CAAC;AAC9B;eACe,GAAGA,SAAAA;AAElB,SAASC,SAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EAC9B,OAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAM,CAAC;AAClC;eACe,GAAGA,SAAAA;AAElB,SAASC,OAAK,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE;EAC/B,IAAI,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC;EACjB,IAAI,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;EAErB,IAAI,EAAE,GAAI,EAAE,GAAG,EAAE,KAAM,CAAC;EACxB,IAAI,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE;EACpC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC;EACnB,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE;AACnB;aACa,GAAGA,OAAAA;AAEhB,SAASC,UAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;EAChC,IAAI,EAAE,GAAI,EAAE,GAAG,EAAE,KAAM,CAAC;EACxB,IAAI,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE;EACpC,OAAO,EAAE,KAAK,CAAC;AACjB;gBACgB,GAAGA,UAAAA;AAEnB,SAASC,UAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;EAChC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE;EAChB,OAAO,EAAE,KAAK,CAAC;AACjB;gBACgB,GAAGA,UAAAA;AAEnB,SAASC,YAAU,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;EAClD,IAAI,KAAK,GAAG,CAAC;EACb,IAAI,EAAE,GAAG,EAAE;EACX,EAAE,GAAI,EAAE,GAAG,EAAE,KAAM,CAAC;EACpB,KAAK,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC;EACxB,EAAE,GAAI,EAAE,GAAG,EAAE,KAAM,CAAC;EACpB,KAAK,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC;EACxB,EAAE,GAAI,EAAE,GAAG,EAAE,KAAM,CAAC;EACpB,KAAK,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC;EAExB,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,KAAK;EAClC,OAAO,EAAE,KAAK,CAAC;AACjB;kBACkB,GAAGA,YAAAA;AAErB,SAASC,YAAU,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;EAClD,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;EAC1B,OAAO,EAAE,KAAK,CAAC;AACjB;kBACkB,GAAGA,YAAAA;AAErB,SAASC,YAAU,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;EAC1D,IAAI,KAAK,GAAG,CAAC;EACb,IAAI,EAAE,GAAG,EAAE;EACX,EAAE,GAAI,EAAE,GAAG,EAAE,KAAM,CAAC;EACpB,KAAK,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC;EACxB,EAAE,GAAI,EAAE,GAAG,EAAE,KAAM,CAAC;EACpB,KAAK,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC;EACxB,EAAE,GAAI,EAAE,GAAG,EAAE,KAAM,CAAC;EACpB,KAAK,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC;EACxB,EAAE,GAAI,EAAE,GAAG,EAAE,KAAM,CAAC;EACpB,KAAK,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC;EAExB,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,KAAK;EACvC,OAAO,EAAE,KAAK,CAAC;AACjB;kBACkB,GAAGA,YAAAA;AAErB,SAASC,YAAU,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;EAC1D,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;EAE/B,OAAO,EAAE,KAAK,CAAC;AACjB;kBACkB,GAAGA,YAAAA;AAErB,SAASC,WAAS,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE;EAC9B,IAAI,CAAC,GAAI,EAAE,IAAK,EAAE,GAAG,GAAI,GAAK,EAAE,KAAK,GAAI;EACzC,OAAO,CAAC,KAAK,CAAC;AAChB;iBACiB,GAAGA,WAAAA;AAEpB,SAASC,WAAS,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE;EAC9B,IAAI,CAAC,GAAI,EAAE,IAAK,EAAE,GAAG,GAAI,GAAK,EAAE,KAAK,GAAI;EACzC,OAAO,CAAC,KAAK,CAAC;AAChB;iBACiB,GAAGA,WAAAA;AAEpB,SAASC,UAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE;EAC7B,OAAO,EAAE,KAAK,GAAG;AACnB;gBACgB,GAAGA,UAAAA;AAEnB,SAASC,UAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE;EAC7B,IAAI,CAAC,GAAI,EAAE,IAAK,EAAE,GAAG,GAAI,GAAK,EAAE,KAAK,GAAI;EACzC,OAAO,CAAC,KAAK,CAAC;AAChB;gBACgB,GAAGA,UAAAA;;ACnRnB,IAAIC,OAAK,GAAGnB,OAAkB;AAC9B,IAAIF,QAAM,GAAGG,kBAA8B;AAE3C,SAASmB,WAAS,GAAG;EACnB,IAAI,CAAC,OAAO,GAAG,IAAI;EACnB,IAAI,CAAC,YAAY,GAAG,CAAC;EACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS;EAC3C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO;EACvC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY;EACjD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,CAAC;EAC/C,IAAI,CAAC,MAAM,GAAG,KAAK;EAEnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC;EACjC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,GAAG,EAAE;AACrC;kBACiB,GAAGA,WAAAA;AAEpBA,WAAS,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE;EACvD;EACE,GAAG,GAAGD,OAAK,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;EAC7B,IAAI,CAAC,IAAI,CAAC,OAAO,EACf,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,KAEnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;EACzC,IAAI,CAAC,YAAY,IAAI,GAAG,CAAC,MAAM;;EAEjC;EACE,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;IACvC,GAAG,GAAG,IAAI,CAAC,OAAO;;IAEtB;IACI,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO;IACjC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC;IACpD,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAC3B,IAAI,CAAC,OAAO,GAAG,IAAI;IAErB,GAAG,GAAGA,OAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC;IACvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,IAAI,CAAC,QAAQ,EAChD,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;EAC7C;EAEE,OAAO,IAAI;AACb,CAAC;AAEDC,WAAS,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,MAAM,CAAC,GAAG,EAAE;EAChD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;EACxBtB,QAAM,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC;EAE7B,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;AAC1B,CAAC;AAEDsB,WAAS,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,GAAG,GAAG;EACxC,IAAI,GAAG,GAAG,IAAI,CAAC,YAAY;EAC3B,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO;EACxB,IAAI,CAAC,GAAG,KAAK,GAAI,CAAC,GAAG,GAAG,IAAI,CAAC,SAAS,IAAI,KAAM;EAChD,IAAI,GAAG,GAAG,IAAI,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;EACvC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI;EACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EACxB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;;EAEd;EACE,GAAG,KAAK,CAAC;EACT,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,EAAE;IACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,EACrC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;IAEd,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;IACZ,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;IACZ,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;IACZ,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;IACZ,GAAG,CAAC,CAAC,EAAE,CAAC,GAAI,GAAG,KAAK,EAAE,GAAI,IAAI;IAC9B,GAAG,CAAC,CAAC,EAAE,CAAC,GAAI,GAAG,KAAK,EAAE,GAAI,IAAI;IAC9B,GAAG,CAAC,CAAC,EAAE,CAAC,GAAI,GAAG,KAAK,CAAC,GAAI,IAAI;IAC7B,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI;EACzB,CAAG,MAAM;IACL,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI;IACrB,GAAG,CAAC,CAAC,EAAE,CAAC,GAAI,GAAG,KAAK,CAAC,GAAI,IAAI;IAC7B,GAAG,CAAC,CAAC,EAAE,CAAC,GAAI,GAAG,KAAK,EAAE,GAAI,IAAI;IAC9B,GAAG,CAAC,CAAC,EAAE,CAAC,GAAI,GAAG,KAAK,EAAE,GAAI,IAAI;IAC9B,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;IACZ,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;IACZ,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;IACZ,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;IAEZ,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,EACjC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;EAClB;EAEE,OAAO,GAAG;AACZ,CAAC;;;ACzFD,IAAID,OAAK,GAAGnB,OAAmB;AAC/B,IAAI,MAAM,GAAGmB,OAAK,CAAC,MAAM;AAEzB,SAASE,MAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EACxB,IAAI,CAAC,KAAK,CAAC,EACT,OAAOC,MAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACtB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EACpB,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACrB,IAAI,CAAC,KAAK,CAAC,EACT,OAAOC,OAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACzB;aACY,GAAGF,MAAAA;AAEf,SAASC,MAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EACrB,OAAQ,CAAC,GAAG,CAAC,GAAM,CAAC,CAAC,GAAI,CAAE;AAC7B;aACY,GAAGA,MAAAA;AAEf,SAASC,OAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EACtB,OAAQ,CAAC,GAAG,CAAC,GAAK,CAAC,GAAG,CAAE,GAAI,CAAC,GAAG,CAAE;AACpC;cACa,GAAGA,OAAAA;AAEhB,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EACpB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AAClB;YACW,GAAG,GAAA;AAEd,SAASC,QAAM,CAAC,CAAC,EAAE;EACjB,OAAO,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC;AACrD;eACc,GAAGA,QAAAA;AAEjB,SAASC,QAAM,CAAC,CAAC,EAAE;EACjB,OAAO,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC;AACrD;eACc,GAAGA,QAAAA;AAEjB,SAASC,QAAM,CAAC,CAAC,EAAE;EACjB,OAAO,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,GAAI,CAAC,KAAK,CAAE;AACjD;eACc,GAAGA,QAAAA;AAEjB,SAASC,QAAM,CAAC,CAAC,EAAE;EACjB,OAAO,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,GAAI,CAAC,KAAK,EAAG;AACnD;eACc,GAAGA,QAAAA;AC9CjB,IAAIR,OAAK,GAAGnB,OAAmB;AAC/B,IAAI4B,QAAM,GAAG3B,QAAoB;AACjC,IAAI4B,WAAS,GAAGC,QAAmB;AAEnC,IAAI3B,QAAM,GAAGgB,OAAK,CAAC,MAAM;AACzB,IAAIf,OAAK,GAAGe,OAAK,CAAC,KAAK;AACvB,IAAIZ,SAAO,GAAGY,OAAK,CAAC,OAAO;AAC3B,IAAI,IAAI,GAAGU,WAAS,CAAC,IAAI;AACzB,IAAIT,WAAS,GAAGQ,QAAM,CAAC,SAAS;AAEhC,IAAI,MAAM,GAAG,CACX,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,CACvB;AAED,SAAS,IAAI,GAAG;EACd,IAAI,EAAE,IAAI,YAAY,IAAI,CAAC,EACzB,OAAO,IAAI,IAAI,EAAE;EAEnBR,WAAS,CAAC,IAAI,CAAC,IAAI,CAAC;EACpB,IAAI,CAAC,CAAC,GAAG,CACP,UAAU,EAAE,UAAU,EAAE,UAAU,EAClC,UAAU,EAAE,UAAU,CAAE;EAC1B,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC;AACxB;AAEAD,OAAK,CAAC,QAAQ,CAAC,IAAI,EAAEC,WAAS,CAAC;IAC/B,EAAc,GAAG,IAAI;AAErB,IAAI,CAAC,SAAS,GAAG,GAAG;AACpB,IAAI,CAAC,OAAO,GAAG,GAAG;AAClB,IAAI,CAAC,YAAY,GAAG,EAAE;AACtB,IAAI,CAAC,SAAS,GAAG,EAAE;AAEnB,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE;EACpD,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;EAEd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EACzB,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;EAEvB,OAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EACrB,CAAC,CAAC,CAAC,CAAC,GAAGjB,QAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;EAE/D,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAEjB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC7B,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;IAClB,IAAI,CAAC,GAAGI,SAAO,CAACJ,QAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;IACnE,CAAC,GAAG,CAAC;IACL,CAAC,GAAG,CAAC;IACL,CAAC,GAAGA,QAAM,CAAC,CAAC,EAAE,EAAE,CAAC;IACjjC,CAAC;AAED,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,MAAM,CAAC,GAAG,EAAE;EAC5C,IAAI,GAAG,KAAK,KAAK,EACf,OAAOe,OAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,KAEpC,OAAOA,OAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC;AACvC,CAAC;ACvED,IAAIA,OAAK,GAAGnB,OAAmB;AAC/B,IAAI4B,QAAM,GAAG3B,QAAoB;AACjC,IAAI,SAAS,GAAG6B,QAAmB;AACnC,IAAIhC,QAAM,GAAGiC,kBAA8B;AAE3C,IAAI3B,OAAK,GAAGe,OAAK,CAAC,KAAK;AACvB,IAAIb,SAAO,GAAGa,OAAK,CAAC,OAAO;AAC3B,IAAI,OAAO,GAAGA,OAAK,CAAC,OAAO;AAC3B,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI;AACzB,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK;AAC3B,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM;AAC7B,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM;AAC7B,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM;AAC7B,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM;AAE7B,IAAIC,WAAS,GAAGQ,QAAM,CAAC,SAAS;AAEhC,IAAI,QAAQ,GAAG,CACbhB,IAAI,EAAE,IAAI,YAAYA,QAAM,CAAC,EAC3B,OAAO,IAAIA,QAAM,EAAE;EAErBZ,WAAS,CAAC,IAAI,CAAC,IAAI,CAAC;EACpB,IAAI,CAAC,CAAC,GAAG,CACP,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAC9C,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAC/C;EACD,IAAI,CAAC,CAAC,GAAG,QAAQ;EACjB,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC;AACxB;AACAD,OAAK,CAAC,QAAQ,CAACa,QAAM,EAAEZ,WAAS,CAAC;IACjC,IAAc,GAAGY,QAAM;AAEvBA,QAAM,CAAC,SAAS,GAAG,GAAG;AACtBA,QAAM,CAAC,OAAO,GAAG,GAAG;AACpBA,QAAM,CAAC,YAAY,GAAG,GAAG;AACzBA,QAAM,CAAC,SAAS,GAAG,EAAE;AAErBA,QAAM,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE;EACtD,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;EAEd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EACzB,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;EACvB,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EACtB,CAAC,CAAC,CAAC,CAAC,GAAG1B,SAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;EAE1E,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAEjBR,QAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,CAAC;EAClC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC7B,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9D,IAAI,EAAE,GAAGM,OAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACzC,CAAC,GAAG,CAAC;IACL,CAAC,GAAG,CAAC;IACL,CAAC,GAAG,CAAC;IACL,CAAC,GAAGA,OAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAChB,CAAC,GAAG,CAAC;IACL,CAAC,GAAG,CAAC;IACL,CAAC,GAAG,CAAC;IACL,CAAC,GAAGA,OAAK,CAAC,EAAE,EAAE,EAAE,CAAC;EACrB;EAEE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,OAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,OAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,OAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,OAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,OAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,OAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,OAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,OAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AACjC,CAAC;AAED4B,QAAM,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,MAAM,CAAC,GAAG,EAAE;EAC9C,IAAI,GAAG,KAAK,KAAK,EACf,OAAOb,OAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,KAEpC,OAAOA,OAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC;AACvC,CAAC;ACtGD,IAAIA,OAAK,GAAGnB,OAAmB;AAC/B,IAAI,MAAM,GAAGC,IAAgB;AAE7B,SAAS,MAAM,GAAG;EAChB,IAAI,EAAE,IAAI,YAAY,MAAM,CAAC,EAC3B,OAAO,IAAI,MAAM,EAAE;EAErB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;EACjB,IAAI,CAAC,CAAC,GAAG,CACP,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAC9C,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAE;AACpD;AACAkB,OAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC;IAC9B,IAAc,GAAG,MAAM;AAEvB,MAAM,CAAC,SAAS,GAAG,GAAG;AACtB,MAAM,CAAC,OAAO,GAAG,GAAG;AACpB,MAAM,CAAC,YAAY,GAAG,GAAG;AACzB,MAAM,CAAC,SAAS,GAAG,EAAE;AAErB,MAAM,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,MAAM,CAAC,GAAG,EAAE;EAChD;EACE,IAAI,GAAG,KAAK,KAAK,EACf,OAAOA,OAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,KAEhD,OAAOA,OAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC;AACnD,CAAC;AC1BD,IAAIA,OAAK,GAAGnB,OAAmB;AAC/B,IAAI4B,QAAM,GAAG3B,QAAoB;AACjC,IAAIH,QAAM,GAAGgC,kBAA8B;AAE3C,IAAI,SAAS,GAAGX,OAAK,CAAC,SAAS;AAC/B,IAAI,SAAS,GAAGA,OAAK,CAAC,SAAS;AAC/B,IAAI,QAAQ,GAAGA,OAAK,CAAC,QAAQ;AAC7B,IAAI,QAAQ,GAAGA,OAAK,CAAC,QAAQ;AAC7B,IAAI,KAAK,GAAGA,OAAK,CAAC,KAAK;AACvB,IAAI,QAAQ,GAAGA,OAAK,CAAC,QAAQ;AAC7B,IAAI,QAAQ,GAAGA,OAAK,CAAC,QAAQ;AAC7B,IAAI,UAAU,GAAGA,OAAK,CAAC,UAAU;AACjC,IAAI,UAAU,GAAGA,OAAK,CAAC,UAAU;AACjC,IAAI,UAAU,GAAGA,OAAK,CAAC,UAAU;AACjC,IAAI,UAAU,GAAGA,OAAK,CAAC,UAAU;AAEjC,IAAIC,WAAS,GAAGQ,QAAM,CAAC,SAAS;AAEhC,IAAI,QAAQ,GAAG,CACbhB,IAAI,EAAE,IAAI,YAAYA,QAAM,CAAC,EAC3B,OAAO,IAAIA,QAAM,EAAE;EAErBb,WAAS,CAAC,IAAI,CAAC,IAAI,CAAC;EACpB,IAAI,CAAC,CAAC,GAAG,CACP,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,CAAE;EAC1B,IAAI,CAAC,CAAC,GAAG,QAAQ;EACjB,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC;AACzB;AACAD,OAAK,CAAC,QAAQ,CAACc,QAAM,EAAEb,WAAS,CAAC;IACjC,IAAc,GAAGa,QAAM;AAEvBA,QAAM,CAAC,SAAS,GAAG,IAAI;AACvBA,QAAM,CAAC,OAAO,GAAG,GAAG;AACpBA,QAAM,CAAC,YAAY,GAAG,GAAG;AACzBA,QAAM,CAAC,SAAS,GAAG,GAAG;AAEtBA,QAAM,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE;EAClE,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;;EAEhB;EACE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EACzB,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;EACvB,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IAC3B,IAAI,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;IAC1C,IAAI,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACzC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;IACtB,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IACrB,IAAI,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAA;IAC5C,IAAI,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAC3C,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;IACtB,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAErB,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CACf,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,CAAC;IACf,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CACnB,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,CAAC;EACnB;AACA,CAAC;AAEDA,QAAM,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE;EACtD,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,CAAC;EAE9B,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;EAEd,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;EACnB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;EACnB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;EACnB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;EACnB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;EACnB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;EAEnBnC,QAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,CAAC;EAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IACpC,IAAI,KAAK,GAAG,EAAE;IACd,IAAI,KAAK,GAAG,EAAE;IACd,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;IAC7B,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;IAC7B,IAAI,KAAK,GAAG,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAM,CAAC;IAC3C,IAAI,KAAK,GAAG,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAC3C,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACrB,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACzB,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;IAChB,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAEpB,IAAI,KAAK,GAAG,UAAU,CACpB,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,CAAC;IACf,IAAI,KAAK,GAAG,UAAU,CACpB,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,CAAC;IAEf,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;IACzB,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;IACzB,KAAK,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAM,CAAC;IACxC,KAAK,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAExC,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAChD,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAEhD,EAAE,GAAG,EAAE;IACP,EAAE,GAAG,EAAE;IAEP,EAAE,GAAG,EAAE;IACP,EAAE,GAAG,EAAE;IAEP,EAAE,GAAG,EAAE;IACP,EAAE,GAAG,EAAE;IAEP,EAAE,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC;IACnC,EAAE,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC;IAEnC,EAAE,GAAG,EAAE;IACP,EAAE,GAAG,EAAE;IAEP,EAAE,GAAG,EAAE;IACP,EAAE,GAAG,EAAE;IAEP,EAAE,GAAG,EAAE;IACP,EAAE,GAAG,EAAE;IAEP,EAAE,GAAG,QAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IACzC,EAAE,GAAG,QAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;EAC7C;EAEE,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;EACxB,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;EACxB,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;EACxB,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;EACxB,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;EACxB,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACzB,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACzB,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AAC3B,CAAC;AAEDmC,QAAM,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,MAAM,CAAC,GAAG,EAAE;EAC9C,IAAI,GAAG,KAAK,KAAK,EACf,OAAOd,OAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,KAEpC,OAAOA,OAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC;AACvC,CAAC;AAED,SAAS,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;EACnC,IAAI,CAAC,GAAI,EAAE,GAAG,EAAE,GAAM,CAAC,EAAE,GAAI,EAAG;EAChC,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,IAAI,WAAW;EAClB,OAAO,CAAC;AACV;AAEA,SAAS,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;EACvC,IAAI,CAAC,GAAI,EAAE,GAAG,EAAE,GAAM,CAAC,EAAE,GAAI,EAAG;EAChC,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,IAAI,WAAW;EAClB,OAAO,CAAC;AACV;AAEA,SAAS,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;EACpC,IAAI,CAAC,GAAI,EAAE,GAAG,EAAE,GAAK,EAAE,GAAG,EAAG,GAAI,EAAE,GAAG,EAAG;EACzC,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,IAAI,WAAW;EAClB,OAAO,CAAC;AACV;AAEA,SAAS,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;EACxC,IAAI,CAAC,GAAI,EAAE,GAAG,EAAE,GAAK,EAAE,GAAG,EAAG,GAAI,EAAE,GAAG,EAAG;EACzC,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,IAAI,WAAW;EAClB,OAAO,CAAC;AACV;AAEA,SAAS,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE;EACzB,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACjC,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;EACjC,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;;EAEjC,IAAI,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;EAC7B,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,IAAI,WAAW;EAClB,OAAO,CAAC;AACV;AAEA,SAAS,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE;EACzB,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACjC,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;EACjC,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;;EAEjC,IAAI,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;EAC7B,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,IAAI,WAAW;EAClB,OAAO,CAAC;AACV;AAEA,SAAS,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE;EACzB,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACjC,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACjC,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;;EAEjC,IAAI,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;EAC7B,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,IAAI,WAAW;EAClB,OAAO,CAAC;AACV;AAEA,SAAS,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE;EACzB,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACjC,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACjC,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;;EAEjC,IAAI,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;EAC7B,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,IAAI,WAAW;EAClB,OAAO,CAAC;AACV;AAEA,SAAS,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE;EACzB,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAChC,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAChC,IAAI,KAAK,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAE/B,IAAI,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;EAC7B,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,IAAI,WAAW;EAClB,OAAO,CAAC;AACV;AAEA,SAAS,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE;EACzB,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAChC,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAChC,IAAI,KAAK,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAE/B,IAAI,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;EAC7B,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,IAAI,WAAW;EAClB,OAAO,CAAC;AACV;AAEA,SAAS,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE;EACzB,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACjC,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAA;EAClC,IAAI,KAAK,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAE/B,IAAI,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;EAC7B,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,IAAI,WAAW;EAClB,OAAO,CAAC;AACV;AAEA,SAAS,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE;EACzB,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACjC,IAAI,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAA;EAClC,IAAI,KAAK,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAE/B,IAAI,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;EAC7B,IAAI,CAAC,GAAG,CAAC,EACP,CAAC,IAAI,WAAW;EAClB,OAAO,CAAC;AACV;ACvUA,IAAIA,OAAK,GAAGnB,OAAmB;AAE/B,IAAI,MAAM,GAAGC,IAAgB;AAE7B,SAAS,MAAM,GAAG;EAChB,IAAI,EAAE,IAAI,YAAY,MAAM,CAAC,EAC3B,OAAO,IAAI,MAAM,EAAE;EAErB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;EACjB,IAAI,CAAC,CAAC,GAAG,CACP,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU,CAAE;AAC5B;AACAkB,OAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC;IAC9B,IAAc,GAAG,MAAM;AAEvB,MAAM,CAAC,SAAS,GAAG,IAAI;AACvB,MAAM,CAAC,OAAO,GAAG,GAAG;AACpB,MAAM,CAAC,YAAY,GAAG,GAAG;AACzB,MAAM,CAAC,SAAS,GAAG,GAAG;AAEtB,MAAM,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,MAAM,CAAC,GAAG,EAAE;EAC9C,IAAI,GAAG,KAAK,KAAK,EACf,OAAOA,OAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,KAEjD,OAAOA,OAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC;AACpD,CAAC;QChCW,GAAGnB,EAAAA;UACD,GAAGC,IAAAA;UACH,GAAG6B,IAAAA;UACH,GAAGC,IAAAA;UACH,GAAGG,IAAAA;;ACJjB,IAAIf,OAAK,GAAGnB,OAAkB;AAC9B,IAAI,MAAM,GAAGC,QAAmB;AAEhC,IAAI,MAAM,GAAGkB,OAAK,CAAC,MAAM;AACzB,IAAI,KAAK,GAAGA,OAAK,CAAC,KAAK;AACvB,IAAI,OAAO,GAAGA,OAAK,CAAC,OAAO;AAC3B,IAAI,OAAO,GAAGA,OAAK,CAAC,OAAO;AAC3B,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS;AAEhC,SAAS,SAAS,GAAG;EACnB,IAAI,EAAE,IAAI,YAAY,SAAS,CAAC,EAC9B,OAAO,IAAI,SAAS,EAAE;EAExB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;EAEpB,IAAI,CAAC,CAAC,GAAG,CAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAE;EACvE,IAAI,CAAC,MAAM,GAAG,QAAQ;AACxB;AACAA,OAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAC;gBACnB,GAAG,SAAA;AAEpB,SAAS,CAAC,SAAS,GAAG,GAAG;AACzB,SAAS,CAAC,OAAO,GAAG,GAAG;AACvB,SAAS,CAAC,YAAY,GAAG,GAAG;AAC5B,SAAS,CAAC,SAAS,GAAG,EAAE;AAExB,SAAS,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE;EACxD,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,IAAI,EAAE,GAAG,CAAC;EACV,IAAI,EAAE,GAAG,CAAC;EACV,IAAI,EAAE,GAAG,CAAC;EACV,IAAI,EAAE,GAAG,CAAC;EACV,IAAI,EAAE,GAAG,CAAC;EACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;IAC3B,IAAI,CAAC,GAAG,KAAK,CACX,MAAM,CACJ,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAClD,CAAC,CAAC,CAAC,CAAC,CAAC,EACP,CAAC,CAAC;IACJ,CAAC,GAAG,CAAC;IACL,CAAC,GAAG,CAAC;IACL,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC;IACjB,CAAC,GAAG,CAAC;IACL,CAAC,GAAG,CAAC;IACL,CAAC,GAAG,KAAK,CACP,MAAM,CACJ,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAC7D,EAAE,CAAC,CAAC,CAAC,CAAC,EACR,EAAE,CAAC;IACL,EAAE,GAAG,EAAE;IACP,EAAE,GAAG,EAAE;IACP,EAAE,GAAG,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC;IACnB,EAAE,GAAG,EAAE;IACP,EAAE,GAAG,CAAC;EACV;EACE,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;EAC7B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;EACrC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;EACrC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;EACrC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;EACrC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;AACf,CAAC;AAED,SAAS,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,MAAM,CAAC,GAAG,EAAE;EACjD,IAAI,GAAG,KAAK,KAAK,EACf,OAAOA,OAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,KAEvC,OAAOA,OAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC;AAC1C,CAAC;AAED,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EACrB,IAAI,CAAC,IAAI,EAAE,EACT,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KACd,IAAI,CAAC,IAAI,EAAE,EACd,OAAQ,CAAC,GAAG,CAAC,GAAM,CAAC,CAAC,GAAI,CAAE,CAAC,KACzB,IAAI,CAAC,IAAI,EAAE,EACd,OAAO,CAAC,CAAC,GAAI,CAAC,CAAE,IAAI,CAAC,CAAC,KACnB,IAAI,CAAC,IAAI,EAAE,EACd,OAAQ,CAAC,GAAG,CAAC,GAAK,CAAC,GAAI,CAAC,CAAG,CAAC,KAE5B,OAAO,CAAC,IAAI,CAAC,GAAI,CAAC,CAAE,CAAC;AACzB;AAEA,SAAS,CAAC,CAAC,CAAC,EAAE;EACZ,IAAI,CAAC,IAAI,EAAE,EACT,OAAO,UAAU,CAAC,KACf,IAAI,CAAC,IAAI,EAAE,EACd,OAAO,UAAU,CAAC,KACf,IAAI,CAAC,IAAI,EAAE,EACd,OAAO,UAAU,CAAC,KACf,IAAI,CAAC,IAAI,EAAE,EACd,OAAO,UAAU,CAAC,KAElB,OAAO,UAAU;AACrB;AAEA,SAAS,EAAE,CAAC,CAAC,EAAE;EACb,IAAI,CAAC,IAAI,EAAE,EACT,OAAO,UAAU,CAAC,KACf,IAAI,CAAC,IAAI,EAAE,EACd,OAAO,UAAU,CAAC,KACf,IAAI,CAAC,IAAI,EAAE,EACd,OAAO,UAAU,CAAC,KACf,IAAI,CAAC,IAAI,EAAE,EACd,OAAO,UAAU,CAAC,KAElB,OAAO,UAAU;AACrB;AAEA,IAAI,CAAC,GAAG,CACN,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACpD,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACpD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EACpD,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACpD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CACrD;AAED,IAAI,EAAE,GAAG,CACP,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EACpD,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACpD,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EACpD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,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","sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: number;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        BufferLayout.ns64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware:\n    | ((url: string, options: any) => Promise<Response>)\n    | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url: string, options: any) => {\n      const modifiedFetchArgs = await new Promise<[string, any]>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) =>\n              resolve([modifiedUrl, modifiedOptions]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: (modifiedUrl: string, modifiedOptions: any) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; lastValidBlockHeight: number}> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, lastValidBlockHeight: number}>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; lastValidBlockHeight: number}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block height information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block production information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './vote-program';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}