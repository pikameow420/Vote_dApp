{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _typeof from '@babel/runtime/helpers/typeof';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport { generatePrivate, getPublic, decrypt } from '@toruslabs/eccrypto';\nimport { post, generateJsonRPCObject, get, setAPIKey, setEmbedHost } from '@toruslabs/http-helpers';\nimport BN from 'bn.js';\nimport { ec } from 'elliptic';\nimport JsonStringify from 'json-stable-stringify';\nimport { keccak256, toChecksumAddress } from 'web3-utils';\nimport loglevel from 'loglevel';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _wrapNativeSuper from '@babel/runtime/helpers/wrapNativeSuper';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nvar log = loglevel.getLogger('torus.js');\nlog.disableAll();\nfunction _createSuper$1(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct$1() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nvar SomeError = /*#__PURE__*/function (_Error) {\n  _inherits(SomeError, _Error);\n  var _super = _createSuper$1(SomeError);\n  function SomeError(_ref) {\n    var _this;\n    var errors = _ref.errors,\n      responses = _ref.responses,\n      predicate = _ref.predicate;\n    _classCallCheck(this, SomeError);\n    _this = _super.call(this, 'Unable to resolve enough promises.');\n    _this.errors = errors;\n    _this.responses = responses;\n    _this.predicate = predicate;\n    return _this;\n  }\n  return _createClass(SomeError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar Some = function Some(promises, predicate) {\n  return new Promise(function (resolve, reject) {\n    var finishedCount = 0;\n    var sharedState = {\n      resolved: false\n    };\n    var errorArr = new Array(promises.length).fill(undefined);\n    var resultArr = new Array(promises.length).fill(undefined);\n    var predicateError;\n    promises.forEach(function (x, index) {\n      x.then(function (resp) {\n        resultArr[index] = resp;\n        return undefined;\n      }).catch(function (error) {\n        errorArr[index] = error;\n      }).finally(function () {\n        if (sharedState.resolved) return;\n        predicate(resultArr.slice(0), sharedState).then(function (data) {\n          sharedState.resolved = true;\n          resolve(data);\n          return undefined;\n        }).catch(function (error) {\n          // log only the last predicate error\n          predicateError = error;\n        }).finally(function (_) {\n          finishedCount += 1;\n          if (finishedCount === promises.length) {\n            var errors = Object.values(resultArr.reduce(function (acc, z) {\n              var _error$data;\n              var _ref2 = z || {},\n                id = _ref2.id,\n                error = _ref2.error;\n              if ((error === null || error === void 0 ? void 0 : (_error$data = error.data) === null || _error$data === void 0 ? void 0 : _error$data.length) > 0) {\n                if (error.data.startsWith('Error occurred while verifying params')) acc[id] = capitalizeFirstLetter(error.data);else acc[id] = error.data;\n              }\n              return acc;\n            }, {}));\n            if (errors.length > 0) {\n              // Format-able errors\n              var msg = errors.length > 1 ? \"\\n\".concat(errors.map(function (it) {\n                return \"\\u2022 \".concat(it);\n              }).join('\\n')) : errors[0];\n              reject(new Error(msg));\n            } else {\n              var _predicateError;\n              reject(new SomeError({\n                errors: errorArr,\n                responses: resultArr,\n                predicate: ((_predicateError = predicateError) === null || _predicateError === void 0 ? void 0 : _predicateError.message) || predicateError\n              }));\n            }\n          }\n        });\n      });\n    });\n  });\n};\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nvar GetOrSetNonceError = /*#__PURE__*/function (_Error) {\n  _inherits(GetOrSetNonceError, _Error);\n  var _super = _createSuper(GetOrSetNonceError);\n  function GetOrSetNonceError() {\n    _classCallCheck(this, GetOrSetNonceError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(GetOrSetNonceError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar kCombinations = function kCombinations(s, k) {\n  var set = s;\n  if (typeof set === 'number') {\n    set = Array.from({\n      length: set\n    }, function (_, i) {\n      return i;\n    });\n  }\n  if (k > set.length || k <= 0) {\n    return [];\n  }\n  if (k === set.length) {\n    return [set];\n  }\n  if (k === 1) {\n    return set.reduce(function (acc, cur) {\n      return [].concat(_toConsumableArray(acc), [[cur]]);\n    }, []);\n  }\n  var combs = [];\n  var tailCombs = [];\n  for (var i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1);\n    for (var j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i]].concat(_toConsumableArray(tailCombs[j])));\n    }\n  }\n  return combs;\n};\nvar thresholdSame = function thresholdSame(arr, t) {\n  var hashMap = {};\n  for (var i = 0; i < arr.length; i += 1) {\n    var str = JsonStringify(arr[i]);\n    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1;\n    if (hashMap[str] === t) {\n      return arr[i];\n    }\n  }\n  return undefined;\n};\nvar keyLookup = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(endpoints, verifier, verifierId) {\n    var lookupPromises;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            lookupPromises = endpoints.map(function (x) {\n              return post(x, generateJsonRPCObject('VerifierLookupRequest', {\n                verifier: verifier,\n                verifier_id: verifierId.toString()\n              })).catch(function (err) {\n                return log.error('lookup request failed', err);\n              });\n            });\n            return _context.abrupt(\"return\", Some(lookupPromises, function (lookupResults) {\n              var lookupShares = lookupResults.filter(function (x1) {\n                return x1;\n              });\n              var errorResult = thresholdSame(lookupShares.map(function (x2) {\n                return x2 && x2.error;\n              }), ~~(endpoints.length / 2) + 1);\n              var keyResult = thresholdSame(lookupShares.map(function (x3) {\n                return x3 && x3.result;\n              }), ~~(endpoints.length / 2) + 1);\n              if (keyResult || errorResult) {\n                return Promise.resolve({\n                  keyResult: keyResult,\n                  errorResult: errorResult\n                });\n              }\n              return Promise.reject(new Error(\"invalid results \".concat(JSON.stringify(lookupResults))));\n            }));\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function keyLookup(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar waitKeyLookup = function waitKeyLookup(endpoints, verifier, verifierId, timeout) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      keyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject);\n    }, timeout);\n  });\n};\nvar keyAssign = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n    var endpoints, torusNodePubs, lastPoint, firstPoint, verifier, verifierId, signerHost, network, nodeNum, initialPoint, data, signedData, acceptedErrorMsgs;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            endpoints = _ref2.endpoints, torusNodePubs = _ref2.torusNodePubs, lastPoint = _ref2.lastPoint, firstPoint = _ref2.firstPoint, verifier = _ref2.verifier, verifierId = _ref2.verifierId, signerHost = _ref2.signerHost, network = _ref2.network;\n            if (lastPoint === undefined) {\n              nodeNum = Math.floor(Math.random() * endpoints.length);\n              initialPoint = nodeNum;\n            } else {\n              nodeNum = lastPoint % endpoints.length;\n            }\n            if (!(nodeNum === firstPoint)) {\n              _context2.next = 4;\n              break;\n            }\n            throw new Error('Looped through all');\n          case 4:\n            if (firstPoint !== undefined) initialPoint = firstPoint;\n            data = generateJsonRPCObject('KeyAssign', {\n              verifier: verifier,\n              verifier_id: verifierId.toString()\n            });\n            _context2.prev = 6;\n            _context2.next = 9;\n            return post(signerHost, data, {\n              headers: {\n                pubKeyX: torusNodePubs[nodeNum].X,\n                pubKeyY: torusNodePubs[nodeNum].Y,\n                network: network\n              }\n            }, {\n              useAPIKey: true\n            });\n          case 9:\n            signedData = _context2.sent;\n            return _context2.abrupt(\"return\", post(endpoints[nodeNum], _objectSpread$1(_objectSpread$1({}, data), signedData), {\n              headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n              }\n            }));\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](6);\n            log.error(_context2.t0);\n            acceptedErrorMsgs = [\n            // Slow node\n            'Timed out',\n            // Happens when the node is not reachable (dns issue etc)\n            'TypeError: Failed to fetch',\n            // All except iOS and Firefox\n            'TypeError: cancelled',\n            // iOS\n            'TypeError: NetworkError when attempting to fetch resource.' // Firefox\n            ];\n\n            if (!acceptedErrorMsgs.includes(_context2.t0.message)) {\n              _context2.next = 19;\n              break;\n            }\n            return _context2.abrupt(\"return\", keyAssign({\n              endpoints: endpoints,\n              torusNodePubs: torusNodePubs,\n              lastPoint: nodeNum + 1,\n              firstPoint: initialPoint,\n              verifier: verifier,\n              verifierId: verifierId,\n              signerHost: signerHost,\n              network: network\n            }));\n          case 19:\n            throw new Error(\"Sorry, the Torus Network that powers Web3Auth is currently very busy.\\n    We will generate your key in time. Pls try again later. \\n\\n    \".concat(_context2.t0.message || ''));\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[6, 13]]);\n  }));\n  return function keyAssign(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\n// of Torus nodes to handle malicious node responses\n\nvar Torus = /*#__PURE__*/function () {\n  function Torus() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$enableOneKey = _ref.enableOneKey,\n      enableOneKey = _ref$enableOneKey === void 0 ? false : _ref$enableOneKey,\n      _ref$metadataHost = _ref.metadataHost,\n      metadataHost = _ref$metadataHost === void 0 ? 'https://metadata.tor.us' : _ref$metadataHost,\n      _ref$allowHost = _ref.allowHost,\n      allowHost = _ref$allowHost === void 0 ? 'https://signer.tor.us/api/allow' : _ref$allowHost,\n      _ref$signerHost = _ref.signerHost,\n      signerHost = _ref$signerHost === void 0 ? 'https://signer.tor.us/api/sign' : _ref$signerHost,\n      _ref$serverTimeOffset = _ref.serverTimeOffset,\n      serverTimeOffset = _ref$serverTimeOffset === void 0 ? 0 : _ref$serverTimeOffset,\n      _ref$network = _ref.network,\n      network = _ref$network === void 0 ? 'mainnet' : _ref$network;\n    _classCallCheck(this, Torus);\n    this.ec = new ec('secp256k1');\n    this.metadataHost = metadataHost;\n    this.allowHost = allowHost;\n    this.enableOneKey = enableOneKey;\n    this.serverTimeOffset = serverTimeOffset || 0; // ms\n\n    this.signerHost = signerHost;\n    this.network = network;\n  }\n  _createClass(Torus, [{\n    key: \"getUserTypeAndAddress\",\n    value:\n    /**\n     * Note: use this function only for openlogin tkey account lookups.\n     */\n    function () {\n      var _getUserTypeAndAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(endpoints, torusNodePubs, _ref2) {\n        var verifier,\n          verifierId,\n          doesKeyAssign,\n          _ref3,\n          keyResult,\n          errorResult,\n          isNewKey,\n          finalKeyResult,\n          assignResult,\n          _finalKeyResult$keys$,\n          X,\n          Y,\n          typeOfUser,\n          nonce,\n          pubNonce,\n          modifiedPubKey,\n          upgraded,\n          _yield$this$getOrSetN,\n          finalX,\n          finalY,\n          address,\n          _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                verifier = _ref2.verifier, verifierId = _ref2.verifierId;\n                doesKeyAssign = _args.length > 3 && _args[3] !== undefined ? _args[3] : false;\n                _context.next = 4;\n                return keyLookup(endpoints, verifier, verifierId);\n              case 4:\n                _context.t0 = _context.sent;\n                if (_context.t0) {\n                  _context.next = 7;\n                  break;\n                }\n                _context.t0 = {};\n              case 7:\n                _ref3 = _context.t0;\n                keyResult = _ref3.keyResult;\n                errorResult = _ref3.errorResult;\n                isNewKey = false;\n                if (!(errorResult && JSON.stringify(errorResult).includes('Verifier + VerifierID has not yet been assigned'))) {\n                  _context.next = 26;\n                  break;\n                }\n                if (doesKeyAssign) {\n                  _context.next = 14;\n                  break;\n                }\n                throw new Error('Verifier + VerifierID has not yet been assigned');\n              case 14:\n                _context.next = 16;\n                return keyAssign({\n                  endpoints: endpoints,\n                  torusNodePubs: torusNodePubs,\n                  lastPoint: undefined,\n                  firstPoint: undefined,\n                  verifier: verifier,\n                  verifierId: verifierId,\n                  signerHost: this.signerHost,\n                  network: this.network\n                });\n              case 16:\n                _context.next = 18;\n                return waitKeyLookup(endpoints, verifier, verifierId, 1000);\n              case 18:\n                _context.t1 = _context.sent;\n                if (_context.t1) {\n                  _context.next = 21;\n                  break;\n                }\n                _context.t1 = {};\n              case 21:\n                assignResult = _context.t1;\n                finalKeyResult = assignResult.keyResult;\n                isNewKey = true;\n                _context.next = 31;\n                break;\n              case 26:\n                if (!keyResult) {\n                  _context.next = 30;\n                  break;\n                }\n                finalKeyResult = keyResult;\n                _context.next = 31;\n                break;\n              case 30:\n                throw new Error(\"node results do not match at first lookup \".concat(JSON.stringify(keyResult || {}), \", \").concat(JSON.stringify(errorResult || {})));\n              case 31:\n                if (!finalKeyResult) {\n                  _context.next = 61;\n                  break;\n                }\n                _finalKeyResult$keys$ = finalKeyResult.keys[0], X = _finalKeyResult$keys$.pub_key_X, Y = _finalKeyResult$keys$.pub_key_Y;\n                _context.prev = 33;\n                _context.next = 37;\n                return this.getOrSetNonce(X, Y, undefined, !isNewKey);\n              case 37:\n                _yield$this$getOrSetN = _context.sent;\n                typeOfUser = _yield$this$getOrSetN.typeOfUser;\n                nonce = _yield$this$getOrSetN.nonce;\n                pubNonce = _yield$this$getOrSetN.pubNonce;\n                upgraded = _yield$this$getOrSetN.upgraded;\n                nonce = new BN(nonce || '0', 16);\n                _context.next = 48;\n                break;\n              case 45:\n                _context.prev = 45;\n                _context.t2 = _context[\"catch\"](33);\n                throw new GetOrSetNonceError();\n              case 48:\n                if (!(typeOfUser === 'v1')) {\n                  _context.next = 52;\n                  break;\n                }\n                modifiedPubKey = this.ec.keyFromPublic({\n                  x: X.toString(16),\n                  y: Y.toString(16)\n                }).getPublic().add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n                _context.next = 57;\n                break;\n              case 52:\n                if (!(typeOfUser === 'v2')) {\n                  _context.next = 56;\n                  break;\n                }\n                modifiedPubKey = this.ec.keyFromPublic({\n                  x: X.toString(16),\n                  y: Y.toString(16)\n                }).getPublic().add(this.ec.keyFromPublic({\n                  x: pubNonce.x,\n                  y: pubNonce.y\n                }).getPublic());\n                _context.next = 57;\n                break;\n              case 56:\n                throw new Error('getOrSetNonce should always return typeOfUser.');\n              case 57:\n                finalX = modifiedPubKey.getX().toString(16);\n                finalY = modifiedPubKey.getY().toString(16);\n                address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());\n                return _context.abrupt(\"return\", {\n                  typeOfUser: typeOfUser,\n                  nonce: nonce,\n                  pubNonce: pubNonce,\n                  upgraded: upgraded,\n                  X: finalX,\n                  Y: finalY,\n                  address: address\n                });\n              case 61:\n                throw new Error(\"node results do not match at final lookup \".concat(JSON.stringify(keyResult || {}), \", \").concat(JSON.stringify(errorResult || {})));\n              case 62:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[33, 45]]);\n      }));\n      function getUserTypeAndAddress(_x, _x2, _x3) {\n        return _getUserTypeAndAddress.apply(this, arguments);\n      }\n      return getUserTypeAndAddress;\n    }()\n  }, {\n    key: \"setCustomKey\",\n    value: function () {\n      var _setCustomKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref4) {\n        var privKeyHex, metadataNonce, torusKeyHex, customKeyHex, torusKey, privKey, customKey, newMetadataNonce, data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                privKeyHex = _ref4.privKeyHex, metadataNonce = _ref4.metadataNonce, torusKeyHex = _ref4.torusKeyHex, customKeyHex = _ref4.customKeyHex;\n                if (torusKeyHex) {\n                  torusKey = new BN(torusKeyHex, 16);\n                } else {\n                  privKey = new BN(privKeyHex, 16);\n                  torusKey = privKey.sub(metadataNonce).umod(this.ec.curve.n);\n                }\n                customKey = new BN(customKeyHex, 16);\n                newMetadataNonce = customKey.sub(torusKey).umod(this.ec.curve.n);\n                data = this.generateMetadataParams(newMetadataNonce.toString(16), torusKey.toString(16));\n                _context2.next = 7;\n                return this.setMetadata(data);\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function setCustomKey(_x4) {\n        return _setCustomKey.apply(this, arguments);\n      }\n      return setCustomKey;\n    }()\n  }, {\n    key: \"retrieveShares\",\n    value: function () {\n      var _retrieveShares = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(endpoints, indexes, verifier, verifierParams, idToken) {\n        var _this = this;\n        var extraParams,\n          promiseArr,\n          tmpKey,\n          pubKey,\n          pubKeyX,\n          pubKeyY,\n          tokenCommitment,\n          i,\n          p,\n          _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                extraParams = _args5.length > 5 && _args5[5] !== undefined ? _args5[5] : {};\n                promiseArr = [];\n                _context5.next = 4;\n                return get(this.allowHost, {\n                  headers: {\n                    verifier: verifier,\n                    verifier_id: verifierParams.verifier_id,\n                    network: this.network\n                  }\n                }, {\n                  useAPIKey: true\n                });\n              case 4:\n                /*\n                  CommitmentRequestParams struct {\n                    MessagePrefix      string `json:\"messageprefix\"`\n                    TokenCommitment    string `json:\"tokencommitment\"`\n                    TempPubX           string `json:\"temppubx\"`\n                    TempPubY           string `json:\"temppuby\"`\n                    VerifierIdentifier string `json:\"verifieridentifier\"`\n                  } \n                  */\n                // generate temporary private and public key that is used to secure receive shares\n                tmpKey = generatePrivate();\n                pubKey = getPublic(tmpKey).toString('hex');\n                pubKeyX = pubKey.slice(2, 66);\n                pubKeyY = pubKey.slice(66);\n                tokenCommitment = keccak256(idToken); // make commitment requests to endpoints\n\n                for (i = 0; i < endpoints.length; i += 1) {\n                  p = post(endpoints[i], generateJsonRPCObject('CommitmentRequest', {\n                    messageprefix: 'mug00',\n                    tokencommitment: tokenCommitment.slice(2),\n                    temppubx: pubKeyX,\n                    temppuby: pubKeyY,\n                    verifieridentifier: verifier\n                  })).catch(function (err) {\n                    return log.error('commitment', err);\n                  });\n                  promiseArr.push(p);\n                }\n                /*\n                  ShareRequestParams struct {\n                    Item []bijson.RawMessage `json:\"item\"`\n                  }\n                  ShareRequestItem struct {\n                    IDToken            string          `json:\"idtoken\"`\n                    NodeSignatures     []NodeSignature `json:\"nodesignatures\"`\n                    VerifierIdentifier string          `json:\"verifieridentifier\"`\n                  }\n                  NodeSignature struct {\n                    Signature   string\n                    Data        string\n                    NodePubKeyX string\n                    NodePubKeyY string\n                  }\n                  CommitmentRequestResult struct {\n                    Signature string `json:\"signature\"`\n                    Data      string `json:\"data\"`\n                    NodePubX  string `json:\"nodepubx\"`\n                    NodePubY  string `json:\"nodepuby\"`\n                  }\n                  */\n                // send share request once k + t number of commitment requests have completed\n\n                return _context5.abrupt(\"return\", Some(promiseArr, function (resultArr) {\n                  var completedRequests = resultArr.filter(function (x) {\n                    if (!x || _typeof(x) !== 'object') {\n                      return false;\n                    }\n                    if (x.error) {\n                      return false;\n                    }\n                    return true;\n                  });\n                  if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {\n                    return Promise.resolve(resultArr);\n                  }\n                  return Promise.reject(new Error(\"invalid \".concat(JSON.stringify(resultArr))));\n                }).then(function (responses) {\n                  var promiseArrRequest = [];\n                  var nodeSigs = [];\n                  for (var _i = 0; _i < responses.length; _i += 1) {\n                    if (responses[_i]) nodeSigs.push(responses[_i].result);\n                  }\n                  for (var _i2 = 0; _i2 < endpoints.length; _i2 += 1) {\n                    // eslint-disable-next-line promise/no-nesting\n                    var _p = post(endpoints[_i2], generateJsonRPCObject('ShareRequest', {\n                      encrypted: 'yes',\n                      item: [_objectSpread(_objectSpread({}, verifierParams), {}, {\n                        idtoken: idToken,\n                        nodesignatures: nodeSigs,\n                        verifieridentifier: verifier\n                      }, extraParams)]\n                    })).catch(function (err) {\n                      return log.error('share req', err);\n                    });\n                    promiseArrRequest.push(_p);\n                  }\n                  return Some(promiseArrRequest, /*#__PURE__*/function () {\n                    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(shareResponses, sharedState) {\n                      var completedRequests, thresholdPublicKey, sharePromises, nodeIndex, _i3, metadata, sharesResolved, decryptedShares, allCombis, privateKey, _loop, j, _ret;\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              /*\n                                  ShareRequestResult struct {\n                                    Keys []KeyAssignment\n                                  }\n                                          / KeyAssignmentPublic -\n                                  type KeyAssignmentPublic struct {\n                                    Index     big.Int\n                                    PublicKey common.Point\n                                    Threshold int\n                                    Verifiers map[string][]string // Verifier => VerifierID\n                                  }\n                                   // KeyAssignment -\n                                  type KeyAssignment struct {\n                                    KeyAssignmentPublic\n                                    Share big.Int // Or Si\n                                  }\n                                */\n                              // check if threshold number of nodes have returned the same user public key\n                              completedRequests = shareResponses.filter(function (x) {\n                                return x;\n                              });\n                              thresholdPublicKey = thresholdSame(shareResponses.map(function (x) {\n                                return x && x.result && x.result.keys[0].PublicKey;\n                              }), ~~(endpoints.length / 2) + 1); // optimistically run lagrange interpolation once threshold number of shares have been received\n                              // this is matched against the user public key to ensure that shares are consistent\n\n                              if (!(completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey)) {\n                                _context3.next = 25;\n                                break;\n                              }\n                              sharePromises = [];\n                              nodeIndex = [];\n                              for (_i3 = 0; _i3 < shareResponses.length; _i3 += 1) {\n                                if (shareResponses[_i3] && shareResponses[_i3].result && shareResponses[_i3].result.keys && shareResponses[_i3].result.keys.length > 0) {\n                                  shareResponses[_i3].result.keys.sort(function (a, b) {\n                                    return new BN(a.Index, 16).cmp(new BN(b.Index, 16));\n                                  });\n                                  if (shareResponses[_i3].result.keys[0].Metadata) {\n                                    metadata = {\n                                      ephemPublicKey: Buffer.from(shareResponses[_i3].result.keys[0].Metadata.ephemPublicKey, 'hex'),\n                                      iv: Buffer.from(shareResponses[_i3].result.keys[0].Metadata.iv, 'hex'),\n                                      mac: Buffer.from(shareResponses[_i3].result.keys[0].Metadata.mac, 'hex'),\n                                      mode: Buffer.from(shareResponses[_i3].result.keys[0].Metadata.mode, 'hex')\n                                    };\n                                    sharePromises.push(\n                                    // eslint-disable-next-line promise/no-nesting\n                                    decrypt(tmpKey, _objectSpread(_objectSpread({}, metadata), {}, {\n                                      ciphertext: Buffer.from(atob(shareResponses[_i3].result.keys[0].Share).padStart(64, '0'), 'hex')\n                                    })).catch(function (err) {\n                                      return log.debug('share decryption', err);\n                                    }));\n                                  } else {\n                                    sharePromises.push(Promise.resolve(Buffer.from(shareResponses[_i3].result.keys[0].Share.padStart(64, '0'), 'hex')));\n                                  }\n                                } else {\n                                  sharePromises.push(Promise.resolve(undefined));\n                                }\n                                nodeIndex.push(new BN(indexes[_i3], 16));\n                              }\n                              _context3.next = 8;\n                              return Promise.all(sharePromises);\n                            case 8:\n                              sharesResolved = _context3.sent;\n                              if (!sharedState.resolved) {\n                                _context3.next = 11;\n                                break;\n                              }\n                              return _context3.abrupt(\"return\", undefined);\n                            case 11:\n                              decryptedShares = sharesResolved.reduce(function (acc, curr, index) {\n                                if (curr) acc.push({\n                                  index: nodeIndex[index],\n                                  value: new BN(curr)\n                                });\n                                return acc;\n                              }, []); // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n\n                              // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n                              allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1);\n                              _loop = function _loop(j) {\n                                var currentCombi = allCombis[j];\n                                var currentCombiShares = decryptedShares.filter(function (v, index) {\n                                  return currentCombi.includes(index);\n                                });\n                                var shares = currentCombiShares.map(function (x) {\n                                  return x.value;\n                                });\n                                var indices = currentCombiShares.map(function (x) {\n                                  return x.index;\n                                });\n                                var derivedPrivateKey = _this.lagrangeInterpolation(shares, indices);\n                                var decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), 'hex')).toString('hex');\n                                var decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n                                var decryptedPubKeyY = decryptedPubKey.slice(66);\n                                if (new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 && new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0) {\n                                  privateKey = derivedPrivateKey;\n                                  return \"break\";\n                                }\n                              };\n                              j = 0;\n                            case 15:\n                              if (!(j < allCombis.length)) {\n                                _context3.next = 22;\n                                break;\n                              }\n                              _ret = _loop(j);\n                              if (!(_ret === \"break\")) {\n                                _context3.next = 19;\n                                break;\n                              }\n                              return _context3.abrupt(\"break\", 22);\n                            case 19:\n                              j += 1;\n                              _context3.next = 15;\n                              break;\n                            case 22:\n                              if (!(privateKey === undefined)) {\n                                _context3.next = 24;\n                                break;\n                              }\n                              throw new Error('could not derive private key');\n                            case 24:\n                              return _context3.abrupt(\"return\", privateKey);\n                            case 25:\n                              throw new Error('invalid');\n                            case 26:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3);\n                    }));\n                    return function (_x10, _x11) {\n                      return _ref5.apply(this, arguments);\n                    };\n                  }());\n                }).then( /*#__PURE__*/function () {\n                  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(returnedKey) {\n                    var privateKey, decryptedPubKey, decryptedPubKeyX, decryptedPubKeyY, metadataNonce, _yield$_this$getNonce, nonce, ethAddress;\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            privateKey = returnedKey;\n                            decryptedPubKey = getPublic(Buffer.from(privateKey.toString(16, 64), 'hex')).toString('hex');\n                            decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n                            decryptedPubKeyY = decryptedPubKey.slice(66);\n                            if (!_this.enableOneKey) {\n                              _context4.next = 12;\n                              break;\n                            }\n                            _context4.next = 7;\n                            return _this.getNonce(decryptedPubKeyX, decryptedPubKeyY, privateKey);\n                          case 7:\n                            _yield$_this$getNonce = _context4.sent;\n                            nonce = _yield$_this$getNonce.nonce;\n                            metadataNonce = new BN(nonce || '0', 16);\n                            _context4.next = 15;\n                            break;\n                          case 12:\n                            _context4.next = 14;\n                            return _this.getMetadata({\n                              pub_key_X: decryptedPubKeyX,\n                              pub_key_Y: decryptedPubKeyY\n                            });\n                          case 14:\n                            metadataNonce = _context4.sent;\n                          case 15:\n                            log.debug('> torus.js/retrieveShares', {\n                              privKey: privateKey.toString(16),\n                              metadataNonce: metadataNonce.toString(16)\n                            });\n                            privateKey = privateKey.add(metadataNonce).umod(_this.ec.curve.n);\n                            ethAddress = _this.generateAddressFromPrivKey(privateKey);\n                            log.debug('> torus.js/retrieveShares', {\n                              ethAddress: ethAddress,\n                              privKey: privateKey.toString(16)\n                            }); // return reconstructed private key and ethereum address\n\n                            return _context4.abrupt(\"return\", {\n                              ethAddress: ethAddress,\n                              privKey: privateKey.toString('hex', 64),\n                              metadataNonce: metadataNonce\n                            });\n                          case 20:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4);\n                  }));\n                  return function (_x12) {\n                    return _ref6.apply(this, arguments);\n                  };\n                }()));\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function retrieveShares(_x5, _x6, _x7, _x8, _x9) {\n        return _retrieveShares.apply(this, arguments);\n      }\n      return retrieveShares;\n    }()\n  }, {\n    key: \"getMetadata\",\n    value: function () {\n      var _getMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(data, options) {\n        var metadataResponse;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return post(\"\".concat(this.metadataHost, \"/get\"), data, options, {\n                  useAPIKey: true\n                });\n              case 3:\n                metadataResponse = _context6.sent;\n                if (!(!metadataResponse || !metadataResponse.message)) {\n                  _context6.next = 6;\n                  break;\n                }\n                return _context6.abrupt(\"return\", new BN(0));\n              case 6:\n                return _context6.abrupt(\"return\", new BN(metadataResponse.message, 16));\n              case 9:\n                _context6.prev = 9;\n                _context6.t0 = _context6[\"catch\"](0);\n                log.error('get metadata error', _context6.t0);\n                return _context6.abrupt(\"return\", new BN(0));\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 9]]);\n      }));\n      function getMetadata(_x13, _x14) {\n        return _getMetadata.apply(this, arguments);\n      }\n      return getMetadata;\n    }()\n  }, {\n    key: \"generateMetadataParams\",\n    value: function generateMetadataParams(message, privateKey) {\n      var key = this.ec.keyFromPrivate(privateKey.toString('hex', 64));\n      var setData = {\n        data: message,\n        timestamp: new BN(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16)\n      };\n      var sig = key.sign(keccak256(JsonStringify(setData)).slice(2));\n      return {\n        pub_key_X: key.getPublic().getX().toString('hex'),\n        pub_key_Y: key.getPublic().getY().toString('hex'),\n        set_data: setData,\n        signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(sig.v).toString(16, 2), 'hex').toString('base64')\n      };\n    }\n  }, {\n    key: \"setMetadata\",\n    value: function () {\n      var _setMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(data, options) {\n        var metadataResponse;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n                _context7.next = 3;\n                return post(\"\".concat(this.metadataHost, \"/set\"), data, options, {\n                  useAPIKey: true\n                });\n              case 3:\n                metadataResponse = _context7.sent;\n                return _context7.abrupt(\"return\", metadataResponse.message);\n              case 7:\n                _context7.prev = 7;\n                _context7.t0 = _context7[\"catch\"](0);\n                log.error('set metadata error', _context7.t0);\n                return _context7.abrupt(\"return\", '');\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 7]]);\n      }));\n      function setMetadata(_x15, _x16) {\n        return _setMetadata.apply(this, arguments);\n      }\n      return setMetadata;\n    }()\n  }, {\n    key: \"lagrangeInterpolation\",\n    value: function lagrangeInterpolation(shares, nodeIndex) {\n      if (shares.length !== nodeIndex.length) {\n        return null;\n      }\n      var secret = new BN(0);\n      for (var i = 0; i < shares.length; i += 1) {\n        var upper = new BN(1);\n        var lower = new BN(1);\n        for (var j = 0; j < shares.length; j += 1) {\n          if (i !== j) {\n            upper = upper.mul(nodeIndex[j].neg());\n            upper = upper.umod(this.ec.curve.n);\n            var temp = nodeIndex[i].sub(nodeIndex[j]);\n            temp = temp.umod(this.ec.curve.n);\n            lower = lower.mul(temp).umod(this.ec.curve.n);\n          }\n        }\n        var delta = upper.mul(lower.invm(this.ec.curve.n)).umod(this.ec.curve.n);\n        delta = delta.mul(shares[i]).umod(this.ec.curve.n);\n        secret = secret.add(delta);\n      }\n      return secret.umod(this.ec.curve.n);\n    }\n  }, {\n    key: \"generateAddressFromPrivKey\",\n    value: function generateAddressFromPrivKey(privateKey) {\n      var key = this.ec.keyFromPrivate(privateKey.toString('hex', 64), 'hex');\n      var publicKey = key.getPublic().encode('hex').slice(2);\n      var ethAddressLower = \"0x\".concat(keccak256(Buffer.from(publicKey, 'hex')).slice(64 - 38));\n      return toChecksumAddress(ethAddressLower);\n    }\n  }, {\n    key: \"generateAddressFromPubKey\",\n    value: function generateAddressFromPubKey(publicKeyX, publicKeyY) {\n      var key = this.ec.keyFromPublic({\n        x: publicKeyX.toString('hex', 64),\n        y: publicKeyY.toString('hex', 64)\n      });\n      var publicKey = key.getPublic().encode('hex').slice(2);\n      var ethAddressLower = \"0x\".concat(keccak256(Buffer.from(publicKey, 'hex')).slice(64 - 38));\n      return toChecksumAddress(ethAddressLower);\n    }\n    /**\n     * Note: use this function only with custom auth, don't use to lookup openlogin accounts.\n     */\n  }, {\n    key: \"getPublicAddress\",\n    value: function () {\n      var _getPublicAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(endpoints, torusNodePubs, _ref7) {\n        var verifier,\n          verifierId,\n          isExtended,\n          finalKeyResult,\n          isNewKey,\n          _ref8,\n          keyResult,\n          errorResult,\n          assignResult,\n          _nonce,\n          _finalKeyResult$keys$2,\n          X,\n          Y,\n          typeOfUser,\n          nonce,\n          pubNonce,\n          modifiedPubKey,\n          upgraded,\n          _yield$this$getOrSetN2,\n          address,\n          _args8 = arguments;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                verifier = _ref7.verifier, verifierId = _ref7.verifierId;\n                isExtended = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : false;\n                log.debug('> torus.js/getPublicAddress', {\n                  endpoints: endpoints,\n                  torusNodePubs: torusNodePubs,\n                  verifier: verifier,\n                  verifierId: verifierId,\n                  isExtended: isExtended\n                });\n                isNewKey = false;\n                _context8.next = 6;\n                return keyLookup(endpoints, verifier, verifierId);\n              case 6:\n                _context8.t0 = _context8.sent;\n                if (_context8.t0) {\n                  _context8.next = 9;\n                  break;\n                }\n                _context8.t0 = {};\n              case 9:\n                _ref8 = _context8.t0;\n                keyResult = _ref8.keyResult;\n                errorResult = _ref8.errorResult;\n                if (!(errorResult && JSON.stringify(errorResult).includes('Verifier not supported'))) {\n                  _context8.next = 16;\n                  break;\n                }\n                throw new Error(\"Verifier not supported. Check if you: \\n\\n      1. Are on the right network (Torus testnet/mainnet) \\n\\n      2. Have setup a verifier on dashboard.web3auth.io?\");\n              case 16:\n                if (!(errorResult && JSON.stringify(errorResult).includes('Verifier + VerifierID has not yet been assigned'))) {\n                  _context8.next = 29;\n                  break;\n                }\n                _context8.next = 19;\n                return keyAssign({\n                  endpoints: endpoints,\n                  torusNodePubs: torusNodePubs,\n                  lastPoint: undefined,\n                  firstPoint: undefined,\n                  verifier: verifier,\n                  verifierId: verifierId,\n                  signerHost: this.signerHost,\n                  network: this.network\n                });\n              case 19:\n                _context8.next = 21;\n                return waitKeyLookup(endpoints, verifier, verifierId, 1000);\n              case 21:\n                _context8.t1 = _context8.sent;\n                if (_context8.t1) {\n                  _context8.next = 24;\n                  break;\n                }\n                _context8.t1 = {};\n              case 24:\n                assignResult = _context8.t1;\n                finalKeyResult = assignResult.keyResult;\n                isNewKey = true;\n                _context8.next = 34;\n                break;\n              case 29:\n                if (!keyResult) {\n                  _context8.next = 33;\n                  break;\n                }\n                finalKeyResult = keyResult;\n                _context8.next = 34;\n                break;\n              case 33:\n                throw new Error(\"node results do not match at first lookup \".concat(JSON.stringify(keyResult || {}), \", \").concat(JSON.stringify(errorResult || {})));\n              case 34:\n                log.debug('> torus.js/getPublicAddress', {\n                  finalKeyResult: finalKeyResult,\n                  isNewKey: isNewKey\n                });\n                if (!finalKeyResult) {\n                  _context8.next = 76;\n                  break;\n                }\n                _finalKeyResult$keys$2 = finalKeyResult.keys[0], X = _finalKeyResult$keys$2.pub_key_X, Y = _finalKeyResult$keys$2.pub_key_Y;\n                if (!this.enableOneKey) {\n                  _context8.next = 64;\n                  break;\n                }\n                _context8.prev = 38;\n                _context8.next = 42;\n                return this.getOrSetNonce(X, Y, undefined, !isNewKey);\n              case 42:\n                _yield$this$getOrSetN2 = _context8.sent;\n                typeOfUser = _yield$this$getOrSetN2.typeOfUser;\n                nonce = _yield$this$getOrSetN2.nonce;\n                pubNonce = _yield$this$getOrSetN2.pubNonce;\n                upgraded = _yield$this$getOrSetN2.upgraded;\n                nonce = new BN(nonce || '0', 16);\n                _context8.next = 53;\n                break;\n              case 50:\n                _context8.prev = 50;\n                _context8.t2 = _context8[\"catch\"](38);\n                throw new GetOrSetNonceError();\n              case 53:\n                if (!(typeOfUser === 'v1')) {\n                  _context8.next = 57;\n                  break;\n                }\n                modifiedPubKey = this.ec.keyFromPublic({\n                  x: X.toString(16),\n                  y: Y.toString(16)\n                }).getPublic().add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n                _context8.next = 62;\n                break;\n              case 57:\n                if (!(typeOfUser === 'v2')) {\n                  _context8.next = 61;\n                  break;\n                }\n                if (upgraded) {\n                  // OneKey is upgraded to 2/n, returned address is address of Torus key (postbox key), not tKey\n                  modifiedPubKey = this.ec.keyFromPublic({\n                    x: X.toString(16),\n                    y: Y.toString(16)\n                  }).getPublic();\n                } else {\n                  modifiedPubKey = this.ec.keyFromPublic({\n                    x: X.toString(16),\n                    y: Y.toString(16)\n                  }).getPublic().add(this.ec.keyFromPublic({\n                    x: pubNonce.x,\n                    y: pubNonce.y\n                  }).getPublic());\n                }\n                _context8.next = 62;\n                break;\n              case 61:\n                throw new Error('getOrSetNonce should always return typeOfUser.');\n              case 62:\n                _context8.next = 69;\n                break;\n              case 64:\n                typeOfUser = 'v1';\n                _context8.next = 67;\n                return this.getMetadata({\n                  pub_key_X: X,\n                  pub_key_Y: Y\n                });\n              case 67:\n                nonce = _context8.sent;\n                modifiedPubKey = this.ec.keyFromPublic({\n                  x: X.toString(16),\n                  y: Y.toString(16)\n                }).getPublic().add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n              case 69:\n                X = modifiedPubKey.getX().toString(16);\n                Y = modifiedPubKey.getY().toString(16);\n                address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());\n                log.debug('> torus.js/getPublicAddress', {\n                  X: X,\n                  Y: Y,\n                  address: address,\n                  typeOfUser: typeOfUser,\n                  nonce: (_nonce = nonce) === null || _nonce === void 0 ? void 0 : _nonce.toString(16),\n                  pubNonce: pubNonce\n                });\n                if (isExtended) {\n                  _context8.next = 75;\n                  break;\n                }\n                return _context8.abrupt(\"return\", address);\n              case 75:\n                return _context8.abrupt(\"return\", {\n                  typeOfUser: typeOfUser,\n                  address: address,\n                  X: X,\n                  Y: Y,\n                  metadataNonce: nonce,\n                  pubNonce: pubNonce\n                });\n              case 76:\n                throw new Error(\"node results do not match at final lookup \".concat(JSON.stringify(keyResult || {}), \", \").concat(JSON.stringify(errorResult || {})));\n              case 77:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[38, 50]]);\n      }));\n      function getPublicAddress(_x17, _x18, _x19) {\n        return _getPublicAddress.apply(this, arguments);\n      }\n      return getPublicAddress;\n    }()\n    /**\n     * Internal functions for OneKey (OpenLogin v2), only call these functions if you know what you're doing\n     */\n  }, {\n    key: \"getOrSetNonce\",\n    value: function () {\n      var _getOrSetNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(X, Y, privKey) {\n        var getOnly,\n          data,\n          msg,\n          _args9 = arguments;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                getOnly = _args9.length > 3 && _args9[3] !== undefined ? _args9[3] : false;\n                msg = getOnly ? 'getNonce' : 'getOrSetNonce';\n                if (privKey) {\n                  data = this.generateMetadataParams(msg, privKey);\n                } else {\n                  data = {\n                    pub_key_X: X,\n                    pub_key_Y: Y,\n                    set_data: {\n                      data: msg\n                    }\n                  };\n                }\n                return _context9.abrupt(\"return\", post(\"\".concat(this.metadataHost, \"/get_or_set_nonce\"), data, undefined, {\n                  useAPIKey: true\n                }));\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function getOrSetNonce(_x20, _x21, _x22) {\n        return _getOrSetNonce.apply(this, arguments);\n      }\n      return getOrSetNonce;\n    }()\n  }, {\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(X, Y, privKey) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this.getOrSetNonce(X, Y, privKey, true));\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function getNonce(_x23, _x24, _x25) {\n        return _getNonce.apply(this, arguments);\n      }\n      return getNonce;\n    }()\n  }, {\n    key: \"getPostboxKeyFrom1OutOf1\",\n    value: function getPostboxKeyFrom1OutOf1(privKey, nonce) {\n      var privKeyBN = new BN(privKey, 16);\n      var nonceBN = new BN(nonce, 16);\n      return privKeyBN.sub(nonceBN).umod(this.ec.curve.n).toString('hex');\n    }\n  }], [{\n    key: \"enableLogging\",\n    value: function enableLogging() {\n      var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (v) log.enableAll();else log.disableAll();\n    }\n  }, {\n    key: \"setAPIKey\",\n    value: function setAPIKey$1(apiKey) {\n      setAPIKey(apiKey);\n    }\n  }, {\n    key: \"setEmbedHost\",\n    value: function setEmbedHost$1(embedHost) {\n      setEmbedHost(embedHost);\n    }\n  }, {\n    key: \"isGetOrSetNonceError\",\n    value: function isGetOrSetNonceError(err) {\n      return err instanceof GetOrSetNonceError;\n    }\n  }]);\n  return Torus;\n}();\nexport { Torus as default, keyAssign, keyLookup, waitKeyLookup };","map":{"version":3,"sources":["../src/loglevel.js","../src/some.js","../src/utils.js","../src/torus.js"],"names":["log","loglevel","getLogger","disableAll","capitalizeFirstLetter","str","charAt","toUpperCase","slice","SomeError","Error","errors","responses","predicate","Some","promises","Promise","resolve","reject","finishedCount","sharedState","resolved","errorArr","Array","length","fill","undefined","resultArr","predicateError","forEach","x","index","then","resp","catch","error","finally","data","_","values","reduce","acc","z","id","startsWith","msg","map","it","join","message","GetOrSetNonceError","kCombinations","s","k","set","from","i","cur","combs","tailCombs","j","push","thresholdSame","arr","t","hashMap","JsonStringify","keyLookup","endpoints","verifier","verifierId","lookupPromises","generateJsonRPCObject","verifier_id","toString","err","lookupResults","lookupShares","filter","x1","errorResult","x2","keyResult","x3","result","JSON","stringify","waitKeyLookup","timeout","setTimeout","keyAssign","torusNodePubs","lastPoint","firstPoint","signerHost","network","nodeNum","Math","floor","random","initialPoint","signedData","post","headers","pubKeyX","X","pubKeyY","Y","useAPIKey","acceptedErrorMsgs","includes","Torus","enableOneKey","metadataHost","allowHost","serverTimeOffset","ec","EC","v","enableAll","apiKey","setAPIKey","embedHost","setEmbedHost","doesKeyAssign","isNewKey","assignResult","finalKeyResult","pub_key_X","pub_key_Y","keys","typeOfUser","nonce","pubNonce","upgraded","getOrSetNonce","BN","modifiedPubKey","keyFromPublic","y","getPublic","add","keyFromPrivate","finalX","getX","finalY","getY","address","generateAddressFromPubKey","privKeyHex","metadataNonce","torusKeyHex","customKeyHex","torusKey","privKey","sub","umod","curve","n","customKey","newMetadataNonce","generateMetadataParams","setMetadata","indexes","verifierParams","idToken","extraParams","promiseArr","get","tmpKey","generatePrivate","pubKey","tokenCommitment","keccak256","p","messageprefix","tokencommitment","temppubx","temppuby","verifieridentifier","completedRequests","promiseArrRequest","nodeSigs","encrypted","item","idtoken","nodesignatures","shareResponses","thresholdPublicKey","PublicKey","sharePromises","nodeIndex","sort","a","b","Index","cmp","Metadata","metadata","ephemPublicKey","Buffer","iv","mac","mode","decrypt","ciphertext","atob","Share","padStart","debug","sharesResolved","all","decryptedShares","curr","value","allCombis","currentCombi","currentCombiShares","shares","indices","derivedPrivateKey","lagrangeInterpolation","decryptedPubKey","decryptedPubKeyX","decryptedPubKeyY","privateKey","returnedKey","getNonce","getMetadata","ethAddress","generateAddressFromPrivKey","options","metadataResponse","key","setData","timestamp","Date","now","sig","sign","set_data","signature","r","secret","upper","lower","mul","neg","temp","delta","invm","publicKey","encode","ethAddressLower","toChecksumAddress","publicKeyX","publicKeyY","isExtended","getOnly","privKeyBN","nonceBN"],"mappings":"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","sourcesContent":["import loglevel from 'loglevel'\n\nconst log = loglevel.getLogger('torus.js')\nlog.disableAll()\n\nexport default log\n","function capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\n\nexport class SomeError extends Error {\n  constructor({ errors, responses, predicate }) {\n    super('Unable to resolve enough promises.')\n    this.errors = errors\n    this.responses = responses\n    this.predicate = predicate\n  }\n}\n\nexport const Some = (promises, predicate) =>\n  new Promise((resolve, reject) => {\n    let finishedCount = 0\n    const sharedState = { resolved: false }\n    const errorArr = new Array(promises.length).fill(undefined)\n    const resultArr = new Array(promises.length).fill(undefined)\n    let predicateError\n    promises.forEach((x, index) => {\n      x.then((resp) => {\n        resultArr[index] = resp\n        return undefined\n      })\n        .catch((error) => {\n          errorArr[index] = error\n        })\n        .finally(() => {\n          if (sharedState.resolved) return\n          predicate(resultArr.slice(0), sharedState)\n            .then((data) => {\n              sharedState.resolved = true\n              resolve(data)\n              return undefined\n            })\n            .catch((error) => {\n              // log only the last predicate error\n              predicateError = error\n            })\n            .finally((_) => {\n              finishedCount += 1\n              if (finishedCount === promises.length) {\n                const errors = Object.values(\n                  resultArr.reduce((acc, z) => {\n                    const { id, error } = z || {}\n                    if (error?.data?.length > 0) {\n                      if (error.data.startsWith('Error occurred while verifying params')) acc[id] = capitalizeFirstLetter(error.data)\n                      else acc[id] = error.data\n                    }\n                    return acc\n                  }, {})\n                )\n\n                if (errors.length > 0) {\n                  // Format-able errors\n                  const msg = errors.length > 1 ? `\\n${errors.map((it) => `• ${it}`).join('\\n')}` : errors[0]\n                  reject(new Error(msg))\n                } else {\n                  reject(\n                    new SomeError({\n                      errors: errorArr,\n                      responses: resultArr,\n                      predicate: predicateError?.message || predicateError,\n                    })\n                  )\n                }\n              }\n            })\n        })\n    })\n  })\n","import { generateJsonRPCObject, post } from '@toruslabs/http-helpers'\nimport JsonStringify from 'json-stable-stringify'\n\nimport log from './loglevel'\nimport { Some } from './some'\n\nexport class GetOrSetNonceError extends Error {}\n\nexport const kCombinations = (s, k) => {\n  let set = s\n  if (typeof set === 'number') {\n    set = Array.from({ length: set }, (_, i) => i)\n  }\n  if (k > set.length || k <= 0) {\n    return []\n  }\n\n  if (k === set.length) {\n    return [set]\n  }\n\n  if (k === 1) {\n    return set.reduce((acc, cur) => [...acc, [cur]], [])\n  }\n\n  const combs = []\n  let tailCombs = []\n\n  for (let i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1)\n    for (let j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i], ...tailCombs[j]])\n    }\n  }\n\n  return combs\n}\n\nexport const thresholdSame = (arr, t) => {\n  const hashMap = {}\n  for (let i = 0; i < arr.length; i += 1) {\n    const str = JsonStringify(arr[i])\n    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1\n    if (hashMap[str] === t) {\n      return arr[i]\n    }\n  }\n  return undefined\n}\n\nexport const keyLookup = async (endpoints, verifier, verifierId) => {\n  const lookupPromises = endpoints.map((x) =>\n    post(\n      x,\n      generateJsonRPCObject('VerifierLookupRequest', {\n        verifier,\n        verifier_id: verifierId.toString(),\n      })\n    ).catch((err) => log.error('lookup request failed', err))\n  )\n  return Some(lookupPromises, (lookupResults) => {\n    const lookupShares = lookupResults.filter((x1) => x1)\n    const errorResult = thresholdSame(\n      lookupShares.map((x2) => x2 && x2.error),\n      ~~(endpoints.length / 2) + 1\n    )\n    const keyResult = thresholdSame(\n      lookupShares.map((x3) => x3 && x3.result),\n      ~~(endpoints.length / 2) + 1\n    )\n    if (keyResult || errorResult) {\n      return Promise.resolve({ keyResult, errorResult })\n    }\n    return Promise.reject(new Error(`invalid results ${JSON.stringify(lookupResults)}`))\n  })\n}\n\nexport const waitKeyLookup = (endpoints, verifier, verifierId, timeout) =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      keyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject)\n    }, timeout)\n  })\n\nexport const keyAssign = async ({ endpoints, torusNodePubs, lastPoint, firstPoint, verifier, verifierId, signerHost, network }) => {\n  let nodeNum\n  let initialPoint\n  if (lastPoint === undefined) {\n    nodeNum = Math.floor(Math.random() * endpoints.length)\n    initialPoint = nodeNum\n  } else {\n    nodeNum = lastPoint % endpoints.length\n  }\n  if (nodeNum === firstPoint) throw new Error('Looped through all')\n  if (firstPoint !== undefined) initialPoint = firstPoint\n\n  const data = generateJsonRPCObject('KeyAssign', {\n    verifier,\n    verifier_id: verifierId.toString(),\n  })\n  try {\n    const signedData = await post(\n      signerHost,\n      data,\n      {\n        headers: {\n          pubKeyX: torusNodePubs[nodeNum].X,\n          pubKeyY: torusNodePubs[nodeNum].Y,\n          network,\n        },\n      },\n      { useAPIKey: true }\n    )\n    return post(\n      endpoints[nodeNum],\n      { ...data, ...signedData },\n      {\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n        },\n      }\n    )\n  } catch (error) {\n    log.error(error)\n    const acceptedErrorMsgs = [\n      // Slow node\n      'Timed out',\n      // Happens when the node is not reachable (dns issue etc)\n      'TypeError: Failed to fetch', // All except iOS and Firefox\n      'TypeError: cancelled', // iOS\n      'TypeError: NetworkError when attempting to fetch resource.', // Firefox\n    ]\n    if (acceptedErrorMsgs.includes(error.message))\n      return keyAssign({ endpoints, torusNodePubs, lastPoint: nodeNum + 1, firstPoint: initialPoint, verifier, verifierId, signerHost, network })\n    throw new Error(\n      `Sorry, the Torus Network that powers Web3Auth is currently very busy.\n    We will generate your key in time. Pls try again later. \\n\n    ${error.message || ''}`\n    )\n  }\n}\n","import { decrypt, generatePrivate, getPublic } from '@toruslabs/eccrypto'\nimport { generateJsonRPCObject, get, post, setAPIKey, setEmbedHost } from '@toruslabs/http-helpers'\nimport BN from 'bn.js'\nimport { ec as EC } from 'elliptic'\nimport stringify from 'json-stable-stringify'\nimport { keccak256, toChecksumAddress } from 'web3-utils'\n\nimport log from './loglevel'\nimport { Some } from './some'\nimport { GetOrSetNonceError, kCombinations, keyAssign, keyLookup, thresholdSame, waitKeyLookup } from './utils'\n\n// Implement threshold logic wrappers around public APIs\n// of Torus nodes to handle malicious node responses\nclass Torus {\n  constructor({\n    enableOneKey = false,\n    metadataHost = 'https://metadata.tor.us',\n    allowHost = 'https://signer.tor.us/api/allow',\n    signerHost = 'https://signer.tor.us/api/sign',\n    serverTimeOffset = 0,\n    network = 'mainnet',\n  } = {}) {\n    this.ec = new EC('secp256k1')\n    this.metadataHost = metadataHost\n    this.allowHost = allowHost\n    this.enableOneKey = enableOneKey\n    this.serverTimeOffset = serverTimeOffset || 0 // ms\n    this.signerHost = signerHost\n    this.network = network\n  }\n\n  static enableLogging(v = true) {\n    if (v) log.enableAll()\n    else log.disableAll()\n  }\n\n  static setAPIKey(apiKey) {\n    setAPIKey(apiKey)\n  }\n\n  static setEmbedHost(embedHost) {\n    setEmbedHost(embedHost)\n  }\n\n  /**\n   * Note: use this function only for openlogin tkey account lookups.\n   */\n  async getUserTypeAndAddress(endpoints, torusNodePubs, { verifier, verifierId }, doesKeyAssign = false) {\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {}\n    let isNewKey = false\n    let finalKeyResult\n    if (errorResult && JSON.stringify(errorResult).includes('Verifier + VerifierID has not yet been assigned')) {\n      if (!doesKeyAssign) {\n        throw new Error('Verifier + VerifierID has not yet been assigned')\n      }\n      await keyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n      })\n      const assignResult = (await waitKeyLookup(endpoints, verifier, verifierId, 1000)) || {}\n      finalKeyResult = assignResult.keyResult\n      isNewKey = true\n    } else if (keyResult) {\n      finalKeyResult = keyResult\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`)\n    }\n    if (finalKeyResult) {\n      const { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0]\n      let typeOfUser\n      let nonce\n      let pubNonce\n      let modifiedPubKey\n      let upgraded\n\n      try {\n        ;({ typeOfUser, nonce, pubNonce, upgraded } = await this.getOrSetNonce(X, Y, undefined, !isNewKey))\n        nonce = new BN(nonce || '0', 16)\n      } catch {\n        throw new GetOrSetNonceError()\n      }\n      if (typeOfUser === 'v1') {\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic())\n      } else if (typeOfUser === 'v2') {\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n          .getPublic()\n          .add(this.ec.keyFromPublic({ x: pubNonce.x, y: pubNonce.y }).getPublic())\n      } else {\n        throw new Error('getOrSetNonce should always return typeOfUser.')\n      }\n      const finalX = modifiedPubKey.getX().toString(16)\n      const finalY = modifiedPubKey.getY().toString(16)\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY())\n      return { typeOfUser, nonce, pubNonce, upgraded, X: finalX, Y: finalY, address }\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`)\n  }\n\n  async setCustomKey({ privKeyHex, metadataNonce, torusKeyHex, customKeyHex }) {\n    let torusKey\n    if (torusKeyHex) {\n      torusKey = new BN(torusKeyHex, 16)\n    } else {\n      const privKey = new BN(privKeyHex, 16)\n      torusKey = privKey.sub(metadataNonce).umod(this.ec.curve.n)\n    }\n    const customKey = new BN(customKeyHex, 16)\n    const newMetadataNonce = customKey.sub(torusKey).umod(this.ec.curve.n)\n    const data = this.generateMetadataParams(newMetadataNonce.toString(16), torusKey.toString(16))\n    await this.setMetadata(data)\n  }\n\n  async retrieveShares(endpoints, indexes, verifier, verifierParams, idToken, extraParams = {}) {\n    const promiseArr = []\n    await get(\n      this.allowHost,\n      {\n        headers: {\n          verifier,\n          verifier_id: verifierParams.verifier_id,\n          network: this.network,\n        },\n      },\n      { useAPIKey: true }\n    )\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      } \n      */\n\n    // generate temporary private and public key that is used to secure receive shares\n    const tmpKey = generatePrivate()\n    const pubKey = getPublic(tmpKey).toString('hex')\n    const pubKeyX = pubKey.slice(2, 66)\n    const pubKeyY = pubKey.slice(66)\n    const tokenCommitment = keccak256(idToken)\n\n    // make commitment requests to endpoints\n    for (let i = 0; i < endpoints.length; i += 1) {\n      const p = post(\n        endpoints[i],\n        generateJsonRPCObject('CommitmentRequest', {\n          messageprefix: 'mug00',\n          tokencommitment: tokenCommitment.slice(2),\n          temppubx: pubKeyX,\n          temppuby: pubKeyY,\n          verifieridentifier: verifier,\n        })\n      ).catch((err) => log.error('commitment', err))\n      promiseArr.push(p)\n    }\n    /*\n      ShareRequestParams struct {\n        Item []bijson.RawMessage `json:\"item\"`\n      }\n      ShareRequestItem struct {\n        IDToken            string          `json:\"idtoken\"`\n        NodeSignatures     []NodeSignature `json:\"nodesignatures\"`\n        VerifierIdentifier string          `json:\"verifieridentifier\"`\n      }\n      NodeSignature struct {\n        Signature   string\n        Data        string\n        NodePubKeyX string\n        NodePubKeyY string\n      }\n      CommitmentRequestResult struct {\n        Signature string `json:\"signature\"`\n        Data      string `json:\"data\"`\n        NodePubX  string `json:\"nodepubx\"`\n        NodePubY  string `json:\"nodepuby\"`\n      }\n      */\n    // send share request once k + t number of commitment requests have completed\n    return Some(promiseArr, (resultArr) => {\n      const completedRequests = resultArr.filter((x) => {\n        if (!x || typeof x !== 'object') {\n          return false\n        }\n        if (x.error) {\n          return false\n        }\n        return true\n      })\n      if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {\n        return Promise.resolve(resultArr)\n      }\n      return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`))\n    })\n      .then((responses) => {\n        const promiseArrRequest = []\n        const nodeSigs = []\n        for (let i = 0; i < responses.length; i += 1) {\n          if (responses[i]) nodeSigs.push(responses[i].result)\n        }\n        for (let i = 0; i < endpoints.length; i += 1) {\n          // eslint-disable-next-line promise/no-nesting\n          const p = post(\n            endpoints[i],\n            generateJsonRPCObject('ShareRequest', {\n              encrypted: 'yes',\n              item: [{ ...verifierParams, idtoken: idToken, nodesignatures: nodeSigs, verifieridentifier: verifier, ...extraParams }],\n            })\n          ).catch((err) => log.error('share req', err))\n          promiseArrRequest.push(p)\n        }\n        return Some(promiseArrRequest, async (shareResponses, sharedState) => {\n          /*\n              ShareRequestResult struct {\n                Keys []KeyAssignment\n              }\n                      / KeyAssignmentPublic -\n              type KeyAssignmentPublic struct {\n                Index     big.Int\n                PublicKey common.Point\n                Threshold int\n                Verifiers map[string][]string // Verifier => VerifierID\n              }\n\n              // KeyAssignment -\n              type KeyAssignment struct {\n                KeyAssignmentPublic\n                Share big.Int // Or Si\n              }\n            */\n          // check if threshold number of nodes have returned the same user public key\n          const completedRequests = shareResponses.filter((x) => x)\n          const thresholdPublicKey = thresholdSame(\n            shareResponses.map((x) => x && x.result && x.result.keys[0].PublicKey),\n            ~~(endpoints.length / 2) + 1\n          )\n          // optimistically run lagrange interpolation once threshold number of shares have been received\n          // this is matched against the user public key to ensure that shares are consistent\n          if (completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey) {\n            const sharePromises = []\n            const nodeIndex = []\n            for (let i = 0; i < shareResponses.length; i += 1) {\n              if (shareResponses[i] && shareResponses[i].result && shareResponses[i].result.keys && shareResponses[i].result.keys.length > 0) {\n                shareResponses[i].result.keys.sort((a, b) => new BN(a.Index, 16).cmp(new BN(b.Index, 16)))\n                if (shareResponses[i].result.keys[0].Metadata) {\n                  const metadata = {\n                    ephemPublicKey: Buffer.from(shareResponses[i].result.keys[0].Metadata.ephemPublicKey, 'hex'),\n                    iv: Buffer.from(shareResponses[i].result.keys[0].Metadata.iv, 'hex'),\n                    mac: Buffer.from(shareResponses[i].result.keys[0].Metadata.mac, 'hex'),\n                    mode: Buffer.from(shareResponses[i].result.keys[0].Metadata.mode, 'hex'),\n                  }\n                  sharePromises.push(\n                    // eslint-disable-next-line promise/no-nesting\n                    decrypt(tmpKey, {\n                      ...metadata,\n                      ciphertext: Buffer.from(atob(shareResponses[i].result.keys[0].Share).padStart(64, '0'), 'hex'),\n                    }).catch((err) => log.debug('share decryption', err))\n                  )\n                } else {\n                  sharePromises.push(Promise.resolve(Buffer.from(shareResponses[i].result.keys[0].Share.padStart(64, '0'), 'hex')))\n                }\n              } else {\n                sharePromises.push(Promise.resolve(undefined))\n              }\n              nodeIndex.push(new BN(indexes[i], 16))\n            }\n            const sharesResolved = await Promise.all(sharePromises)\n            if (sharedState.resolved) return undefined\n\n            const decryptedShares = sharesResolved.reduce((acc, curr, index) => {\n              if (curr) acc.push({ index: nodeIndex[index], value: new BN(curr) })\n              return acc\n            }, [])\n            // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n            const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1)\n            let privateKey\n            for (let j = 0; j < allCombis.length; j += 1) {\n              const currentCombi = allCombis[j]\n              const currentCombiShares = decryptedShares.filter((v, index) => currentCombi.includes(index))\n              const shares = currentCombiShares.map((x) => x.value)\n              const indices = currentCombiShares.map((x) => x.index)\n              const derivedPrivateKey = this.lagrangeInterpolation(shares, indices)\n              const decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), 'hex')).toString('hex')\n              const decryptedPubKeyX = decryptedPubKey.slice(2, 66)\n              const decryptedPubKeyY = decryptedPubKey.slice(66)\n              if (\n                new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 &&\n                new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0\n              ) {\n                privateKey = derivedPrivateKey\n                break\n              }\n            }\n            if (privateKey === undefined) {\n              throw new Error('could not derive private key')\n            }\n            return privateKey\n          }\n          throw new Error('invalid')\n        })\n      })\n      .then(async (returnedKey) => {\n        let privateKey = returnedKey\n        const decryptedPubKey = getPublic(Buffer.from(privateKey.toString(16, 64), 'hex')).toString('hex')\n        const decryptedPubKeyX = decryptedPubKey.slice(2, 66)\n        const decryptedPubKeyY = decryptedPubKey.slice(66)\n        let metadataNonce\n        if (this.enableOneKey) {\n          const { nonce } = await this.getNonce(decryptedPubKeyX, decryptedPubKeyY, privateKey)\n          metadataNonce = new BN(nonce || '0', 16)\n        } else {\n          metadataNonce = await this.getMetadata({ pub_key_X: decryptedPubKeyX, pub_key_Y: decryptedPubKeyY })\n        }\n        log.debug('> torus.js/retrieveShares', { privKey: privateKey.toString(16), metadataNonce: metadataNonce.toString(16) })\n\n        privateKey = privateKey.add(metadataNonce).umod(this.ec.curve.n)\n\n        const ethAddress = this.generateAddressFromPrivKey(privateKey)\n        log.debug('> torus.js/retrieveShares', { ethAddress, privKey: privateKey.toString(16) })\n\n        // return reconstructed private key and ethereum address\n        return {\n          ethAddress,\n          privKey: privateKey.toString('hex', 64),\n          metadataNonce,\n        }\n      })\n  }\n\n  async getMetadata(data, options) {\n    try {\n      const metadataResponse = await post(`${this.metadataHost}/get`, data, options, { useAPIKey: true })\n      if (!metadataResponse || !metadataResponse.message) {\n        return new BN(0)\n      }\n      return new BN(metadataResponse.message, 16) // nonce\n    } catch (error) {\n      log.error('get metadata error', error)\n      return new BN(0)\n    }\n  }\n\n  generateMetadataParams(message, privateKey) {\n    const key = this.ec.keyFromPrivate(privateKey.toString('hex', 64))\n    const setData = {\n      data: message,\n      timestamp: new BN(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16),\n    }\n    const sig = key.sign(keccak256(stringify(setData)).slice(2))\n    return {\n      pub_key_X: key.getPublic().getX().toString('hex'),\n      pub_key_Y: key.getPublic().getY().toString('hex'),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(sig.v).toString(16, 2), 'hex').toString('base64'),\n    }\n  }\n\n  async setMetadata(data, options) {\n    try {\n      const metadataResponse = await post(`${this.metadataHost}/set`, data, options, { useAPIKey: true })\n      return metadataResponse.message // IPFS hash\n    } catch (error) {\n      log.error('set metadata error', error)\n      return ''\n    }\n  }\n\n  lagrangeInterpolation(shares, nodeIndex) {\n    if (shares.length !== nodeIndex.length) {\n      return null\n    }\n    let secret = new BN(0)\n    for (let i = 0; i < shares.length; i += 1) {\n      let upper = new BN(1)\n      let lower = new BN(1)\n      for (let j = 0; j < shares.length; j += 1) {\n        if (i !== j) {\n          upper = upper.mul(nodeIndex[j].neg())\n          upper = upper.umod(this.ec.curve.n)\n          let temp = nodeIndex[i].sub(nodeIndex[j])\n          temp = temp.umod(this.ec.curve.n)\n          lower = lower.mul(temp).umod(this.ec.curve.n)\n        }\n      }\n      let delta = upper.mul(lower.invm(this.ec.curve.n)).umod(this.ec.curve.n)\n      delta = delta.mul(shares[i]).umod(this.ec.curve.n)\n      secret = secret.add(delta)\n    }\n    return secret.umod(this.ec.curve.n)\n  }\n\n  generateAddressFromPrivKey(privateKey) {\n    const key = this.ec.keyFromPrivate(privateKey.toString('hex', 64), 'hex')\n    const publicKey = key.getPublic().encode('hex').slice(2)\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, 'hex')).slice(64 - 38)}`\n    return toChecksumAddress(ethAddressLower)\n  }\n\n  generateAddressFromPubKey(publicKeyX, publicKeyY) {\n    const key = this.ec.keyFromPublic({ x: publicKeyX.toString('hex', 64), y: publicKeyY.toString('hex', 64) })\n    const publicKey = key.getPublic().encode('hex').slice(2)\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, 'hex')).slice(64 - 38)}`\n    return toChecksumAddress(ethAddressLower)\n  }\n\n  /**\n   * Note: use this function only with custom auth, don't use to lookup openlogin accounts.\n   */\n  async getPublicAddress(endpoints, torusNodePubs, { verifier, verifierId }, isExtended = false) {\n    log.debug('> torus.js/getPublicAddress', { endpoints, torusNodePubs, verifier, verifierId, isExtended })\n\n    let finalKeyResult\n    let isNewKey = false\n\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {}\n    if (errorResult && JSON.stringify(errorResult).includes('Verifier not supported')) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`)\n    } else if (errorResult && JSON.stringify(errorResult).includes('Verifier + VerifierID has not yet been assigned')) {\n      await keyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n      })\n      const assignResult = (await waitKeyLookup(endpoints, verifier, verifierId, 1000)) || {}\n      finalKeyResult = assignResult.keyResult\n      isNewKey = true\n    } else if (keyResult) {\n      finalKeyResult = keyResult\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`)\n    }\n    log.debug('> torus.js/getPublicAddress', { finalKeyResult, isNewKey })\n\n    if (finalKeyResult) {\n      let { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0]\n      let typeOfUser\n      let nonce\n      let pubNonce\n      let modifiedPubKey\n      if (this.enableOneKey) {\n        let upgraded\n        try {\n          ;({ typeOfUser, nonce, pubNonce, upgraded } = await this.getOrSetNonce(X, Y, undefined, !isNewKey))\n          nonce = new BN(nonce || '0', 16)\n        } catch {\n          throw new GetOrSetNonceError()\n        }\n        if (typeOfUser === 'v1') {\n          modifiedPubKey = this.ec\n            .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n            .getPublic()\n            .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic())\n        } else if (typeOfUser === 'v2') {\n          if (upgraded) {\n            // OneKey is upgraded to 2/n, returned address is address of Torus key (postbox key), not tKey\n            modifiedPubKey = this.ec.keyFromPublic({ x: X.toString(16), y: Y.toString(16) }).getPublic()\n          } else {\n            modifiedPubKey = this.ec\n              .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n              .getPublic()\n              .add(this.ec.keyFromPublic({ x: pubNonce.x, y: pubNonce.y }).getPublic())\n          }\n        } else {\n          throw new Error('getOrSetNonce should always return typeOfUser.')\n        }\n      } else {\n        typeOfUser = 'v1'\n        nonce = await this.getMetadata({ pub_key_X: X, pub_key_Y: Y })\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic())\n      }\n\n      X = modifiedPubKey.getX().toString(16)\n      Y = modifiedPubKey.getY().toString(16)\n\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY())\n      log.debug('> torus.js/getPublicAddress', { X, Y, address, typeOfUser, nonce: nonce?.toString(16), pubNonce })\n\n      if (!isExtended) return address\n      return {\n        typeOfUser,\n        address,\n        X,\n        Y,\n        metadataNonce: nonce,\n        pubNonce,\n      }\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`)\n  }\n\n  /**\n   * Internal functions for OneKey (OpenLogin v2), only call these functions if you know what you're doing\n   */\n\n  static isGetOrSetNonceError(err) {\n    return err instanceof GetOrSetNonceError\n  }\n\n  async getOrSetNonce(X, Y, privKey, getOnly = false) {\n    let data\n    const msg = getOnly ? 'getNonce' : 'getOrSetNonce'\n    if (privKey) {\n      data = this.generateMetadataParams(msg, privKey)\n    } else {\n      data = {\n        pub_key_X: X,\n        pub_key_Y: Y,\n        set_data: { data: msg },\n      }\n    }\n    return post(`${this.metadataHost}/get_or_set_nonce`, data, undefined, { useAPIKey: true })\n  }\n\n  async getNonce(X, Y, privKey) {\n    return this.getOrSetNonce(X, Y, privKey, true)\n  }\n\n  getPostboxKeyFrom1OutOf1(privKey, nonce) {\n    const privKeyBN = new BN(privKey, 16)\n    const nonceBN = new BN(nonce, 16)\n    return privKeyBN.sub(nonceBN).umod(this.ec.curve.n).toString('hex')\n  }\n}\n\nexport default Torus\n"]},"metadata":{},"sourceType":"module"}