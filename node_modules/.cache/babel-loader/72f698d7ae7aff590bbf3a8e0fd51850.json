{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recoverTypedSignature = exports.signTypedData = exports.typedSignatureHash = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = exports.SignTypedDataVersion = void 0;\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst ethereumjs_abi_1 = require(\"ethereumjs-abi\");\nconst utils_1 = require(\"./utils\");\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\nvar SignTypedDataVersion;\n(function (SignTypedDataVersion) {\n  SignTypedDataVersion[\"V1\"] = \"V1\";\n  SignTypedDataVersion[\"V3\"] = \"V3\";\n  SignTypedDataVersion[\"V4\"] = \"V4\";\n})(SignTypedDataVersion = exports.SignTypedDataVersion || (exports.SignTypedDataVersion = {}));\nexports.TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string',\n              enum: getSolidityTypes()\n            }\n          },\n          required: ['name', 'type']\n        }\n      }\n    },\n    primaryType: {\n      type: 'string'\n    },\n    domain: {\n      type: 'object'\n    },\n    message: {\n      type: 'object'\n    }\n  },\n  required: ['types', 'primaryType', 'domain', 'message']\n};\n/**\n * Get a list of all Solidity types.\n *\n * @returns A list of all Solidity types.\n */\nfunction getSolidityTypes() {\n  const types = ['bool', 'address', 'string', 'bytes'];\n  const ints = Array.from(new Array(32)).map((_, index) => `int${(index + 1) * 8}`);\n  const uints = Array.from(new Array(32)).map((_, index) => `uint${(index + 1) * 8}`);\n  const bytes = Array.from(new Array(32)).map((_, index) => `bytes${index + 1}`);\n  return [...types, ...ints, ...uints, ...bytes];\n}\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\nfunction validateVersion(version, allowedVersions) {\n  if (!Object.keys(SignTypedDataVersion).includes(version)) {\n    throw new Error(`Invalid version: '${version}'`);\n  } else if (allowedVersions && !allowedVersions.includes(version)) {\n    throw new Error(`SignTypedDataVersion not allowed: '${version}'. Allowed versions are: ${allowedVersions.join(', ')}`);\n  }\n}\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\nfunction encodeField(types, name, type, value, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  if (types[type] !== undefined) {\n    return ['bytes32', version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n    ? '0x0000000000000000000000000000000000000000000000000000000000000000' : ethereumjs_util_1.keccak(encodeData(type, value, types, version))];\n  }\n  if (value === undefined) {\n    throw new Error(`missing value for field ${name} of type ${type}`);\n  }\n  if (type === 'bytes') {\n    return ['bytes32', ethereumjs_util_1.keccak(value)];\n  }\n  if (type === 'string') {\n    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n    if (typeof value === 'string') {\n      value = Buffer.from(value, 'utf8');\n    }\n    return ['bytes32', ethereumjs_util_1.keccak(value)];\n  }\n  if (type.lastIndexOf(']') === type.length - 1) {\n    if (version === SignTypedDataVersion.V3) {\n      throw new Error('Arrays are unimplemented in encodeData; use V4 extension');\n    }\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map(item => encodeField(types, name, parsedType, item, version));\n    return ['bytes32', ethereumjs_util_1.keccak(ethereumjs_abi_1.rawEncode(typeValuePairs.map(_ref => {\n      let [t] = _ref;\n      return t;\n    }), typeValuePairs.map(_ref2 => {\n      let [, v] = _ref2;\n      return v;\n    })))];\n  }\n  return [type, value];\n}\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\nfunction encodeData(primaryType, data, types, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  const encodedTypes = ['bytes32'];\n  const encodedValues = [hashType(primaryType, types)];\n  for (const field of types[primaryType]) {\n    if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n      continue;\n    }\n    const [type, value] = encodeField(types, field.name, field.type, data[field.name], version);\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n  return ethereumjs_abi_1.rawEncode(encodedTypes, encodedValues);\n}\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\nfunction encodeType(primaryType, types) {\n  let result = '';\n  const unsortedDeps = findTypeDependencies(primaryType, types);\n  unsortedDeps.delete(primaryType);\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n  for (const type of deps) {\n    const children = types[type];\n    if (!children) {\n      throw new Error(`No type definition specified: ${type}`);\n    }\n    result += `${type}(${types[type].map(_ref3 => {\n      let {\n        name,\n        type: t\n      } = _ref3;\n      return `${t} ${name}`;\n    }).join(',')})`;\n  }\n  return result;\n}\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\nfunction findTypeDependencies(primaryType, types) {\n  let results = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n  [primaryType] = primaryType.match(/^\\w*/u);\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n  results.add(primaryType);\n  for (const field of types[primaryType]) {\n    findTypeDependencies(field.type, types, results);\n  }\n  return results;\n}\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\nfunction hashStruct(primaryType, data, types, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  return ethereumjs_util_1.keccak(encodeData(primaryType, data, types, version));\n}\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\nfunction hashType(primaryType, types) {\n  return ethereumjs_util_1.keccak(encodeType(primaryType, types));\n}\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\nfunction sanitizeData(data) {\n  const sanitizedData = {};\n  for (const key in exports.TYPED_MESSAGE_SCHEMA.properties) {\n    if (data[key]) {\n      sanitizedData[key] = data[key];\n    }\n  }\n  if ('types' in sanitizedData) {\n    sanitizedData.types = Object.assign({\n      EIP712Domain: []\n    }, sanitizedData.types);\n  }\n  return sanitizedData;\n}\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\nfunction eip712Hash(typedData, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  const sanitizedData = sanitizeData(typedData);\n  const parts = [Buffer.from('1901', 'hex')];\n  parts.push(hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, version));\n  if (sanitizedData.primaryType !== 'EIP712Domain') {\n    parts.push(hashStruct(\n    // TODO: Validate that this is a string, so this type cast can be removed.\n    sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, version));\n  }\n  return ethereumjs_util_1.keccak(Buffer.concat(parts));\n}\n/**\n * A collection of utility functions used for signing typed data.\n */\nexports.TypedDataUtils = {\n  encodeData,\n  encodeType,\n  findTypeDependencies,\n  hashStruct,\n  hashType,\n  sanitizeData,\n  eip712Hash\n};\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\nfunction typedSignatureHash(typedData) {\n  const hashBuffer = _typedSignatureHash(typedData);\n  return ethereumjs_util_1.bufferToHex(hashBuffer);\n}\nexports.typedSignatureHash = typedSignatureHash;\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\nfunction _typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array');\n  if (typeof typedData !== 'object' || !('length' in typedData) || !typedData.length) {\n    throw error;\n  }\n  const data = typedData.map(function (e) {\n    if (e.type !== 'bytes') {\n      return e.value;\n    }\n    return utils_1.legacyToBuffer(e.value);\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n    return `${e.type} ${e.name}`;\n  });\n  return ethereumjs_abi_1.soliditySHA3(['bytes32', 'bytes32'], [ethereumjs_abi_1.soliditySHA3(new Array(typedData.length).fill('string'), schema), ethereumjs_abi_1.soliditySHA3(types, data)]);\n}\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nfunction signTypedData(_ref4) {\n  let {\n    privateKey,\n    data,\n    version\n  } = _ref4;\n  validateVersion(version);\n  if (utils_1.isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (utils_1.isNullish(privateKey)) {\n    throw new Error('Missing private key parameter');\n  }\n  const messageHash = version === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version);\n  const sig = ethereumjs_util_1.ecsign(messageHash, privateKey);\n  return utils_1.concatSig(ethereumjs_util_1.toBuffer(sig.v), sig.r, sig.s);\n}\nexports.signTypedData = signTypedData;\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\nfunction recoverTypedSignature(_ref5) {\n  let {\n    data,\n    signature,\n    version\n  } = _ref5;\n  validateVersion(version);\n  if (utils_1.isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (utils_1.isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n  const messageHash = version === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version);\n  const publicKey = utils_1.recoverPublicKey(messageHash, signature);\n  const sender = ethereumjs_util_1.publicToAddress(publicKey);\n  return ethereumjs_util_1.bufferToHex(sender);\n}\nexports.recoverTypedSignature = recoverTypedSignature;","map":{"version":3,"sources":["../src/sign-typed-data.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  bufferToHex,\n  ecsign,\n  keccak,\n  publicToAddress,\n  toBuffer,\n} from 'ethereumjs-util';\nimport { rawEncode, soliditySHA3 } from 'ethereumjs-abi';\n\nimport {\n  concatSig,\n  isNullish,\n  legacyToBuffer,\n  recoverPublicKey,\n} from './utils';\n\n/**\n * This is the message format used for `V1` of `signTypedData`.\n */\nexport type TypedDataV1 = TypedDataV1Field[];\n\n/**\n * This represents a single field in a `V1` `signTypedData` message.\n *\n * @property name - The name of the field.\n * @property type - The type of a field (must be a supported Solidity type).\n * @property value - The value of the field.\n */\nexport interface TypedDataV1Field {\n  name: string;\n  type: string;\n  value: any;\n}\n\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\nexport enum SignTypedDataVersion {\n  V1 = 'V1',\n  V3 = 'V3',\n  V4 = 'V4',\n}\n\nexport interface MessageTypeProperty {\n  name: string;\n  type: string;\n}\n\nexport interface MessageTypes {\n  EIP712Domain: MessageTypeProperty[];\n  [additionalProperties: string]: MessageTypeProperty[];\n}\n\n/**\n * This is the message format used for `signTypeData`, for all versions\n * except `V1`.\n *\n * @template T - The custom types used by this message.\n * @property types - The custom types used by this message.\n * @property primaryType - The type of the message.\n * @property domain - Signing domain metadata. The signing domain is the intended context for the\n * signature (e.g. the dapp, protocol, etc. that it's intended for). This data is used to\n * construct the domain seperator of the message.\n * @property domain.name - The name of the signing domain.\n * @property domain.version - The current major version of the signing domain.\n * @property domain.chainId - The chain ID of the signing domain.\n * @property domain.verifyingContract - The address of the contract that can verify the signature.\n * @property domain.salt - A disambiguating salt for the protocol.\n * @property message - The message to be signed.\n */\nexport interface TypedMessage<T extends MessageTypes> {\n  types: T;\n  primaryType: keyof T;\n  domain: {\n    name?: string;\n    version?: string;\n    chainId?: number;\n    verifyingContract?: string;\n    salt?: ArrayBuffer;\n  };\n  message: Record<string, unknown>;\n}\n\nexport const TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: { type: 'string' },\n            type: { type: 'string', enum: getSolidityTypes() },\n          },\n          required: ['name', 'type'],\n        },\n      },\n    },\n    primaryType: { type: 'string' },\n    domain: { type: 'object' },\n    message: { type: 'object' },\n  },\n  required: ['types', 'primaryType', 'domain', 'message'],\n};\n\n/**\n * Get a list of all Solidity types.\n *\n * @returns A list of all Solidity types.\n */\nfunction getSolidityTypes() {\n  const types = ['bool', 'address', 'string', 'bytes'];\n  const ints = Array.from(new Array(32)).map(\n    (_, index) => `int${(index + 1) * 8}`,\n  );\n  const uints = Array.from(new Array(32)).map(\n    (_, index) => `uint${(index + 1) * 8}`,\n  );\n  const bytes = Array.from(new Array(32)).map(\n    (_, index) => `bytes${index + 1}`,\n  );\n\n  return [...types, ...ints, ...uints, ...bytes];\n}\n\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\nfunction validateVersion(\n  version: SignTypedDataVersion,\n  allowedVersions?: SignTypedDataVersion[],\n) {\n  if (!Object.keys(SignTypedDataVersion).includes(version)) {\n    throw new Error(`Invalid version: '${version}'`);\n  } else if (allowedVersions && !allowedVersions.includes(version)) {\n    throw new Error(\n      `SignTypedDataVersion not allowed: '${version}'. Allowed versions are: ${allowedVersions.join(\n        ', ',\n      )}`,\n    );\n  }\n}\n\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\nfunction encodeField(\n  types: Record<string, MessageTypeProperty[]>,\n  name: string,\n  type: string,\n  value: any,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): [type: string, value: any] {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  if (types[type] !== undefined) {\n    return [\n      'bytes32',\n      version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n        ? '0x0000000000000000000000000000000000000000000000000000000000000000'\n        : keccak(encodeData(type, value, types, version)),\n    ];\n  }\n\n  if (value === undefined) {\n    throw new Error(`missing value for field ${name} of type ${type}`);\n  }\n\n  if (type === 'bytes') {\n    return ['bytes32', keccak(value)];\n  }\n\n  if (type === 'string') {\n    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n    if (typeof value === 'string') {\n      value = Buffer.from(value, 'utf8');\n    }\n    return ['bytes32', keccak(value)];\n  }\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    if (version === SignTypedDataVersion.V3) {\n      throw new Error(\n        'Arrays are unimplemented in encodeData; use V4 extension',\n      );\n    }\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map((item) =>\n      encodeField(types, name, parsedType, item, version),\n    );\n    return [\n      'bytes32',\n      keccak(\n        rawEncode(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ];\n  }\n\n  return [type, value];\n}\n\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\nfunction encodeData(\n  primaryType: string,\n  data: Record<string, unknown>,\n  types: Record<string, MessageTypeProperty[]>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const encodedTypes = ['bytes32'];\n  const encodedValues: unknown[] = [hashType(primaryType, types)];\n\n  for (const field of types[primaryType]) {\n    if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n      continue;\n    }\n    const [type, value] = encodeField(\n      types,\n      field.name,\n      field.type,\n      data[field.name],\n      version,\n    );\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n\n  return rawEncode(encodedTypes, encodedValues);\n}\n\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\nfunction encodeType(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n): string {\n  let result = '';\n  const unsortedDeps = findTypeDependencies(primaryType, types);\n  unsortedDeps.delete(primaryType);\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n  for (const type of deps) {\n    const children = types[type];\n    if (!children) {\n      throw new Error(`No type definition specified: ${type}`);\n    }\n\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`;\n  }\n\n  return result;\n}\n\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\nfunction findTypeDependencies(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n  results: Set<string> = new Set(),\n): Set<string> {\n  [primaryType] = primaryType.match(/^\\w*/u);\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n\n  results.add(primaryType);\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies(field.type, types, results);\n  }\n  return results;\n}\n\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\nfunction hashStruct(\n  primaryType: string,\n  data: Record<string, unknown>,\n  types: Record<string, MessageTypeProperty[]>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  return keccak(encodeData(primaryType, data, types, version));\n}\n\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\nfunction hashType(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n): Buffer {\n  return keccak(encodeType(primaryType, types));\n}\n\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\nfunction sanitizeData<T extends MessageTypes>(\n  data: TypedMessage<T>,\n): TypedMessage<T> {\n  const sanitizedData: Partial<TypedMessage<T>> = {};\n  for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n    if (data[key]) {\n      sanitizedData[key] = data[key];\n    }\n  }\n  if ('types' in sanitizedData) {\n    sanitizedData.types = { EIP712Domain: [], ...sanitizedData.types };\n  }\n  return sanitizedData as Required<TypedMessage<T>>;\n}\n\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\nfunction eip712Hash<T extends MessageTypes>(\n  typedData: TypedMessage<T>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const sanitizedData = sanitizeData(typedData);\n  const parts = [Buffer.from('1901', 'hex')];\n  parts.push(\n    hashStruct(\n      'EIP712Domain',\n      sanitizedData.domain,\n      sanitizedData.types,\n      version,\n    ),\n  );\n  if (sanitizedData.primaryType !== 'EIP712Domain') {\n    parts.push(\n      hashStruct(\n        // TODO: Validate that this is a string, so this type cast can be removed.\n        sanitizedData.primaryType as string,\n        sanitizedData.message,\n        sanitizedData.types,\n        version,\n      ),\n    );\n  }\n  return keccak(Buffer.concat(parts));\n}\n\n/**\n * A collection of utility functions used for signing typed data.\n */\nexport const TypedDataUtils = {\n  encodeData,\n  encodeType,\n  findTypeDependencies,\n  hashStruct,\n  hashType,\n  sanitizeData,\n  eip712Hash,\n};\n\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\nexport function typedSignatureHash(typedData: TypedDataV1Field[]): string {\n  const hashBuffer = _typedSignatureHash(typedData);\n  return bufferToHex(hashBuffer);\n}\n\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\nfunction _typedSignatureHash(typedData: TypedDataV1): Buffer {\n  const error = new Error('Expect argument to be non-empty array');\n  if (\n    typeof typedData !== 'object' ||\n    !('length' in typedData) ||\n    !typedData.length\n  ) {\n    throw error;\n  }\n\n  const data = typedData.map(function (e) {\n    if (e.type !== 'bytes') {\n      return e.value;\n    }\n\n    return legacyToBuffer(e.value);\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n    return `${e.type} ${e.name}`;\n  });\n\n  return soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      soliditySHA3(types, data),\n    ],\n  );\n}\n\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nexport function signTypedData<\n  V extends SignTypedDataVersion,\n  T extends MessageTypes,\n>({\n  privateKey,\n  data,\n  version,\n}: {\n  privateKey: Buffer;\n  data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n  version: V;\n}): string {\n  validateVersion(version);\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(privateKey)) {\n    throw new Error('Missing private key parameter');\n  }\n\n  const messageHash =\n    version === SignTypedDataVersion.V1\n      ? _typedSignatureHash(data as TypedDataV1)\n      : TypedDataUtils.eip712Hash(\n          data as TypedMessage<T>,\n          version as SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n        );\n  const sig = ecsign(messageHash, privateKey);\n  return concatSig(toBuffer(sig.v), sig.r, sig.s);\n}\n\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\nexport function recoverTypedSignature<\n  V extends SignTypedDataVersion,\n  T extends MessageTypes,\n>({\n  data,\n  signature,\n  version,\n}: {\n  data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n  signature: string;\n  version: V;\n}): string {\n  validateVersion(version);\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n\n  const messageHash =\n    version === SignTypedDataVersion.V1\n      ? _typedSignatureHash(data as TypedDataV1)\n      : TypedDataUtils.eip712Hash(\n          data as TypedMessage<T>,\n          version as SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n        );\n  const publicKey = recoverPublicKey(messageHash, signature);\n  const sender = publicToAddress(publicKey);\n  return bufferToHex(sender);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}