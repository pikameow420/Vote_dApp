{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { SafeEventEmitter, JRPCEngine, createAsyncMiddleware, mergeMiddleware, createScaffoldMiddleware } from '@toruslabs/openlogin-jrpc';\nimport getCreateRandomId from 'json-rpc-random-id';\nimport { BigNumber } from 'bignumber.js';\nimport { fromSigned, bufferToInt, toUnsigned, stripHexPrefix, addHexPrefix, hashPersonalMessage, ecsign, intToBuffer } from 'ethereumjs-util';\nimport { ethErrors } from 'eth-rpc-errors';\nimport log from 'loglevel';\nimport { BroadcastChannel } from 'broadcast-channel';\nimport { get, post, patch, remove } from '@toruslabs/http-helpers';\nimport bowser from 'bowser';\nimport { cloneDeep, pickBy, omitBy } from 'lodash';\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\n/**\n * Controller class that provides configuration, state management, and subscriptions\n */\n\nclass BaseController extends SafeEventEmitter {\n  /**\n   * Default options used to configure this controller\n   */\n\n  /**\n   * Default state set on this controller\n   */\n\n  /**\n   * Determines if listeners are notified of state changes\n   */\n\n  /**\n   * Name of this controller used during composition\n   */\n\n  /**\n   * Creates a BaseController instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(_ref) {\n    let {\n      config = {},\n      state = {}\n    } = _ref;\n    super(); // Use assign since generics can't be spread: https://git.io/vpRhY\n\n    _defineProperty(this, \"defaultConfig\", {});\n    _defineProperty(this, \"defaultState\", {});\n    _defineProperty(this, \"disabled\", false);\n    _defineProperty(this, \"name\", \"BaseController\");\n    _defineProperty(this, \"initialConfig\", void 0);\n    _defineProperty(this, \"initialState\", void 0);\n    _defineProperty(this, \"internalConfig\", this.defaultConfig);\n    _defineProperty(this, \"internalState\", this.defaultState);\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n  /**\n   * Retrieves current controller configuration options\n   *\n   * @returns - Current configuration\n   */\n\n  get config() {\n    return this.internalConfig;\n  }\n  /**\n   * Retrieves current controller state\n   *\n   * @returns - Current state\n   */\n\n  get state() {\n    return this.internalState;\n  }\n  /**\n   * Updates controller configuration\n   *\n   * @param config - New configuration options\n   * @param overwrite - Overwrite config instead of merging\n   * @param fullUpdate - Boolean that defines if the update is partial or not\n   */\n\n  configure(config) {\n    let overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let fullUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (fullUpdate) {\n      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n      for (const key in this.internalConfig) {\n        if (typeof this.internalConfig[key] !== \"undefined\") {\n          this[key] = this.internalConfig[key];\n        }\n      }\n    } else {\n      for (const key in config) {\n        /* istanbul ignore else */\n        if (typeof this.internalConfig[key] !== \"undefined\") {\n          this.internalConfig[key] = config[key];\n          this[key] = config[key];\n        }\n      }\n    }\n  }\n  /**\n   * Updates controller state\n   *\n   * @param state - New state\n   * @param overwrite - Overwrite state instead of merging\n   */\n\n  update(state) {\n    let overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.internalState = overwrite ? _objectSpread$3({}, state) : _objectSpread$3(_objectSpread$3({}, this.internalState), state);\n    this.emit(\"store\", this.internalState);\n  }\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns - This controller instance\n   */\n\n  initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n}\nconst sec = 1000;\nconst calculateSum = (accumulator, currentValue) => accumulator + currentValue;\nconst blockTrackerEvents = [\"sync\", \"latest\"];\nclass BaseBlockTracker extends BaseController {\n  constructor(_ref) {\n    let {\n      config = {},\n      state = {}\n    } = _ref;\n    super({\n      config,\n      state\n    }); // config\n\n    _defineProperty(this, \"name\", \"BaseBlockTracker\");\n    _defineProperty(this, \"_blockResetTimeout\", void 0);\n    this.defaultState = {\n      _currentBlock: {\n        idempotencyKey: \"\"\n      },\n      _isRunning: false\n    };\n    this.defaultConfig = {\n      blockResetDuration: 20 * sec\n    };\n    this.initialize(); // bind functions for internal use\n\n    this._onNewListener = this._onNewListener.bind(this);\n    this._onRemoveListener = this._onRemoveListener.bind(this);\n    this._resetCurrentBlock = this._resetCurrentBlock.bind(this); // listen for handler changes\n\n    this._setupInternalEvents();\n  }\n  isRunning() {\n    return this.state._isRunning;\n  }\n  getCurrentBlock() {\n    return this.state._currentBlock;\n  }\n  async getLatestBlock() {\n    // return if available\n    if (this.state._currentBlock) {\n      return this.state._currentBlock;\n    } // wait for a new latest block\n\n    const latestBlock = await new Promise(resolve => this.once(\"latest\", newState => {\n      if (newState._currentBlock) {\n        resolve(newState._currentBlock);\n      }\n    })); // return newly set current block\n\n    return latestBlock;\n  } // dont allow module consumer to remove our internal event listeners\n\n  removeAllListeners(eventName) {\n    if (eventName) {\n      super.removeAllListeners(eventName);\n    } else {\n      super.removeAllListeners();\n    } // re-add internal events\n\n    this._setupInternalEvents(); // trigger stop check just in case\n\n    this._onRemoveListener();\n    return this;\n  }\n  /**\n   * To be implemented in subclass.\n   */\n\n  _start() {// default behavior is noop\n  }\n  /**\n   * To be implemented in subclass.\n   */\n\n  _end() {// default behavior is noop\n  }\n  _newPotentialLatest(newBlock) {\n    const currentBlock = this.state._currentBlock; // only update if blok number is higher\n\n    if (currentBlock && newBlock.idempotencyKey === currentBlock.idempotencyKey) {\n      return;\n    }\n    this._setCurrentBlock(newBlock);\n  }\n  _setupInternalEvents() {\n    // first remove listeners for idempotency\n    this.removeListener(\"newListener\", this._onNewListener);\n    this.removeListener(\"removeListener\", this._onRemoveListener); // then add them\n\n    this.on(\"removeListener\", this._onRemoveListener);\n    this.on(\"newListener\", this._onNewListener);\n  }\n  _onNewListener() {\n    this._maybeStart();\n  }\n  _onRemoveListener() {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) {\n      return;\n    }\n    this._maybeEnd();\n  }\n  _maybeStart() {\n    if (this.state._isRunning) {\n      return;\n    }\n    this.state._isRunning = true; // cancel setting latest block to stale\n\n    this._cancelBlockResetTimeout();\n    this._start();\n  }\n  _maybeEnd() {\n    if (!this.state._isRunning) {\n      return;\n    }\n    this.state._isRunning = false;\n    this._setupBlockResetTimeout();\n    this._end();\n  }\n  _getBlockTrackerEventCount() {\n    return blockTrackerEvents.map(eventName => this.listenerCount(eventName)).reduce(calculateSum);\n  }\n  _setCurrentBlock(newBlock) {\n    const oldBlock = this.state._currentBlock;\n    this.update({\n      _currentBlock: newBlock\n    });\n    this.emit(\"latest\", newBlock);\n    this.emit(\"sync\", {\n      oldBlock,\n      newBlock\n    });\n  }\n  _setupBlockResetTimeout() {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout(); // clear latest block when stale\n\n    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this.config.blockResetDuration); // nodejs - dont hold process open\n\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref();\n    }\n  }\n  _cancelBlockResetTimeout() {\n    if (this._blockResetTimeout) {\n      clearTimeout(this._blockResetTimeout);\n    }\n  }\n  _resetCurrentBlock() {\n    this.update({\n      _currentBlock: {\n        idempotencyKey: \"\"\n      }\n    });\n  }\n}\nconst filterNoop = () => true;\nconst internalEvents = [\"newListener\", \"removeListener\"];\nconst externalEventFilter = name => !internalEvents.includes(name);\nfunction getRawListeners(eventEmitter, name) {\n  // prefer native\n  return eventEmitter.rawListeners(name);\n}\nfunction createEventEmitterProxy(initialTarget, opts) {\n  // parse options\n  const finalOpts = opts || {};\n  let eventFilter = finalOpts.eventFilter || filterNoop;\n  if (typeof eventFilter === \"string\" && eventFilter === \"skipInternal\") eventFilter = externalEventFilter;\n  if (typeof eventFilter !== \"function\") throw new Error(\"createEventEmitterProxy - Invalid eventFilter\");\n  let target = initialTarget;\n  let setTarget = newTarget => {\n    const oldTarget = target;\n    target = newTarget;\n    oldTarget.eventNames().filter(eventFilter).forEach(name => {\n      getRawListeners(oldTarget, name).forEach(handler => newTarget.on(name, handler));\n    }); // remove old listeners\n\n    oldTarget.removeAllListeners();\n  };\n  const proxy = new Proxy({}, {\n    get: (_, name) => {\n      // override `setTarget` access\n      if (name === \"setTarget\") return setTarget;\n      return target[name];\n    },\n    set: (_, name, value) => {\n      // allow `setTarget` overrides\n      if (name === \"setTarget\") {\n        setTarget = value;\n        return true;\n      }\n      target[name] = value;\n      return true;\n    }\n  });\n  return proxy;\n}\nfunction createSwappableProxy(initialTarget) {\n  let target = initialTarget;\n  let setTarget = newTarget => {\n    target = newTarget;\n  };\n  const proxy = new Proxy({}, {\n    get: (_, name) => {\n      // override `setTarget` access\n      if (name === \"setTarget\") return setTarget;\n      return target[name];\n    },\n    set: (_, name, value) => {\n      // allow `setTarget` overrides\n      if (name === \"setTarget\") {\n        setTarget = value;\n        return true;\n      }\n      target[name] = value;\n      return true;\n    }\n  });\n  return proxy;\n}\nconst POLLING_INTERVAL = 600000;\nclass BaseCurrencyController extends BaseController {\n  constructor(_ref) {\n    let {\n      config = {},\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    this.defaultState = {\n      currentCurrency: \"usd\",\n      conversionRate: 0,\n      conversionDate: \"N/A\",\n      nativeCurrency: \"ETH\"\n    };\n    this.defaultConfig = {\n      pollInterval: POLLING_INTERVAL\n    };\n    this.initialize();\n  } //\n  // PUBLIC METHODS\n  //\n\n  getNativeCurrency() {\n    return this.state.nativeCurrency;\n  }\n  setNativeCurrency(nativeCurrency) {\n    this.update({\n      nativeCurrency,\n      ticker: nativeCurrency\n    });\n  }\n  getCurrentCurrency() {\n    return this.state.currentCurrency;\n  }\n  setCurrentCurrency(currentCurrency) {\n    this.update({\n      currentCurrency\n    });\n  }\n  /**\n   * A getter for the conversionRate property\n   *\n   * @returns The conversion rate from ETH to the selected currency.\n   *\n   */\n\n  getConversionRate() {\n    return this.state.conversionRate;\n  }\n  setConversionRate(conversionRate) {\n    this.update({\n      conversionRate\n    });\n  }\n  /**\n   * A getter for the conversionDate property\n   *\n   * @returns The date at which the conversion rate was set. Expressed in milliseconds since midnight of\n   * January 1, 1970\n   *\n   */\n\n  getConversionDate() {\n    return this.state.conversionDate;\n  }\n  setConversionDate(conversionDate) {\n    this.update({\n      conversionDate\n    });\n  }\n}\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nconst createRandomId = getCreateRandomId();\nfunction providerFromEngine(engine) {\n  const provider = new SafeEventEmitter(); // handle both rpc send methods\n\n  provider.sendAsync = async req => {\n    const res = await engine.handle(req);\n    if (res.error) {\n      throw new Error(res.error);\n    }\n    return res.result;\n  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  provider.send = (req, callback) => {\n    if (typeof callback !== \"function\") {\n      throw new Error('Must provide callback to \"send\" method.');\n    }\n    engine.handle(req, callback);\n  }; // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      provider.emit(\"data\", null, message);\n    });\n  }\n  provider.request = async args => {\n    const req = _objectSpread$2(_objectSpread$2({}, args), {}, {\n      id: createRandomId(),\n      jsonrpc: \"2.0\"\n    });\n    const res = await provider.sendAsync(req);\n    return res;\n  };\n  return provider;\n}\nfunction providerFromMiddleware(middleware) {\n  const engine = new JRPCEngine();\n  engine.push(middleware);\n  const provider = providerFromEngine(engine);\n  return provider;\n}\nfunction providerAsMiddleware(provider) {\n  return async (req, res, _next, end) => {\n    // send request to provider\n    try {\n      const providerRes = await provider.sendAsync(req);\n      res.result = providerRes;\n      return end();\n    } catch (error) {\n      return end(error.message);\n    }\n  };\n}\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 700,\n  width: 450\n};\nconst POPUP_LOADED = \"popup_loaded\";\nconst POPUP_RESULT = \"popup_result\";\nconst SETUP_COMPLETE = \"setup_complete\";\nconst ACTIVITY_ACTION_ALL = \"walletActivity.allTransactions\";\nconst ACTIVITY_ACTION_SEND = \"walletActivity.send\";\nconst ACTIVITY_ACTION_RECEIVE = \"walletActivity.receive\";\nconst ACTIVITY_ACTION_TOPUP = \"walletActivity.topup\";\nconst ACTIVITY_PERIOD_ALL = \"walletActivity.all\";\nconst ACTIVITY_PERIOD_WEEK_ONE = \"walletActivity.lastOneWeek\";\nconst ACTIVITY_PERIOD_MONTH_ONE = \"walletActivity.lastOneMonth\";\nconst ACTIVITY_PERIOD_MONTH_SIX = \"walletActivity.lastSixMonts\";\nconst ACTIVITY_STATUS_SUCCESSFUL = \"walletActivity.successful\";\nconst ACTIVITY_STATUS_UNSUCCESSFUL = \"walletActivity.unsuccessful\";\nconst ACTIVITY_STATUS_PENDING = \"walletActivity.pending\";\nconst ACTIVITY_STATUS_CANCELLED = \"walletActivity.cancelled\";\nconst ACTIVITY_STATUS_CANCELLING = \"walletActivity.cancelling\";\nconst COMMUNICATION_NOTIFICATIONS = {\n  IFRAME_STATUS: \"iframe_status\",\n  // Tell embed to create the window\n  CREATE_WINDOW: \"create_window\",\n  // Tell embed to close the window\n  CLOSE_WINDOW: \"close_window\",\n  USER_LOGGED_IN: \"user_logged_in\",\n  USER_LOGGED_OUT: \"user_logged_out\"\n};\nconst COMMUNICATION_JRPC_METHODS = {\n  LOGOUT: \"logout\",\n  WALLET_INSTANCE_ID: \"wallet_instance_id\",\n  USER_INFO: \"user_info\",\n  SET_PROVIDER: \"set_provider\",\n  TOPUP: \"topup\",\n  IFRAME_STATUS: \"iframe_status\",\n  // embed has opened the window as requested\n  OPENED_WINDOW: \"opened_window\",\n  // user has closed the window from embed's side\n  CLOSED_WINDOW: \"closed_window\",\n  GET_PROVIDER_STATE: \"get_provider_state\",\n  LOGIN_WITH_PRIVATE_KEY: \"login_with_private_key\"\n};\nconst PROVIDER_JRPC_METHODS = {\n  GET_PROVIDER_STATE: \"wallet_get_provider_state\"\n};\nconst PROVIDER_NOTIFICATIONS = {\n  ACCOUNTS_CHANGED: \"wallet_accounts_changed\",\n  CHAIN_CHANGED: \"wallet_chain_changed\",\n  UNLOCK_STATE_CHANGED: \"wallet_unlock_state_changed\"\n};\nconst BROADCAST_CHANNELS = {\n  REDIRECT_CHANNEL: \"redirect_channel\",\n  PROVIDER_CHANGE_CHANNEL: \"torus_provider_change_channel\",\n  TRANSACTION_CHANNEL: \"torus_channel\",\n  MESSAGE_CHANNEL: \"torus_message_channel\",\n  WALLET_LOGOUT_CHANNEL: \"wallet_logout_channel\",\n  WALLET_SELECTED_ADDRESS_CHANNEL: \"wallet_selected_address_channel\",\n  WALLET_NETWORK_CHANGE_CHANNEL: \"wallet_network_change_channel\",\n  WALLET_ACCOUNT_IMPORT_CHANNEL: \"wallet_account_import_channel\"\n};\nconst BROADCAST_CHANNELS_MSGS = {\n  LOGOUT: \"logout\",\n  ACCOUNT_IMPORTED: \"account_imported\",\n  SELECTED_ADDRESS_CHANGE: \"selected_address_change\",\n  NETWORK_CHANGE: \"network_change\"\n};\nfunction createChangeProviderMiddlewareMiddleware(_ref) {\n  let {\n    changeProvider\n  } = _ref;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== COMMUNICATION_JRPC_METHODS.SET_PROVIDER) return next();\n    if (!changeProvider) throw new Error(\"CommunicationMiddleware - opts.changeProvider not provided\");\n    response.result = await changeProvider(request);\n  });\n}\nfunction createTopupMiddleware(_ref2) {\n  let {\n    topup\n  } = _ref2;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== COMMUNICATION_JRPC_METHODS.TOPUP) return next();\n    if (!topup) throw new Error(\"CommunicationMiddleware - opts.topup not provided\");\n    response.result = await topup(request);\n  });\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== targetMethod) return next();\n    if (!handler) throw new Error(\"CommunicationMiddleware - \".concat(targetMethod, \" not provided\"));\n    const result = await handler(request);\n    if (!result) {\n      return next();\n    }\n    response.result = result;\n    return undefined;\n  });\n}\nfunction createCommunicationMiddleware(providerHandlers) {\n  const {\n    getUserInfo,\n    getWalletInstanceId,\n    topup,\n    logout,\n    changeProvider,\n    setIFrameStatus,\n    handleWindowRpc,\n    getProviderState,\n    loginWithPrivateKey\n  } = providerHandlers;\n  return mergeMiddleware([createChangeProviderMiddlewareMiddleware({\n    changeProvider\n  }), createTopupMiddleware({\n    topup\n  }), createScaffoldMiddleware({\n    [COMMUNICATION_JRPC_METHODS.LOGOUT]: logout,\n    [COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID]: getWalletInstanceId,\n    [COMMUNICATION_JRPC_METHODS.USER_INFO]: getUserInfo,\n    [COMMUNICATION_JRPC_METHODS.IFRAME_STATUS]: setIFrameStatus,\n    // Do this in the orchestrator because communicationWindowManager needs to be passed into PopupHandlers\n    [COMMUNICATION_JRPC_METHODS.OPENED_WINDOW]: handleWindowRpc,\n    [COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW]: handleWindowRpc,\n    [COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE]: getProviderState\n  }), createGenericJRPCMiddleware(COMMUNICATION_JRPC_METHODS.LOGIN_WITH_PRIVATE_KEY, loginWithPrivateKey)]);\n}\nclass BaseEmbedController extends BaseController {\n  constructor(_ref) {\n    let {\n      config = {},\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    _defineProperty(this, \"_communicationProviderProxy\", void 0);\n    this.defaultState = {\n      buttonPosition: \"bottom-right\",\n      isIFrameFullScreen: true,\n      apiKey: \"torus-default\",\n      oauthModalVisibility: false,\n      loginInProgress: false,\n      dappMetadata: {\n        name: \"\",\n        icon: \"\"\n      }\n    };\n    this.initialize();\n  }\n  /**\n   * Called by orchestrator once while initializing the class\n   * @param handlers - JRPC handlers for provider\n   * @returns - provider - Returns the providerProxy\n   */\n\n  initializeProvider(handlers) {\n    const engine = new JRPCEngine();\n    const communicationMiddleware = createCommunicationMiddleware(handlers);\n    engine.push(communicationMiddleware);\n    const communicationProvider = providerFromEngine(engine);\n    this.setCommunicationProvider(communicationProvider);\n  }\n  setCommunicationProvider(communicationProvider) {\n    if (this._communicationProviderProxy) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this._communicationProviderProxy.setTarget(communicationProvider);\n    } else {\n      this._communicationProviderProxy = createSwappableProxy(communicationProvider);\n    }\n  }\n}\nclass CommunicationWindowManager extends SafeEventEmitter {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"handleWindowRpc\", (request, response, next, end) => {\n      const {\n        method,\n        params\n      } = request;\n      if (method === COMMUNICATION_JRPC_METHODS.OPENED_WINDOW) {\n        const {\n          windowId\n        } = params; // I've been informed that a window has been opened\n\n        this.emit(\"\".concat(windowId, \":opened\"));\n        response.result = true;\n        end();\n      } else if (method === COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW) {\n        const {\n          windowId\n        } = params; // I've been informed that a window has been closed\n\n        this.emit(\"\".concat(windowId, \":closed\"));\n        response.result = true;\n        end();\n      } else {\n        next();\n      }\n    });\n  }\n}\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst getTxStatusText = txStatus => {\n  switch (txStatus) {\n    case \"rejected\":\n    case \"unapproved\":\n    case \"failed\":\n      return ACTIVITY_STATUS_UNSUCCESSFUL;\n    case \"confirmed\":\n      return ACTIVITY_STATUS_SUCCESSFUL;\n    case \"submitted\":\n      return ACTIVITY_STATUS_PENDING;\n    case \"cancelled\":\n      return ACTIVITY_STATUS_CANCELLED;\n    default:\n      return \"\";\n  }\n};\n\n/**\n * General utility functions\n */\n\nfunction intToHex(i) {\n  const hex = i.toString(16);\n  return \"0x\".concat(hex);\n}\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */\n\nconst randomId = () => Math.random().toString(36).slice(2);\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\n\nfunction padWithZeroes(hexString, targetLength) {\n  if (hexString !== \"\" && !/^[a-f0-9]+$/iu.test(hexString)) {\n    throw new Error(\"Expected an unprefixed hex string. Received: \".concat(hexString));\n  }\n  if (targetLength < 0) {\n    throw new Error(\"Expected a non-negative integer target length. Received: \".concat(targetLength));\n  }\n  return String.prototype.padStart.call(hexString, targetLength, \"0\");\n}\n/**\n * Concatenate an extended ECDSA signature into a hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature.\n */\n\nfunction concatSig(v, r, s) {\n  const rSig = fromSigned(r);\n  const sSig = fromSigned(s);\n  const vSig = bufferToInt(v);\n  const rStr = padWithZeroes(toUnsigned(rSig).toString(\"hex\"), 64);\n  const sStr = padWithZeroes(toUnsigned(sSig).toString(\"hex\"), 64);\n  const vStr = stripHexPrefix(intToHex(vSig));\n  return addHexPrefix(rStr.concat(sStr, vStr));\n}\nfunction timeout$1(duration) {\n  return new Promise(resolve => {\n    const timeoutRef = window.setTimeout(() => {\n      resolve();\n      window.clearTimeout(timeoutRef);\n    }, duration);\n  });\n}\n/**\n * Text/number formatting utilities\n */\n\nconst formatSmallNumbers = function (number) {\n  let currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"usd\";\n  let noTilde = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const finalNumber = BigNumber.isBigNumber(number) ? number.toNumber() : number;\n  if (!Number.isFinite(finalNumber)) return \"\";\n  const value = currency.toLowerCase() === \"usd\" ? parseFloat(Number(finalNumber).toFixed(2)) : parseFloat(Number(finalNumber).toFixed(5));\n  const tilde = value > 0 ? \"~ \" : \"\";\n  return \"\".concat(currency.toLowerCase() === \"usd\" || noTilde ? \"\" : tilde).concat(Number(value), \" \").concat(currency.toUpperCase());\n};\nconst addressSlicer = function (address) {\n  let sliceLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  if (address.length < 11) {\n    return address;\n  }\n  if (typeof address !== \"string\") return \"\";\n  return \"\".concat(address.slice(0, sliceLength), \"...\").concat(address.slice(-sliceLength));\n};\nconst significantDigits = function (number) {\n  let perc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let length_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  let input = !BigNumber.isBigNumber(number) ? new BigNumber(number) : number;\n  if (input.isZero()) return input;\n  if (perc) {\n    input = input.times(new BigNumber(100));\n  }\n  let depth;\n  if (input.gte(new BigNumber(1))) {\n    depth = length_;\n  } else {\n    depth = length_ - 1 + Math.ceil(Math.log10(new BigNumber(\"1\").div(input).toNumber()));\n  }\n  const shift = new BigNumber(10).pow(new BigNumber(depth));\n  const roundedNumber = Math.round(shift.times(input).toNumber()) / shift.toNumber();\n  return roundedNumber;\n};\nconst formatDate = inputDate => {\n  const monthList = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const date = new Date(inputDate);\n  const day = date.getDate();\n  const month = monthList[date.getMonth()];\n  const year = date.getFullYear();\n  return \"\".concat(day, \" \").concat(month, \" \").concat(year);\n};\nconst formatTime = time => {\n  return new Date(time).toTimeString().slice(0, 8);\n};\n/**\n * Network utilities\n */\n\nconst transactionMatchesNetwork = (transaction, chainId) => {\n  if (typeof transaction.chainId !== \"undefined\") {\n    return transaction.chainId === chainId;\n  }\n  return false;\n};\n/**\n * Signing utils\n */\n\nconst hashMessage = message => {\n  const bufferedMessage = Buffer.from(message, \"utf8\");\n  const el = hashPersonalMessage(bufferedMessage);\n  return el;\n};\nconst signMessage = (privateKey, data) => {\n  const privKey = Buffer.from(privateKey, \"hex\");\n  const message = stripHexPrefix(data);\n  const msgSig = ecsign(Buffer.from(message, \"hex\"), privKey);\n  const rawMsgSig = concatSig(intToBuffer(msgSig.v), msgSig.r, msgSig.s);\n  return rawMsgSig;\n};\n/**\n * popup handler utils\n */\n\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\nconst broadcastChannelOptions = {\n  // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n  webWorkerSupport: false // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\n\nfunction getCustomDeviceInfo() {\n  var _navigator;\n  if ((_navigator = navigator) !== null && _navigator !== void 0 && _navigator.brave) {\n    return {\n      browser: \"Brave\"\n    };\n  }\n}\nclass UserError extends Error {}\nconst handleRedirectParameters = (hash, queryParameters) => {\n  const hashParameters = {};\n  const hashUrl = new URL(\"\".concat(window.location.origin, \"/?\").concat(hash.slice(1)));\n  hashUrl.searchParams.forEach((value, key) => {\n    hashParameters[key] = value;\n  });\n  let instanceParameters = {};\n  let error = \"\";\n  if (!queryParameters.windowId) {\n    if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n      instanceParameters = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n      error = hashParameters.error_description || hashParameters.error || error;\n    } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n      instanceParameters = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n      if (queryParameters.error) error = queryParameters.error;\n    }\n  }\n  return {\n    error,\n    instanceParameters,\n    hashParameters\n  };\n};\nclass BaseKeyringController extends BaseController {\n  constructor(_ref) {\n    var _state$wallets;\n    let {\n      config = {},\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    this.defaultState = {\n      wallets: (_state$wallets = state.wallets) !== null && _state$wallets !== void 0 ? _state$wallets : []\n    };\n    this.initialize();\n  } // for signing auth message\n\n  signAuthMessage(address, message) {\n    const keyring = this.state.wallets.find(x => x.address === address);\n    if (!keyring) {\n      throw new Error(\"key does not exist\");\n    }\n    const hashedMessage = hashMessage(message).toString(\"hex\");\n    const rawMessageSig = signMessage(keyring.privateKey, hashedMessage);\n    return rawMessageSig;\n  }\n}\nconst RETRIABLE_ERRORS = [\n// ignore server overload errors\n\"Gateway timeout\", \"ETIMEDOUT\",\n// ignore server sent html error pages\n// or truncated json responses\n\"failed to parse response body\",\n// ignore errors where http req failed to establish\n\"Failed to fetch\"];\nfunction checkForHttpErrors(fetchRes) {\n  // check for errors\n  switch (fetchRes.status) {\n    case 405:\n      throw ethErrors.rpc.methodNotFound();\n    case 418:\n      throw ethErrors.rpc.internal({\n        message: \"Request is being rate limited.\"\n      });\n    case 503:\n    case 504:\n      throw ethErrors.rpc.internal({\n        message: \"Gateway timeout. The request took too long to process.\" + \"This can happen when querying over too wide a block range.\"\n      });\n  }\n}\nfunction timeout(duration) {\n  return new Promise(resolve => setTimeout(resolve, duration));\n}\nfunction parseResponse(fetchRes, body) {\n  // check for error code\n  if (fetchRes.status !== 200) {\n    throw ethErrors.rpc.internal({\n      message: \"Non-200 status code: '\".concat(fetchRes.status, \"'\"),\n      data: body\n    });\n  } // check for rpc error\n\n  if (body.error) {\n    throw ethErrors.rpc.internal({\n      data: body.error\n    });\n  } // return successful result\n\n  return body.result;\n}\nfunction createFetchConfigFromReq(_ref) {\n  let {\n    req,\n    rpcTarget,\n    originHttpHeaderKey\n  } = _ref;\n  const parsedUrl = new URL(rpcTarget); // prepare payload\n  // copy only canonical json rpc properties\n\n  const payload = {\n    id: req.id,\n    jsonrpc: req.jsonrpc,\n    method: req.method,\n    params: req.params\n  }; // extract 'origin' parameter from request\n\n  const originDomain = req.origin; // serialize request body\n\n  const serializedPayload = JSON.stringify(payload); // configure fetch params\n\n  const fetchParams = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: serializedPayload\n  }; // optional: add request origin as header\n\n  if (originHttpHeaderKey && originDomain) {\n    fetchParams.headers[originHttpHeaderKey] = originDomain;\n  }\n  return {\n    fetchUrl: parsedUrl.href,\n    fetchParams\n  };\n}\nfunction createFetchMiddleware(_ref2) {\n  let {\n    rpcTarget,\n    originHttpHeaderKey\n  } = _ref2;\n  return createAsyncMiddleware(async (req, res, _next) => {\n    const {\n      fetchUrl,\n      fetchParams\n    } = createFetchConfigFromReq({\n      req,\n      rpcTarget,\n      originHttpHeaderKey\n    }); // attempt request multiple times\n\n    const maxAttempts = 5;\n    const retryInterval = 1000;\n    for (let attempt = 0; attempt < maxAttempts; attempt++) {\n      try {\n        const fetchRes = await fetch(fetchUrl, fetchParams); // check for http errrors\n\n        checkForHttpErrors(fetchRes); // parse response body\n\n        const fetchBody = await fetchRes.json();\n        const result = parseResponse(fetchRes, fetchBody); // set result and exit retry loop\n\n        res.result = result;\n        return;\n      } catch (err) {\n        const errMsg = err.toString();\n        const isRetriable = RETRIABLE_ERRORS.some(phrase => errMsg.includes(phrase)); // re-throw error if not retriable\n\n        if (!isRetriable) {\n          throw err;\n        }\n      } // delay before retrying\n\n      await timeout(retryInterval);\n    }\n  });\n}\nfunction createLoggerMiddleware(options) {\n  return function loggerMiddleware(request, response, next) {\n    next(callback => {\n      if (response.error) {\n        log.warn(\"Error in RPC response:\\n\", response);\n      }\n      if (request.isTorusInternal) return;\n      log.info(\"RPC (\".concat(options.origin, \"):\"), request, \"->\", response);\n      callback();\n    });\n  };\n}\nfunction createOriginMiddleware(options) {\n  return function originMiddleware(request, _, next) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    request.origin = options.origin;\n    next();\n  };\n}\nclass BroadcastChannelHandler {\n  constructor(channelPrefix) {\n    _defineProperty(this, \"bc\", void 0);\n    _defineProperty(this, \"channel\", void 0);\n    const queryParameters = new URLSearchParams(window.location.search);\n    const instanceId = queryParameters.get(\"instanceId\");\n    this.channel = \"\".concat(channelPrefix, \"_\").concat(instanceId);\n    this.bc = new BroadcastChannel(this.channel, broadcastChannelOptions);\n  }\n  getMessageFromChannel() {\n    return new Promise((resolve, reject) => {\n      this.bc.addEventListener(\"message\", async ev => {\n        this.bc.close();\n        if (ev.error) {\n          reject(ev.error);\n        } else {\n          resolve(ev.data);\n        }\n      });\n      this.bc.postMessage({\n        data: {\n          type: POPUP_LOADED\n        }\n      });\n    });\n  }\n}\nclass StreamWindow extends BaseController {\n  // if window has been closed by users\n  constructor(_ref) {\n    let {\n      config,\n      state = {}\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    _defineProperty(this, \"closed\", false);\n    this.initialize();\n  }\n  async open() {\n    return new Promise((resolve, reject) => {\n      const {\n        communicationEngine,\n        communicationWindowManager\n      } = this.config;\n      communicationWindowManager.once(\"\".concat(this.state.windowId, \":closed\"), () => {\n        this.closed = true;\n      }); // Window is not open yet\n\n      if (!this.state.windowId) {\n        this.update({\n          windowId: randomId()\n        });\n        communicationWindowManager.once(\"\".concat(this.state.windowId, \":opened\"), () => {\n          resolve(this);\n        }); // Tell the other party to create a window by prompting the user to click on something\n\n        communicationEngine.emit(\"notification\", {\n          method: COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW,\n          params: {\n            windowId: this.state.windowId,\n            url: this.state.url.href\n          }\n        });\n      } else {\n        // Send this window with `windowId` the url to open via bc\n        const bc = new BroadcastChannel(this.state.windowId, broadcastChannelOptions);\n        let writeInterval = null;\n        bc.addEventListener(\"message\", async ev => {\n          try {\n            log.info(ev, \"receiving data on channel: \".concat(bc.name));\n            const {\n              error\n            } = ev;\n            if (error) {\n              // Popup says some error. so, we say it's not really opened\n              reject(new Error(error));\n              return;\n            }\n            const {\n              message\n            } = ev.data;\n            if (message === POPUP_LOADED) {\n              if (writeInterval) window.clearInterval(writeInterval);\n              await bc.postMessage({\n                data: {\n                  url: this.state.url.href,\n                  message: \"\" // No need of a msg\n                }\n              });\n\n              resolve(this);\n              bc.close();\n            }\n          } catch (error) {\n            reject(error);\n            bc.close(); // Something went wrong. so, we close that window\n\n            this.close();\n          }\n        }); // We don't know if the other end is ready to receive this msg. So, we keep writing until it receives and sends back something\n\n        writeInterval = window.setInterval(() => {\n          bc.postMessage({\n            data: {\n              message: SETUP_COMPLETE\n            }\n          });\n        }, 200);\n      }\n    });\n  }\n  close() {\n    const {\n      communicationEngine\n    } = this.config;\n    communicationEngine.emit(\"notification\", {\n      method: COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW,\n      params: {\n        windowId: this.state.windowId\n      }\n    });\n  }\n}\n\n/*\nScenarios:\n1. Open a normal popup window and no communication with it - Use PopupHandler\n2. Open a popup window and communicate with it - Use PopupWithBcHandler (can initiate communication by waiting for window to open or not)\n\n3. If window is already opened, pass in windowId to the popup handler.\n   This will establish communication with the popup window and sends it a new url to redirect to\n\n\nIf you're trying to open a window and it gets blocked (happens if you're in iframe or delay b/w click and opening window),\nStreamWindow is invoked and it writes in a channel to display a message to the user\n\nOnce user clicks on that modal/dialog, we pre-open the window and pass in the windowId (goes to 3)\n*/\n\n/**\n * Handles popup window management.\n * For broadcast channel communication, use url with `instanceId` coded into state parameter.\n * This state parameter will be passed across redirects according to OAuth spec.\n */\n\nclass PopupHandler extends BaseController {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    }); // this.id = randomId()\n    // Add in dapp storage key to all popups as a hash parameter\n\n    this.defaultConfig = {\n      dappStorageKey: \"\",\n      features: getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW),\n      target: \"_blank\",\n      communicationEngine: null,\n      communicationWindowManager: null\n    };\n    this.defaultState = {\n      windowTimer: null,\n      window: null,\n      iClosedWindow: false,\n      windowId: \"\",\n      url: state.url\n    };\n    this.initialize();\n    this._setupTimer();\n  }\n  async open() {\n    // if window is already open\n    const {\n      target,\n      features,\n      dappStorageKey,\n      communicationEngine,\n      communicationWindowManager\n    } = this.config;\n    const {\n      windowId,\n      url\n    } = this.state;\n    if (dappStorageKey) {\n      const urlHashParams = new URLSearchParams(url.hash.slice(1));\n      urlHashParams.append(\"dappStorageKey\", dappStorageKey);\n      url.hash = urlHashParams.toString();\n      this.update({\n        url\n      });\n    } // No window has been pre-opened\n\n    if (!windowId) {\n      // try to open a window first\n      let localWindow = window.open(url.href, target, features);\n      if (!localWindow) {\n        // if it's blocked, open StreamWindow\n        localWindow = new StreamWindow({\n          config: {\n            communicationEngine,\n            communicationWindowManager\n          },\n          state: {\n            url\n          }\n        });\n        localWindow.open();\n      }\n      this.update({\n        window: localWindow\n      });\n      return;\n    } // A window has been pre-opened with a query parameter `windowId`\n\n    const localWindow = new StreamWindow({\n      config: {\n        communicationEngine,\n        communicationWindowManager\n      },\n      state: {\n        url,\n        windowId\n      }\n    });\n    this.update({\n      window: localWindow\n    });\n    await localWindow.open();\n  }\n  close() {\n    this.update({\n      iClosedWindow: true\n    });\n    const {\n      window\n    } = this.state;\n    if (window) window.close();\n  }\n  _setupTimer() {\n    const timer = window.setInterval(() => {\n      const {\n        window,\n        windowTimer,\n        iClosedWindow\n      } = this.state;\n      if (window && window.closed) {\n        if (windowTimer) clearInterval(windowTimer);\n        if (!iClosedWindow) {\n          this.emit(\"close\");\n        }\n        this.update({\n          iClosedWindow: false,\n          window: null\n        });\n      }\n      if (window === null && windowTimer) clearInterval(windowTimer);\n    }, 500);\n    this.update({\n      windowTimer: timer\n    });\n  }\n}\nclass PopupStoreChannel {\n  constructor(_ref) {\n    let {\n      instanceId,\n      handleLogout,\n      handleAccountImport,\n      handleNetworkChange,\n      handleSelectedAddressChange\n    } = _ref;\n    _defineProperty(this, \"handleLogout\", void 0);\n    _defineProperty(this, \"handleAccountImport\", void 0);\n    _defineProperty(this, \"handleNetworkChange\", void 0);\n    _defineProperty(this, \"handleSelectedAddressChange\", void 0);\n    _defineProperty(this, \"instanceId\", void 0);\n    this.instanceId = instanceId;\n    this.handleLogout = handleLogout;\n    this.handleAccountImport = handleAccountImport;\n    this.handleNetworkChange = handleNetworkChange;\n    this.handleSelectedAddressChange = handleSelectedAddressChange;\n  }\n  setupStoreChannels() {\n    this.logoutChannel();\n    this.importAccountChannel();\n    this.networkChangeChannel();\n    this.selectedAddressChangeChannel();\n  }\n  logoutChannel() {\n    const logoutChannel = new BroadcastChannel(\"\".concat(BROADCAST_CHANNELS.WALLET_LOGOUT_CHANNEL, \"_\").concat(this.instanceId), broadcastChannelOptions);\n    logoutChannel.addEventListener(\"message\", ev => {\n      var _ev$data;\n      log.info(\"received logout message\", ev);\n      if (!ev.error && ((_ev$data = ev.data) === null || _ev$data === void 0 ? void 0 : _ev$data.type) === BROADCAST_CHANNELS_MSGS.LOGOUT) {\n        log.info(\"Logging Out\");\n        this.handleLogout();\n      }\n    });\n  }\n  importAccountChannel() {\n    const walletAccountImportChannel = new BroadcastChannel(\"\".concat(BROADCAST_CHANNELS.WALLET_ACCOUNT_IMPORT_CHANNEL, \"_\").concat(this.instanceId), broadcastChannelOptions);\n    walletAccountImportChannel.addEventListener(\"message\", ev => {\n      var _ev$data2;\n      if (!ev.error && ((_ev$data2 = ev.data) === null || _ev$data2 === void 0 ? void 0 : _ev$data2.type) === BROADCAST_CHANNELS_MSGS.ACCOUNT_IMPORTED) {\n        var _ev$data3;\n        this.handleAccountImport((_ev$data3 = ev.data) === null || _ev$data3 === void 0 ? void 0 : _ev$data3.privKey);\n      }\n    });\n  }\n  networkChangeChannel() {\n    const walletAccountImportChannel = new BroadcastChannel(\"\".concat(BROADCAST_CHANNELS.WALLET_NETWORK_CHANGE_CHANNEL, \"_\").concat(this.instanceId), broadcastChannelOptions);\n    walletAccountImportChannel.addEventListener(\"message\", ev => {\n      var _ev$data4;\n      if (!ev.error && ((_ev$data4 = ev.data) === null || _ev$data4 === void 0 ? void 0 : _ev$data4.type) === BROADCAST_CHANNELS_MSGS.NETWORK_CHANGE) {\n        var _ev$data5;\n        this.handleNetworkChange((_ev$data5 = ev.data) === null || _ev$data5 === void 0 ? void 0 : _ev$data5.network);\n      }\n    });\n  }\n  selectedAddressChangeChannel() {\n    const walletAccountImportChannel = new BroadcastChannel(\"\".concat(BROADCAST_CHANNELS.WALLET_SELECTED_ADDRESS_CHANNEL, \"_\").concat(this.instanceId), broadcastChannelOptions);\n    walletAccountImportChannel.addEventListener(\"message\", ev => {\n      var _ev$data6;\n      if (!ev.error && ((_ev$data6 = ev.data) === null || _ev$data6 === void 0 ? void 0 : _ev$data6.type) === BROADCAST_CHANNELS_MSGS.SELECTED_ADDRESS_CHANGE) {\n        var _ev$data7;\n        this.handleSelectedAddressChange((_ev$data7 = ev.data) === null || _ev$data7 === void 0 ? void 0 : _ev$data7.selectedAddress);\n      }\n    });\n  }\n}\n\n/**\n * PopupWithBcHandler is a PopupHandler which uses broadcast channel to communicate with the popup window.\n */\n\nclass PopupWithBcHandler extends PopupHandler {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      instanceId\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    _defineProperty(this, \"bc\", void 0);\n    this.bc = new BroadcastChannel(instanceId, broadcastChannelOptions);\n  }\n  /**\n   * Receives the data from popup window and closes the window\n   * @param successExtraFn - Extra function to be called after the data is received\n   * @returns The data to be received\n   */\n\n  handle(successExtraFn) {\n    return new Promise((resolve, reject) => {\n      const closeListener = () => {\n        this.bc.close();\n        reject(new UserError(\"user closed popup\"));\n        this.removeListener(\"close\", closeListener);\n      };\n      this.on(\"close\", closeListener);\n      this.bc.addEventListener(\"message\", async ev => {\n        log.info(ev, \"receiving data on channel: \".concat(this.bc.name));\n        try {\n          const {\n            error,\n            data\n          } = ev;\n          if (error) {\n            reject(new Error(error));\n            return;\n          }\n          if (successExtraFn) await successExtraFn.call(this, data);\n          resolve(data);\n        } catch (error) {\n          reject(error);\n        } finally {\n          this.bc.close();\n          this.close();\n        }\n      });\n      this.open().then(() => {\n        log.info(\"opened window \".concat(this.bc.name)); // Opened window. yay.  let the bc events do their job\n\n        return undefined;\n      }).catch(err => {\n        log.error(err, \"something went wrong while opening window\");\n        reject(err);\n      });\n    });\n  }\n  /**\n   * Use this if we have to send large payloads which don't fit in query/hash params.\n   * Waits for ack that popup window is ready to receive data.\n   * Receives the data from popup window and closes the window\n   * @param payload - The data to be sent to the popup window once we have ack that window is ready to receive data\n   * @param successExtraFn - Extra function to be called after the data is received\n   * @returns The data to be received\n   */\n\n  handleWithHandshake(payload, successExtraFn) {\n    return new Promise((resolve, reject) => {\n      const closeListener = () => {\n        this.bc.close();\n        reject(new UserError(\"user closed popup\"));\n        this.removeListener(\"close\", closeListener);\n      };\n      this.on(\"close\", closeListener);\n      this.bc.addEventListener(\"message\", async ev => {\n        try {\n          log.info(ev, \"receiving data on channel: \".concat(this.bc.name));\n          const {\n            error,\n            data\n          } = ev;\n          if (error) {\n            reject(new Error(error));\n            return;\n          } // Do handshake\n\n          const {\n            type = \"\"\n          } = data;\n          if (type === POPUP_LOADED) {\n            // Hack with generic to use the same type for both send and receive\n            await this.bc.postMessage({\n              data: payload\n            });\n          } else if (type === POPUP_RESULT) {\n            if (successExtraFn) await successExtraFn.call(this, data);\n            resolve(data); // Must only close the bc after result is done\n\n            this.bc.close();\n            this.close();\n          }\n        } catch (error) {\n          reject(error);\n          this.bc.close();\n          this.close();\n        }\n      });\n      this.open().then(() => {\n        log.info(\"opened window \".concat(this.bc.name)); // Opened window. yay.  let the bc events do their job\n\n        return undefined;\n      }).catch(err => {\n        log.error(err, \"something went wrong while opening window\");\n        reject(err);\n      });\n    });\n  }\n}\nclass RedirectHandler {\n  constructor() {\n    _defineProperty(this, \"error\", void 0);\n    _defineProperty(this, \"finalQueryParams\", {});\n    _defineProperty(this, \"instanceParameters\", void 0);\n    _defineProperty(this, \"hashParameters\", void 0);\n    const {\n      hash\n    } = window.location;\n    const queryParameters = new URLSearchParams(window.location.search);\n    queryParameters.forEach((value, key) => {\n      this.finalQueryParams[key] = value;\n    });\n    const {\n      error,\n      instanceParameters,\n      hashParameters\n    } = handleRedirectParameters(hash, this.finalQueryParams);\n    this.error = error;\n    this.instanceParameters = instanceParameters;\n    this.hashParameters = hashParameters;\n  }\n  async handle() {\n    return new Promise((resolve, reject) => {\n      const {\n        finalQueryParams,\n        instanceParameters,\n        hashParameters,\n        error\n      } = this;\n      let bc;\n      try {\n        if (!finalQueryParams.windowId) {\n          bc = new BroadcastChannel(\"\".concat(BROADCAST_CHANNELS.REDIRECT_CHANNEL, \"_\").concat(instanceParameters.instanceId), broadcastChannelOptions);\n          bc.addEventListener(\"message\", async ev => {\n            if (ev.error) {\n              reject(ev.error);\n              window.close();\n            } else {\n              resolve();\n              bc.close();\n              log.info(\"posted\", {\n                finalQueryParams,\n                hashParameters,\n                instanceParameters\n              });\n            }\n          });\n          bc.postMessage({\n            data: {\n              instanceParams: instanceParameters,\n              hashParams: hashParameters,\n              queryParams: finalQueryParams\n            },\n            error\n          });\n          setTimeout(() => {\n            resolve();\n            window.location.href = window.location.origin + window.location.search + window.location.hash;\n          }, 5000);\n        } else {\n          bc = new BroadcastChannel(\"\".concat(finalQueryParams.windowId), broadcastChannelOptions);\n          bc.addEventListener(\"message\", async ev => {\n            const {\n              url,\n              message\n            } = ev.data;\n            if (url) {\n              resolve();\n              window.location.href = url;\n            } else if (message === SETUP_COMPLETE) {\n              await bc.postMessage({\n                data: {\n                  windowId: finalQueryParams.windowId,\n                  message: POPUP_LOADED\n                }\n              });\n            }\n            if (ev.error && ev.error !== \"\") {\n              log.error(ev.error);\n              resolve();\n              bc.close();\n            }\n          });\n        }\n      } catch (err) {\n        log.info(err, \"something went wrong\");\n        reject(err);\n        if (bc) bc.close();\n        window.close();\n      }\n    });\n  }\n}\nconst ACTIVITY_ACTION = {\n  ACTIVITY_ACTION_ALL: \"walletActivity.allTransactions\",\n  ACTIVITY_ACTION_SEND: \"walletActivity.send\",\n  ACTIVITY_ACTION_RECEIVE: \"walletActivity.receive\",\n  ACTIVITY_ACTION_TOPUP: \"walletActivity.topup\"\n};\nconst ACCOUNT_CATEGORY = {\n  NORMAL: \"normal\",\n  THRESHOLD: \"threshold\",\n  IMPORTED: \"imported\"\n};\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nconst DEFAULT_INTERVAL = 180 * 1000;\nconst DEFAULT_PREFERENCES = {\n  selectedCurrency: \"USD\",\n  theme: \"dark\",\n  locale: \"en-US\",\n  accountType: ACCOUNT_CATEGORY.NORMAL,\n  contacts: [],\n  jwtToken: \"\",\n  fetchedPastTx: [],\n  pastTransactions: [],\n  paymentTx: [],\n  defaultPublicAddress: \"\",\n  customTokens: [],\n  customNfts: [],\n  crashReport: true,\n  userInfo: {\n    aggregateVerifier: \"\",\n    email: \"\",\n    name: \"\",\n    profileImage: \"\",\n    typeOfLogin: LOGIN_PROVIDER.GOOGLE,\n    verifier: \"\",\n    verifierId: \"\"\n  }\n};\n/**\n * Controller that stores shared settings and exposes convenience methods\n */\n\nclass BasePreferencesController extends BaseController {\n  /**\n   * Name of this controller used during composition\n   */\n\n  /**\n   * Creates a PreferencesController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      defaultPreferences,\n      signAuthMessage\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    _defineProperty(this, \"name\", \"PreferencesController\");\n    _defineProperty(this, \"iframeOrigin\", void 0);\n    _defineProperty(this, \"signAuthMessage\", void 0);\n    _defineProperty(this, \"defaultPreferences\", void 0);\n    if (!config.api) {\n      throw new Error(\"PreferencesController - no api specified in config.\");\n    }\n    this.defaultState = {\n      identities: {},\n      selectedAddress: \"\",\n      lastErrorMessage: \"\",\n      lastSuccessMessage: \"\"\n    };\n    this.defaultConfig = {\n      api: config.api,\n      pollInterval: DEFAULT_INTERVAL\n    };\n    this.initialize();\n    this.defaultPreferences = _objectSpread$1(_objectSpread$1({}, DEFAULT_PREFERENCES), defaultPreferences);\n    this.signAuthMessage = signAuthMessage;\n  }\n  setIframeOrigin(origin) {\n    this.iframeOrigin = origin;\n  }\n  getAddressState(address) {\n    const selectedAddress = address || this.state.selectedAddress;\n    return this.state.identities[selectedAddress];\n  }\n  /**\n   * Sets selected address\n   *\n   * @param selectedAddress - casper account hash\n   */\n\n  setSelectedAddress(selectedAddress) {\n    this.update({\n      selectedAddress\n    });\n  }\n  async getUser(address) {\n    const user = await get(\"\".concat(this.config.api, \"/user?fetchTx=false\"), this.headers(address), {\n      useAPIKey: true\n    });\n    return user.data;\n  }\n  async createUser(params) {\n    const {\n      selectedCurrency,\n      theme,\n      verifier,\n      verifierId,\n      locale,\n      address\n    } = params;\n    const userPayload = {\n      default_currency: selectedCurrency,\n      theme,\n      verifier,\n      verifier_id: verifierId,\n      locale\n    };\n    await post(\"\".concat(this.config.api, \"/user\"), userPayload, this.headers(address), {\n      useAPIKey: true\n    });\n    this.updateState({\n      theme,\n      defaultPublicAddress: address,\n      selectedCurrency,\n      locale\n    }, address);\n  }\n  async storeUserLogin(params) {\n    const {\n      verifierId,\n      verifier,\n      options,\n      address\n    } = params;\n    if (!options.rehydrate) {\n      const browser = bowser.getParser(window.navigator.userAgent);\n      const specialBrowser = getCustomDeviceInfo();\n      const recordLoginPayload = {\n        os: browser.getOSName(),\n        os_version: browser.getOSVersion() || \"unidentified\",\n        browser: (specialBrowser === null || specialBrowser === void 0 ? void 0 : specialBrowser.browser) || browser.getBrowserName() || \"unidentified\",\n        browser_version: browser.getBrowserVersion() || \"unidentified\",\n        platform: browser.getPlatform().type || \"desktop\",\n        hostname: this.iframeOrigin,\n        verifier,\n        verifier_id: verifierId\n      };\n      await post(\"\".concat(this.config.api, \"/user/recordLogin\"), recordLoginPayload, this.headers(address), {\n        useAPIKey: true\n      });\n    }\n  }\n  async setCrashReport(isEnabled) {\n    var _this$getAddressState;\n    if (isEnabled === ((_this$getAddressState = this.getAddressState()) === null || _this$getAddressState === void 0 ? void 0 : _this$getAddressState.crashReport)) return true;\n    try {\n      await patch(\"\".concat(this.config.api, \"/user\"), {\n        enable_crash_reporter: isEnabled\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        crashReport: isEnabled\n      });\n      return true;\n    } catch (error) {\n      log.error(error);\n      return false;\n    }\n  }\n  async setUserTheme(theme) {\n    var _this$getAddressState2;\n    if (theme === ((_this$getAddressState2 = this.getAddressState()) === null || _this$getAddressState2 === void 0 ? void 0 : _this$getAddressState2.theme)) return true;\n    try {\n      await patch(\"\".concat(this.config.api, \"/user\"), {\n        theme\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        theme\n      });\n      return true;\n    } catch (error) {\n      log.error(error);\n      return false;\n    }\n  }\n  async setUserLocale(locale) {\n    var _this$getAddressState3;\n    if (locale === ((_this$getAddressState3 = this.getAddressState()) === null || _this$getAddressState3 === void 0 ? void 0 : _this$getAddressState3.locale)) return;\n    try {\n      await patch(\"\".concat(this.config.api, \"/user\"), {\n        locale\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        locale\n      });\n      return true;\n    } catch (error) {\n      log.error(\"unable to set locale\", error);\n      return false;\n    }\n  }\n  async setSelectedCurrency(payload) {\n    var _this$getAddressState4;\n    if (payload.selectedCurrency === ((_this$getAddressState4 = this.getAddressState()) === null || _this$getAddressState4 === void 0 ? void 0 : _this$getAddressState4.selectedCurrency)) return true;\n    try {\n      await patch(\"\".concat(this.config.api, \"/user\"), {\n        default_currency: payload.selectedCurrency\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        selectedCurrency: payload.selectedCurrency\n      });\n      return true;\n    } catch (error) {\n      log.error(error);\n      return false;\n    }\n  }\n  async addContact(contact) {\n    try {\n      var _this$getAddressState5;\n      const response = await post(\"\".concat(this.config.api, \"/contact\"), contact, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        contacts: [...(((_this$getAddressState5 = this.getAddressState()) === null || _this$getAddressState5 === void 0 ? void 0 : _this$getAddressState5.contacts) || []), response.data]\n      });\n      return true;\n    } catch (error) {\n      log.error(\"unable to add contact\", error);\n      return false;\n    }\n  }\n  async deleteContact(contactId) {\n    try {\n      var _this$getAddressState6;\n      const response = await remove(\"\".concat(this.config.api, \"/contact/\").concat(contactId), {}, this.headers(), {\n        useAPIKey: true\n      });\n      const finalContacts = (_this$getAddressState6 = this.getAddressState()) === null || _this$getAddressState6 === void 0 ? void 0 : _this$getAddressState6.contacts.filter(contact => contact.id !== response.data.id);\n      if (finalContacts) this.updateState({\n        contacts: [...finalContacts]\n      });\n      return true;\n    } catch (error) {\n      log.error(\"unable to delete contact\", error);\n      return false;\n    }\n  }\n  async revokeDiscord(idToken) {\n    try {\n      const resp = await post(\"\".concat(this.config.api, \"/revoke/discord\"), {\n        token: idToken\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      log.info(resp);\n    } catch (error) {\n      log.error(error);\n    }\n  }\n  async patchPastTx(body, address) {\n    try {\n      const response = await patch(\"\".concat(this.config.api, \"/transaction\"), body, this.headers(address), {\n        useAPIKey: true\n      });\n      log.info(\"successfully patched\", response);\n    } catch (error) {\n      log.error(\"unable to patch tx\", error);\n    }\n  }\n  async postPastTx(tx, address) {\n    try {\n      const response = await post(\"\".concat(this.config.api, \"/transaction\"), tx, this.headers(address), {\n        useAPIKey: true\n      });\n      log.info(\"successfully posted tx\", response);\n      return response;\n    } catch (error) {\n      log.error(error, \"unable to insert transaction\");\n    }\n  }\n  async getWalletOrders(address) {\n    try {\n      const response = await get(\"\".concat(this.config.api, \"/transaction\"), this.headers(address), {\n        useAPIKey: true\n      });\n      return response.success ? response.data ? response.data : [] : [];\n    } catch (error) {\n      log.error(\"unable to get wallet orders tx\", error);\n      return [];\n    }\n  }\n  async getTopUpOrders(address) {\n    try {\n      const response = await get(\"\".concat(this.config.commonApiHost, \"/transaction\"), this.headers(address), {\n        useAPIKey: true\n      });\n      return response.data || [];\n    } catch (error) {\n      log.error(\"unable to fetch past Top up orders\", error);\n    }\n  }\n  async getBillBoardData() {\n    try {\n      const response = await get(\"\".concat(this.config.api, \"/billboard\"), this.headers(), {\n        useAPIKey: true\n      });\n      return response.success ? response.data : [];\n    } catch (error) {\n      log.error(\"unable to get billboard data\", error);\n      return [];\n    }\n  }\n  async getMessageForSigning(publicAddress) {\n    const response = await post(\"\".concat(this.config.api, \"/auth/message\"), {\n      public_address: publicAddress\n    }, {}, {\n      useAPIKey: true\n    });\n    return response.message;\n  }\n  async getTwitterId(payload) {\n    const res = await get(\"\".concat(this.config.api, \"/twitter?screen_name=\").concat(payload.nick), this.headers(), {\n      useAPIKey: true\n    });\n    return \"\".concat(payload.typeOfLogin.toLowerCase(), \"|\").concat(res.data.toString());\n  }\n  async sendEmail(payload) {\n    return post(\"\".concat(this.config.api, \"/transaction/sendemail\"), payload.emailObject, this.headers(), {\n      useAPIKey: true\n    });\n  }\n  async refreshJwt() {\n    const address = this.state.selectedAddress;\n    const messageToSign = await this.getMessageForSigning(address);\n    if (!messageToSign.startsWith(this.config.signInPrefix)) throw new Error(\"Cannot sign on invalid message\");\n    const signedMessage = this.signAuthMessage(address, messageToSign);\n    const response = await post(\"\".concat(this.config.api, \"/auth/verify\"), {\n      public_address: address,\n      signed_message: signedMessage\n    }, {}, {\n      useAPIKey: true\n    });\n    this.updateState({\n      jwtToken: response.token\n    }, address);\n  }\n  async getDappList() {\n    try {\n      const response = await get(\"\".concat(this.config.api, \"/dapps\"), this.headers(), {\n        useAPIKey: true\n      });\n      return response.success ? response.data : [];\n    } catch (error) {\n      log.error(\"unable to get billboard data\", error);\n      return [];\n    }\n  }\n  async init(address, userInfo, jwtToken) {\n    let response = {\n      token: jwtToken\n    };\n    if (this.getAddressState(address)) return;\n    if (!jwtToken) {\n      const messageToSign = await this.getMessageForSigning(address);\n      if (!messageToSign.startsWith(this.config.signInPrefix)) throw new Error(\"Cannot sign on invalid message\");\n      const signedMessage = this.signAuthMessage(address, messageToSign);\n      response = await post(\"\".concat(this.config.api, \"/auth/verify\"), {\n        public_address: address,\n        signed_message: signedMessage\n      }, {}, {\n        useAPIKey: true\n      });\n    }\n    this.updateState({\n      jwtToken: response.token,\n      userInfo\n    }, address);\n  }\n  updateState(preferences, address) {\n    const selectedAddress = address || this.state.selectedAddress;\n    const currentState = this.getAddressState(selectedAddress) || cloneDeep(this.defaultPreferences);\n    const mergedState = _objectSpread$1(_objectSpread$1({}, currentState), preferences);\n    this.update({\n      identities: _objectSpread$1(_objectSpread$1({}, this.state.identities), {}, {\n        [selectedAddress]: mergedState\n      })\n    });\n    return mergedState;\n  }\n  headers(address) {\n    var _this$getAddressState7;\n    const selectedAddress = address || this.state.selectedAddress;\n    return {\n      headers: {\n        Authorization: \"Bearer \".concat(((_this$getAddressState7 = this.getAddressState(selectedAddress)) === null || _this$getAddressState7 === void 0 ? void 0 : _this$getAddressState7.jwtToken) || \"\"),\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      }\n    };\n  }\n}\n\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */\nvar TransactionStatus;\n(function (TransactionStatus) {\n  TransactionStatus[\"approved\"] = \"approved\";\n  TransactionStatus[\"cancelled\"] = \"cancelled\";\n  TransactionStatus[\"confirmed\"] = \"confirmed\";\n  TransactionStatus[\"failed\"] = \"failed\";\n  TransactionStatus[\"finalized\"] = \"finalized\";\n  TransactionStatus[\"processed\"] = \"processed\";\n  TransactionStatus[\"rejected\"] = \"rejected\";\n  TransactionStatus[\"signed\"] = \"signed\";\n  TransactionStatus[\"submitted\"] = \"submitted\";\n  TransactionStatus[\"unapproved\"] = \"unapproved\";\n  TransactionStatus[\"dropped\"] = \"dropped\";\n  TransactionStatus[\"expired\"] = \"expired\";\n})(TransactionStatus || (TransactionStatus = {}));\nconst TRANSACTION_TYPES = {\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\",\n  STANDARD_PAYMENT_TRANSACTION: \"payment_transaction\" // specific to chains like solana and casper\n};\n\nconst TX_EVENTS = {\n  TX_WARNING: \"tx:warning\",\n  TX_ERROR: \"tx:error\",\n  TX_FAILED: \"tx:failed\",\n  TX_CONFIRMED: \"tx:confirmed\",\n  TX_DROPPED: \"tx:dropped\",\n  TX_EXPIRED: \"tx:expired\",\n  TX_STATUS_UPDATE: \"tx:status_update\",\n  TX_UNAPPROVED: \"tx:unapproved\"\n};\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass BaseTransactionStateManager extends BaseController {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      getCurrentChainId\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    _defineProperty(this, \"getCurrentChainId\", void 0);\n    this.defaultConfig = {\n      txHistoryLimit: 40\n    };\n    this.defaultState = {\n      transactions: {},\n      unapprovedTxs: {},\n      currentNetworkTxsList: []\n    };\n    this.initialize();\n    this.getCurrentChainId = getCurrentChainId;\n  }\n  getUnapprovedTxList() {\n    const chainId = this.getCurrentChainId();\n    return pickBy(this.state.transactions, transaction => transaction.status === TransactionStatus.unapproved && transactionMatchesNetwork(transaction, chainId));\n  }\n  getTransaction(txId) {\n    const {\n      transactions\n    } = this.state;\n    return transactions[txId];\n  }\n  updateTransaction(txMeta) {\n    // commit txMeta to state\n    const txId = txMeta.id;\n    txMeta.updated_at = new Date().toISOString();\n    this.update({\n      transactions: _objectSpread(_objectSpread({}, this.state.transactions), {}, {\n        [txId]: txMeta\n      })\n    });\n  }\n  setTxStatusRejected(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.rejected);\n    this._deleteTransaction(txId);\n  }\n  /**\n   * The implementing controller can override this functionality and add custom logic + call super.()\n   */\n\n  setTxStatusUnapproved(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.unapproved);\n  }\n  setTxStatusApproved(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.approved);\n  }\n  setTxStatusSigned(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.signed);\n  }\n  setTxStatusSubmitted(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.submitted);\n  }\n  setTxStatusDropped(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.dropped);\n  }\n  setTxStatusExpired(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.expired);\n  }\n  setTxStatusConfirmed(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.confirmed);\n  }\n  setTxStatusFailed(txId, error_) {\n    const error = !error_ ? new Error(\"Internal torus failure\") : error_;\n    const txMeta = this.getTransaction(txId);\n    txMeta.error = error;\n    this.updateTransaction(txMeta);\n    this._setTransactionStatus(txId, TransactionStatus.failed);\n  }\n  /**\n   * Method to determine if the transaction is in a final state\n   * @param status - Transaction status\n   * @returns boolean if the transaction is in a final state\n   */\n\n  isFinalState(status) {\n    return status === TransactionStatus.rejected || status === TransactionStatus.submitted || status === TransactionStatus.confirmed || status === TransactionStatus.failed || status === TransactionStatus.cancelled || status === TransactionStatus.expired;\n  }\n  /**\n   * Filters out the unapproved transactions from state\n   */\n\n  clearUnapprovedTxs() {\n    this.update({\n      transactions: omitBy(this.state.transactions, transaction => transaction.status === TransactionStatus.unapproved)\n    });\n  }\n  /**\n   * will append new transactions to old txns.\n   */\n\n  _addTransactionsToState(transactions) {\n    this.update({\n      transactions: transactions.reduce((result, newTx) => {\n        result[newTx.id] = newTx;\n        return result;\n      }, this.state.transactions)\n    });\n  }\n  /**\n   * will set new txns, override existing if any in state.\n   */\n\n  _setTransactionsToState(transactions) {\n    this.update({\n      transactions: transactions.reduce((result, newTx) => {\n        result[newTx.id] = newTx;\n        return result;\n      }, {})\n    });\n  }\n  _deleteTransaction(targetTransactionId) {\n    const {\n      transactions\n    } = this.state;\n    delete transactions[targetTransactionId];\n    this.update({\n      transactions\n    });\n  }\n  _deleteTransactions(targetTransactionIds) {\n    const {\n      transactions\n    } = this.state;\n    targetTransactionIds.forEach(transactionId => {\n      delete transactions[transactionId];\n    });\n    this.update({\n      transactions\n    });\n  }\n  _setTransactionStatus(txId, status) {\n    const txMeta = this.getTransaction(txId);\n    if (!txMeta) {\n      return;\n    }\n    txMeta.status = status; // only updating status so no validation required on txn.\n\n    this.updateTransaction(txMeta);\n    this.emit(TX_EVENTS.TX_STATUS_UPDATE, {\n      txId,\n      status\n    });\n    if (this.isFinalState(status)) {\n      this.emit(\"\".concat(txMeta.id, \":finished\"), txMeta);\n    } else {\n      this.emit(\"\".concat(txMeta.id, \":\").concat(status), txId);\n    }\n  }\n}\nexport { ACCOUNT_CATEGORY, ACTIVITY_ACTION, ACTIVITY_ACTION_ALL, ACTIVITY_ACTION_RECEIVE, ACTIVITY_ACTION_SEND, ACTIVITY_ACTION_TOPUP, ACTIVITY_PERIOD_ALL, ACTIVITY_PERIOD_MONTH_ONE, ACTIVITY_PERIOD_MONTH_SIX, ACTIVITY_PERIOD_WEEK_ONE, ACTIVITY_STATUS_CANCELLED, ACTIVITY_STATUS_CANCELLING, ACTIVITY_STATUS_PENDING, ACTIVITY_STATUS_SUCCESSFUL, ACTIVITY_STATUS_UNSUCCESSFUL, BROADCAST_CHANNELS, BROADCAST_CHANNELS_MSGS, BaseBlockTracker, BaseController, BaseCurrencyController, BaseEmbedController, BaseKeyringController, BasePreferencesController, BaseTransactionStateManager, BroadcastChannelHandler, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, CommunicationWindowManager, DEFAULT_PREFERENCES, FEATURES_CONFIRM_WINDOW, FEATURES_DEFAULT_POPUP_WINDOW, FEATURES_DEFAULT_WALLET_WINDOW, FEATURES_PROVIDER_CHANGE_WINDOW, LOGIN_PROVIDER, PAYMENT_PROVIDER, POPUP_LOADED, POPUP_RESULT, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS, PopupHandler, PopupStoreChannel, PopupWithBcHandler, RedirectHandler, SETUP_COMPLETE, StreamWindow, TRANSACTION_TYPES, TX_EVENTS, TransactionStatus, UserError, addressSlicer, broadcastChannelOptions, concatSig, createChangeProviderMiddlewareMiddleware, createCommunicationMiddleware, createEventEmitterProxy, createFetchConfigFromReq, createFetchMiddleware, createGenericJRPCMiddleware, createLoggerMiddleware, createOriginMiddleware, createRandomId, createSwappableProxy, createTopupMiddleware, formatDate, formatSmallNumbers, formatTime, getCustomDeviceInfo, getPopupFeatures, getTxStatusText, handleRedirectParameters, hashMessage, intToHex, padWithZeroes, providerAsMiddleware, providerFromEngine, providerFromMiddleware, randomId, signMessage, significantDigits, timeout$1 as timeout, transactionMatchesNetwork };","map":{"version":3,"sources":["../src/BaseController.ts","../src/Block/BaseBlockTracker.ts","../src/createEventEmitterProxy.ts","../src/createSwappableProxy.ts","../src/Currency/BaseCurrencyController.ts","../src/Network/INetworkController.ts","../src/enums.ts","../src/Embed/CommunicationMethodMiddleware.ts","../src/Embed/BaseEmbedController.ts","../src/Embed/CommunicationWindowManager.ts","../src/interfaces.ts","../src/utils/txUtils.ts","../src/utils/utils.ts","../src/Keyring/BaseKeyringController.ts","../src/Network/createFetchMiddleware.ts","../src/Network/createLoggerMiddleware.ts","../src/Network/createOriginMiddleware.ts","../src/Popup/BroadcastChannelHandler.ts","../src/Popup/StreamWindow.ts","../src/Popup/PopupHandler.ts","../src/Popup/PopupStoreChannel.ts","../src/Popup/PopupWithBcHandler.ts","../src/Popup/RedirectHandler.ts","../src/Preferences/IPreferencesController.ts","../src/Preferences/BasePreferencesController.ts","../src/Transaction/ITransactionController.ts","../src/Transaction/BaseTransactionStateController.ts"],"names":["BaseController","SafeEventEmitter","defaultConfig","defaultState","constructor","config","state","initialState","initialConfig","internalConfig","internalState","configure","overwrite","fullUpdate","Object","assign","key","update","emit","initialize","sec","calculateSum","accumulator","currentValue","blockTrackerEvents","BaseBlockTracker","_currentBlock","idempotencyKey","_isRunning","blockResetDuration","_onNewListener","bind","_onRemoveListener","_resetCurrentBlock","_setupInternalEvents","isRunning","getCurrentBlock","getLatestBlock","latestBlock","Promise","resolve","once","newState","removeAllListeners","eventName","_start","_end","_newPotentialLatest","newBlock","currentBlock","_setCurrentBlock","removeListener","on","_maybeStart","_getBlockTrackerEventCount","_maybeEnd","_cancelBlockResetTimeout","_setupBlockResetTimeout","map","listenerCount","reduce","oldBlock","_blockResetTimeout","setTimeout","unref","clearTimeout","filterNoop","internalEvents","externalEventFilter","name","includes","getRawListeners","eventEmitter","rawListeners","createEventEmitterProxy","initialTarget","opts","finalOpts","eventFilter","Error","target","setTarget","newTarget","oldTarget","eventNames","filter","forEach","handler","proxy","Proxy","get","_","set","value","createSwappableProxy","POLLING_INTERVAL","BaseCurrencyController","currentCurrency","conversionRate","conversionDate","nativeCurrency","pollInterval","getNativeCurrency","setNativeCurrency","ticker","getCurrentCurrency","setCurrentCurrency","getConversionRate","setConversionRate","getConversionDate","setConversionDate","createRandomId","getCreateRandomId","providerFromEngine","engine","provider","sendAsync","req","res","handle","error","result","send","callback","message","request","args","id","jsonrpc","providerFromMiddleware","middleware","JRPCEngine","push","providerAsMiddleware","_next","end","providerRes","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","POPUP_LOADED","POPUP_RESULT","SETUP_COMPLETE","ACTIVITY_ACTION_ALL","ACTIVITY_ACTION_SEND","ACTIVITY_ACTION_RECEIVE","ACTIVITY_ACTION_TOPUP","ACTIVITY_PERIOD_ALL","ACTIVITY_PERIOD_WEEK_ONE","ACTIVITY_PERIOD_MONTH_ONE","ACTIVITY_PERIOD_MONTH_SIX","ACTIVITY_STATUS_SUCCESSFUL","ACTIVITY_STATUS_UNSUCCESSFUL","ACTIVITY_STATUS_PENDING","ACTIVITY_STATUS_CANCELLED","ACTIVITY_STATUS_CANCELLING","COMMUNICATION_NOTIFICATIONS","IFRAME_STATUS","CREATE_WINDOW","CLOSE_WINDOW","USER_LOGGED_IN","USER_LOGGED_OUT","COMMUNICATION_JRPC_METHODS","LOGOUT","WALLET_INSTANCE_ID","USER_INFO","SET_PROVIDER","TOPUP","OPENED_WINDOW","CLOSED_WINDOW","GET_PROVIDER_STATE","LOGIN_WITH_PRIVATE_KEY","PROVIDER_JRPC_METHODS","PROVIDER_NOTIFICATIONS","ACCOUNTS_CHANGED","CHAIN_CHANGED","UNLOCK_STATE_CHANGED","BROADCAST_CHANNELS","REDIRECT_CHANNEL","PROVIDER_CHANGE_CHANNEL","TRANSACTION_CHANNEL","MESSAGE_CHANNEL","WALLET_LOGOUT_CHANNEL","WALLET_SELECTED_ADDRESS_CHANNEL","WALLET_NETWORK_CHANGE_CHANNEL","WALLET_ACCOUNT_IMPORT_CHANNEL","BROADCAST_CHANNELS_MSGS","ACCOUNT_IMPORTED","SELECTED_ADDRESS_CHANGE","NETWORK_CHANGE","createChangeProviderMiddlewareMiddleware","changeProvider","createAsyncMiddleware","response","next","method","createTopupMiddleware","topup","createGenericJRPCMiddleware","targetMethod","undefined","createCommunicationMiddleware","providerHandlers","getUserInfo","getWalletInstanceId","logout","setIFrameStatus","handleWindowRpc","getProviderState","loginWithPrivateKey","mergeMiddleware","createScaffoldMiddleware","BaseEmbedController","buttonPosition","isIFrameFullScreen","apiKey","oauthModalVisibility","loginInProgress","dappMetadata","icon","initializeProvider","handlers","communicationMiddleware","communicationProvider","setCommunicationProvider","_communicationProviderProxy","CommunicationWindowManager","params","windowId","LOGIN_PROVIDER","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","LINE","GITHUB","KAKAO","LINKEDIN","TWITTER","WEIBO","WECHAT","EMAIL_PASSWORDLESS","PAYMENT_PROVIDER","MOONPAY","WYRE","RAMPNETWORK","XANPOOL","MERCURYO","TRANSAK","getTxStatusText","txStatus","intToHex","i","hex","toString","randomId","Math","random","slice","padWithZeroes","hexString","targetLength","test","String","prototype","padStart","call","concatSig","v","r","s","rSig","fromSigned","sSig","vSig","bufferToInt","rStr","toUnsigned","sStr","vStr","stripHexPrefix","addHexPrefix","concat","timeout","duration","timeoutRef","window","formatSmallNumbers","number","currency","noTilde","finalNumber","BigNumber","isBigNumber","toNumber","Number","isFinite","toLowerCase","parseFloat","toFixed","tilde","toUpperCase","addressSlicer","address","sliceLength","length","significantDigits","perc","length_","input","isZero","times","depth","gte","ceil","log10","div","shift","pow","roundedNumber","round","formatDate","inputDate","monthList","date","Date","day","getDate","month","getMonth","year","getFullYear","formatTime","time","toTimeString","transactionMatchesNetwork","transaction","chainId","hashMessage","bufferedMessage","Buffer","from","el","hashPersonalMessage","signMessage","privateKey","data","privKey","msgSig","ecsign","rawMsgSig","intToBuffer","getPopupFeatures","w","h","dualScreenLeft","screenLeft","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","systemZoom","left","abs","top","features","broadcastChannelOptions","webWorkerSupport","getCustomDeviceInfo","navigator","brave","browser","UserError","handleRedirectParameters","hash","queryParameters","hashParameters","hashUrl","URL","location","origin","searchParams","instanceParameters","keys","JSON","parse","atob","decodeURIComponent","error_description","BaseKeyringController","wallets","signAuthMessage","keyring","find","x","hashedMessage","rawMessageSig","RETRIABLE_ERRORS","checkForHttpErrors","fetchRes","status","ethErrors","rpc","methodNotFound","internal","parseResponse","body","createFetchConfigFromReq","rpcTarget","originHttpHeaderKey","parsedUrl","payload","originDomain","serializedPayload","stringify","fetchParams","headers","Accept","fetchUrl","href","createFetchMiddleware","maxAttempts","retryInterval","attempt","fetch","fetchBody","json","err","errMsg","isRetriable","some","phrase","createLoggerMiddleware","options","loggerMiddleware","log","warn","isTorusInternal","info","createOriginMiddleware","originMiddleware","BroadcastChannelHandler","channelPrefix","URLSearchParams","search","instanceId","channel","bc","BroadcastChannel","getMessageFromChannel","reject","addEventListener","ev","close","postMessage","type","StreamWindow","open","communicationEngine","communicationWindowManager","closed","url","writeInterval","clearInterval","setInterval","PopupHandler","dappStorageKey","windowTimer","iClosedWindow","_setupTimer","urlHashParams","append","localWindow","timer","PopupStoreChannel","handleLogout","handleAccountImport","handleNetworkChange","handleSelectedAddressChange","setupStoreChannels","logoutChannel","importAccountChannel","networkChangeChannel","selectedAddressChangeChannel","walletAccountImportChannel","network","selectedAddress","PopupWithBcHandler","successExtraFn","closeListener","then","catch","handleWithHandshake","RedirectHandler","finalQueryParams","instanceParams","hashParams","queryParams","ACTIVITY_ACTION","ACCOUNT_CATEGORY","NORMAL","THRESHOLD","IMPORTED","DEFAULT_INTERVAL","DEFAULT_PREFERENCES","selectedCurrency","theme","locale","accountType","contacts","jwtToken","fetchedPastTx","pastTransactions","paymentTx","defaultPublicAddress","customTokens","customNfts","crashReport","userInfo","aggregateVerifier","email","profileImage","typeOfLogin","verifier","verifierId","BasePreferencesController","defaultPreferences","api","identities","lastErrorMessage","lastSuccessMessage","setIframeOrigin","iframeOrigin","getAddressState","setSelectedAddress","getUser","user","useAPIKey","createUser","userPayload","default_currency","verifier_id","post","updateState","storeUserLogin","rehydrate","bowser","getParser","userAgent","specialBrowser","recordLoginPayload","os","getOSName","os_version","getOSVersion","getBrowserName","browser_version","getBrowserVersion","platform","getPlatform","hostname","setCrashReport","isEnabled","patch","enable_crash_reporter","setUserTheme","setUserLocale","setSelectedCurrency","addContact","contact","deleteContact","contactId","remove","finalContacts","revokeDiscord","idToken","resp","token","patchPastTx","postPastTx","tx","getWalletOrders","success","getTopUpOrders","commonApiHost","getBillBoardData","getMessageForSigning","publicAddress","public_address","getTwitterId","nick","sendEmail","emailObject","refreshJwt","messageToSign","startsWith","signInPrefix","signedMessage","signed_message","getDappList","init","preferences","currentState","cloneDeep","mergedState","Authorization","TransactionStatus","TRANSACTION_TYPES","CONTRACT_INTERACTION","DEPLOY_CONTRACT","STANDARD_TRANSACTION","STANDARD_PAYMENT_TRANSACTION","TX_EVENTS","TX_WARNING","TX_ERROR","TX_FAILED","TX_CONFIRMED","TX_DROPPED","TX_EXPIRED","TX_STATUS_UPDATE","TX_UNAPPROVED","BaseTransactionStateManager","getCurrentChainId","txHistoryLimit","transactions","unapprovedTxs","currentNetworkTxsList","getUnapprovedTxList","pickBy","unapproved","getTransaction","txId","updateTransaction","txMeta","updated_at","toISOString","setTxStatusRejected","_setTransactionStatus","rejected","_deleteTransaction","setTxStatusUnapproved","setTxStatusApproved","approved","setTxStatusSigned","signed","setTxStatusSubmitted","submitted","setTxStatusDropped","dropped","setTxStatusExpired","expired","setTxStatusConfirmed","confirmed","setTxStatusFailed","error_","failed","isFinalState","cancelled","clearUnapprovedTxs","omitBy","_addTransactionsToState","newTx","_setTransactionsToState","targetTransactionId","_deleteTransactions","targetTransactionIds","transactionId"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { SafeEventEmitter, JRPCEngine, createAsyncMiddleware, mergeMiddleware, createScaffoldMiddleware } from '@toruslabs/openlogin-jrpc';\nimport getCreateRandomId from 'json-rpc-random-id';\nimport { BigNumber } from 'bignumber.js';\nimport { fromSigned, bufferToInt, toUnsigned, stripHexPrefix, addHexPrefix, hashPersonalMessage, ecsign, intToBuffer } from 'ethereumjs-util';\nimport { ethErrors } from 'eth-rpc-errors';\nimport log from 'loglevel';\nimport { BroadcastChannel } from 'broadcast-channel';\nimport { get, post, patch, remove } from '@toruslabs/http-helpers';\nimport bowser from 'bowser';\nimport { cloneDeep, pickBy, omitBy } from 'lodash';\n\nfunction ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/**\n * Controller class that provides configuration, state management, and subscriptions\n */\n\nclass BaseController extends SafeEventEmitter {\n  /**\n   * Default options used to configure this controller\n   */\n\n  /**\n   * Default state set on this controller\n   */\n\n  /**\n   * Determines if listeners are notified of state changes\n   */\n\n  /**\n   * Name of this controller used during composition\n   */\n\n  /**\n   * Creates a BaseController instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(_ref) {\n    let {\n      config = {},\n      state = {}\n    } = _ref;\n    super(); // Use assign since generics can't be spread: https://git.io/vpRhY\n\n    _defineProperty(this, \"defaultConfig\", {});\n\n    _defineProperty(this, \"defaultState\", {});\n\n    _defineProperty(this, \"disabled\", false);\n\n    _defineProperty(this, \"name\", \"BaseController\");\n\n    _defineProperty(this, \"initialConfig\", void 0);\n\n    _defineProperty(this, \"initialState\", void 0);\n\n    _defineProperty(this, \"internalConfig\", this.defaultConfig);\n\n    _defineProperty(this, \"internalState\", this.defaultState);\n\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n  /**\n   * Retrieves current controller configuration options\n   *\n   * @returns - Current configuration\n   */\n\n\n  get config() {\n    return this.internalConfig;\n  }\n  /**\n   * Retrieves current controller state\n   *\n   * @returns - Current state\n   */\n\n\n  get state() {\n    return this.internalState;\n  }\n  /**\n   * Updates controller configuration\n   *\n   * @param config - New configuration options\n   * @param overwrite - Overwrite config instead of merging\n   * @param fullUpdate - Boolean that defines if the update is partial or not\n   */\n\n\n  configure(config) {\n    let overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let fullUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (fullUpdate) {\n      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n\n      for (const key in this.internalConfig) {\n        if (typeof this.internalConfig[key] !== \"undefined\") {\n          this[key] = this.internalConfig[key];\n        }\n      }\n    } else {\n      for (const key in config) {\n        /* istanbul ignore else */\n        if (typeof this.internalConfig[key] !== \"undefined\") {\n          this.internalConfig[key] = config[key];\n          this[key] = config[key];\n        }\n      }\n    }\n  }\n  /**\n   * Updates controller state\n   *\n   * @param state - New state\n   * @param overwrite - Overwrite state instead of merging\n   */\n\n\n  update(state) {\n    let overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.internalState = overwrite ? _objectSpread$3({}, state) : _objectSpread$3(_objectSpread$3({}, this.internalState), state);\n    this.emit(\"store\", this.internalState);\n  }\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns - This controller instance\n   */\n\n\n  initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n\n}\n\nconst sec = 1000;\n\nconst calculateSum = (accumulator, currentValue) => accumulator + currentValue;\n\nconst blockTrackerEvents = [\"sync\", \"latest\"];\nclass BaseBlockTracker extends BaseController {\n  constructor(_ref) {\n    let {\n      config = {},\n      state = {}\n    } = _ref;\n    super({\n      config,\n      state\n    }); // config\n\n    _defineProperty(this, \"name\", \"BaseBlockTracker\");\n\n    _defineProperty(this, \"_blockResetTimeout\", void 0);\n\n    this.defaultState = {\n      _currentBlock: {\n        idempotencyKey: \"\"\n      },\n      _isRunning: false\n    };\n    this.defaultConfig = {\n      blockResetDuration: 20 * sec\n    };\n    this.initialize(); // bind functions for internal use\n\n    this._onNewListener = this._onNewListener.bind(this);\n    this._onRemoveListener = this._onRemoveListener.bind(this);\n    this._resetCurrentBlock = this._resetCurrentBlock.bind(this); // listen for handler changes\n\n    this._setupInternalEvents();\n  }\n\n  isRunning() {\n    return this.state._isRunning;\n  }\n\n  getCurrentBlock() {\n    return this.state._currentBlock;\n  }\n\n  async getLatestBlock() {\n    // return if available\n    if (this.state._currentBlock) {\n      return this.state._currentBlock;\n    } // wait for a new latest block\n\n\n    const latestBlock = await new Promise(resolve => this.once(\"latest\", newState => {\n      if (newState._currentBlock) {\n        resolve(newState._currentBlock);\n      }\n    })); // return newly set current block\n\n    return latestBlock;\n  } // dont allow module consumer to remove our internal event listeners\n\n\n  removeAllListeners(eventName) {\n    if (eventName) {\n      super.removeAllListeners(eventName);\n    } else {\n      super.removeAllListeners();\n    } // re-add internal events\n\n\n    this._setupInternalEvents(); // trigger stop check just in case\n\n\n    this._onRemoveListener();\n\n    return this;\n  }\n  /**\n   * To be implemented in subclass.\n   */\n\n\n  _start() {// default behavior is noop\n  }\n  /**\n   * To be implemented in subclass.\n   */\n\n\n  _end() {// default behavior is noop\n  }\n\n  _newPotentialLatest(newBlock) {\n    const currentBlock = this.state._currentBlock; // only update if blok number is higher\n\n    if (currentBlock && newBlock.idempotencyKey === currentBlock.idempotencyKey) {\n      return;\n    }\n\n    this._setCurrentBlock(newBlock);\n  }\n\n  _setupInternalEvents() {\n    // first remove listeners for idempotency\n    this.removeListener(\"newListener\", this._onNewListener);\n    this.removeListener(\"removeListener\", this._onRemoveListener); // then add them\n\n    this.on(\"removeListener\", this._onRemoveListener);\n    this.on(\"newListener\", this._onNewListener);\n  }\n\n  _onNewListener() {\n    this._maybeStart();\n  }\n\n  _onRemoveListener() {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) {\n      return;\n    }\n\n    this._maybeEnd();\n  }\n\n  _maybeStart() {\n    if (this.state._isRunning) {\n      return;\n    }\n\n    this.state._isRunning = true; // cancel setting latest block to stale\n\n    this._cancelBlockResetTimeout();\n\n    this._start();\n  }\n\n  _maybeEnd() {\n    if (!this.state._isRunning) {\n      return;\n    }\n\n    this.state._isRunning = false;\n\n    this._setupBlockResetTimeout();\n\n    this._end();\n  }\n\n  _getBlockTrackerEventCount() {\n    return blockTrackerEvents.map(eventName => this.listenerCount(eventName)).reduce(calculateSum);\n  }\n\n  _setCurrentBlock(newBlock) {\n    const oldBlock = this.state._currentBlock;\n    this.update({\n      _currentBlock: newBlock\n    });\n    this.emit(\"latest\", newBlock);\n    this.emit(\"sync\", {\n      oldBlock,\n      newBlock\n    });\n  }\n\n  _setupBlockResetTimeout() {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout(); // clear latest block when stale\n\n\n    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this.config.blockResetDuration); // nodejs - dont hold process open\n\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref();\n    }\n  }\n\n  _cancelBlockResetTimeout() {\n    if (this._blockResetTimeout) {\n      clearTimeout(this._blockResetTimeout);\n    }\n  }\n\n  _resetCurrentBlock() {\n    this.update({\n      _currentBlock: {\n        idempotencyKey: \"\"\n      }\n    });\n  }\n\n}\n\nconst filterNoop = () => true;\n\nconst internalEvents = [\"newListener\", \"removeListener\"];\n\nconst externalEventFilter = name => !internalEvents.includes(name);\n\nfunction getRawListeners(eventEmitter, name) {\n  // prefer native\n  return eventEmitter.rawListeners(name);\n}\n\nfunction createEventEmitterProxy(initialTarget, opts) {\n  // parse options\n  const finalOpts = opts || {};\n  let eventFilter = finalOpts.eventFilter || filterNoop;\n  if (typeof eventFilter === \"string\" && eventFilter === \"skipInternal\") eventFilter = externalEventFilter;\n  if (typeof eventFilter !== \"function\") throw new Error(\"createEventEmitterProxy - Invalid eventFilter\");\n  let target = initialTarget;\n\n  let setTarget = newTarget => {\n    const oldTarget = target;\n    target = newTarget;\n    oldTarget.eventNames().filter(eventFilter).forEach(name => {\n      getRawListeners(oldTarget, name).forEach(handler => newTarget.on(name, handler));\n    }); // remove old listeners\n\n    oldTarget.removeAllListeners();\n  };\n\n  const proxy = new Proxy({}, {\n    get: (_, name) => {\n      // override `setTarget` access\n      if (name === \"setTarget\") return setTarget;\n      return target[name];\n    },\n    set: (_, name, value) => {\n      // allow `setTarget` overrides\n      if (name === \"setTarget\") {\n        setTarget = value;\n        return true;\n      }\n\n      target[name] = value;\n      return true;\n    }\n  });\n  return proxy;\n}\n\nfunction createSwappableProxy(initialTarget) {\n  let target = initialTarget;\n\n  let setTarget = newTarget => {\n    target = newTarget;\n  };\n\n  const proxy = new Proxy({}, {\n    get: (_, name) => {\n      // override `setTarget` access\n      if (name === \"setTarget\") return setTarget;\n      return target[name];\n    },\n    set: (_, name, value) => {\n      // allow `setTarget` overrides\n      if (name === \"setTarget\") {\n        setTarget = value;\n        return true;\n      }\n\n      target[name] = value;\n      return true;\n    }\n  });\n  return proxy;\n}\n\nconst POLLING_INTERVAL = 600000;\nclass BaseCurrencyController extends BaseController {\n  constructor(_ref) {\n    let {\n      config = {},\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    this.defaultState = {\n      currentCurrency: \"usd\",\n      conversionRate: 0,\n      conversionDate: \"N/A\",\n      nativeCurrency: \"ETH\"\n    };\n    this.defaultConfig = {\n      pollInterval: POLLING_INTERVAL\n    };\n    this.initialize();\n  } //\n  // PUBLIC METHODS\n  //\n\n\n  getNativeCurrency() {\n    return this.state.nativeCurrency;\n  }\n\n  setNativeCurrency(nativeCurrency) {\n    this.update({\n      nativeCurrency,\n      ticker: nativeCurrency\n    });\n  }\n\n  getCurrentCurrency() {\n    return this.state.currentCurrency;\n  }\n\n  setCurrentCurrency(currentCurrency) {\n    this.update({\n      currentCurrency\n    });\n  }\n  /**\n   * A getter for the conversionRate property\n   *\n   * @returns The conversion rate from ETH to the selected currency.\n   *\n   */\n\n\n  getConversionRate() {\n    return this.state.conversionRate;\n  }\n\n  setConversionRate(conversionRate) {\n    this.update({\n      conversionRate\n    });\n  }\n  /**\n   * A getter for the conversionDate property\n   *\n   * @returns The date at which the conversion rate was set. Expressed in milliseconds since midnight of\n   * January 1, 1970\n   *\n   */\n\n\n  getConversionDate() {\n    return this.state.conversionDate;\n  }\n\n  setConversionDate(conversionDate) {\n    this.update({\n      conversionDate\n    });\n  }\n\n}\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst createRandomId = getCreateRandomId();\nfunction providerFromEngine(engine) {\n  const provider = new SafeEventEmitter(); // handle both rpc send methods\n\n  provider.sendAsync = async req => {\n    const res = await engine.handle(req);\n\n    if (res.error) {\n      throw new Error(res.error);\n    }\n\n    return res.result;\n  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  provider.send = (req, callback) => {\n    if (typeof callback !== \"function\") {\n      throw new Error('Must provide callback to \"send\" method.');\n    }\n\n    engine.handle(req, callback);\n  }; // forward notifications\n\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      provider.emit(\"data\", null, message);\n    });\n  }\n\n  provider.request = async args => {\n    const req = _objectSpread$2(_objectSpread$2({}, args), {}, {\n      id: createRandomId(),\n      jsonrpc: \"2.0\"\n    });\n\n    const res = await provider.sendAsync(req);\n    return res;\n  };\n\n  return provider;\n}\nfunction providerFromMiddleware(middleware) {\n  const engine = new JRPCEngine();\n  engine.push(middleware);\n  const provider = providerFromEngine(engine);\n  return provider;\n}\nfunction providerAsMiddleware(provider) {\n  return async (req, res, _next, end) => {\n    // send request to provider\n    try {\n      const providerRes = await provider.sendAsync(req);\n      res.result = providerRes;\n      return end();\n    } catch (error) {\n      return end(error.message);\n    }\n  };\n}\n\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 700,\n  width: 450\n};\nconst POPUP_LOADED = \"popup_loaded\";\nconst POPUP_RESULT = \"popup_result\";\nconst SETUP_COMPLETE = \"setup_complete\";\nconst ACTIVITY_ACTION_ALL = \"walletActivity.allTransactions\";\nconst ACTIVITY_ACTION_SEND = \"walletActivity.send\";\nconst ACTIVITY_ACTION_RECEIVE = \"walletActivity.receive\";\nconst ACTIVITY_ACTION_TOPUP = \"walletActivity.topup\";\nconst ACTIVITY_PERIOD_ALL = \"walletActivity.all\";\nconst ACTIVITY_PERIOD_WEEK_ONE = \"walletActivity.lastOneWeek\";\nconst ACTIVITY_PERIOD_MONTH_ONE = \"walletActivity.lastOneMonth\";\nconst ACTIVITY_PERIOD_MONTH_SIX = \"walletActivity.lastSixMonts\";\nconst ACTIVITY_STATUS_SUCCESSFUL = \"walletActivity.successful\";\nconst ACTIVITY_STATUS_UNSUCCESSFUL = \"walletActivity.unsuccessful\";\nconst ACTIVITY_STATUS_PENDING = \"walletActivity.pending\";\nconst ACTIVITY_STATUS_CANCELLED = \"walletActivity.cancelled\";\nconst ACTIVITY_STATUS_CANCELLING = \"walletActivity.cancelling\";\nconst COMMUNICATION_NOTIFICATIONS = {\n  IFRAME_STATUS: \"iframe_status\",\n  // Tell embed to create the window\n  CREATE_WINDOW: \"create_window\",\n  // Tell embed to close the window\n  CLOSE_WINDOW: \"close_window\",\n  USER_LOGGED_IN: \"user_logged_in\",\n  USER_LOGGED_OUT: \"user_logged_out\"\n};\nconst COMMUNICATION_JRPC_METHODS = {\n  LOGOUT: \"logout\",\n  WALLET_INSTANCE_ID: \"wallet_instance_id\",\n  USER_INFO: \"user_info\",\n  SET_PROVIDER: \"set_provider\",\n  TOPUP: \"topup\",\n  IFRAME_STATUS: \"iframe_status\",\n  // embed has opened the window as requested\n  OPENED_WINDOW: \"opened_window\",\n  // user has closed the window from embed's side\n  CLOSED_WINDOW: \"closed_window\",\n  GET_PROVIDER_STATE: \"get_provider_state\",\n  LOGIN_WITH_PRIVATE_KEY: \"login_with_private_key\"\n};\nconst PROVIDER_JRPC_METHODS = {\n  GET_PROVIDER_STATE: \"wallet_get_provider_state\"\n};\nconst PROVIDER_NOTIFICATIONS = {\n  ACCOUNTS_CHANGED: \"wallet_accounts_changed\",\n  CHAIN_CHANGED: \"wallet_chain_changed\",\n  UNLOCK_STATE_CHANGED: \"wallet_unlock_state_changed\"\n};\nconst BROADCAST_CHANNELS = {\n  REDIRECT_CHANNEL: \"redirect_channel\",\n  PROVIDER_CHANGE_CHANNEL: \"torus_provider_change_channel\",\n  TRANSACTION_CHANNEL: \"torus_channel\",\n  MESSAGE_CHANNEL: \"torus_message_channel\",\n  WALLET_LOGOUT_CHANNEL: \"wallet_logout_channel\",\n  WALLET_SELECTED_ADDRESS_CHANNEL: \"wallet_selected_address_channel\",\n  WALLET_NETWORK_CHANGE_CHANNEL: \"wallet_network_change_channel\",\n  WALLET_ACCOUNT_IMPORT_CHANNEL: \"wallet_account_import_channel\"\n};\nconst BROADCAST_CHANNELS_MSGS = {\n  LOGOUT: \"logout\",\n  ACCOUNT_IMPORTED: \"account_imported\",\n  SELECTED_ADDRESS_CHANGE: \"selected_address_change\",\n  NETWORK_CHANGE: \"network_change\"\n};\n\nfunction createChangeProviderMiddlewareMiddleware(_ref) {\n  let {\n    changeProvider\n  } = _ref;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== COMMUNICATION_JRPC_METHODS.SET_PROVIDER) return next();\n    if (!changeProvider) throw new Error(\"CommunicationMiddleware - opts.changeProvider not provided\");\n    response.result = await changeProvider(request);\n  });\n}\nfunction createTopupMiddleware(_ref2) {\n  let {\n    topup\n  } = _ref2;\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== COMMUNICATION_JRPC_METHODS.TOPUP) return next();\n    if (!topup) throw new Error(\"CommunicationMiddleware - opts.topup not provided\");\n    response.result = await topup(request);\n  });\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const {\n      method\n    } = request;\n    if (method !== targetMethod) return next();\n    if (!handler) throw new Error(\"CommunicationMiddleware - \".concat(targetMethod, \" not provided\"));\n    const result = await handler(request);\n\n    if (!result) {\n      return next();\n    }\n\n    response.result = result;\n    return undefined;\n  });\n}\nfunction createCommunicationMiddleware(providerHandlers) {\n  const {\n    getUserInfo,\n    getWalletInstanceId,\n    topup,\n    logout,\n    changeProvider,\n    setIFrameStatus,\n    handleWindowRpc,\n    getProviderState,\n    loginWithPrivateKey\n  } = providerHandlers;\n  return mergeMiddleware([createChangeProviderMiddlewareMiddleware({\n    changeProvider\n  }), createTopupMiddleware({\n    topup\n  }), createScaffoldMiddleware({\n    [COMMUNICATION_JRPC_METHODS.LOGOUT]: logout,\n    [COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID]: getWalletInstanceId,\n    [COMMUNICATION_JRPC_METHODS.USER_INFO]: getUserInfo,\n    [COMMUNICATION_JRPC_METHODS.IFRAME_STATUS]: setIFrameStatus,\n    // Do this in the orchestrator because communicationWindowManager needs to be passed into PopupHandlers\n    [COMMUNICATION_JRPC_METHODS.OPENED_WINDOW]: handleWindowRpc,\n    [COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW]: handleWindowRpc,\n    [COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE]: getProviderState\n  }), createGenericJRPCMiddleware(COMMUNICATION_JRPC_METHODS.LOGIN_WITH_PRIVATE_KEY, loginWithPrivateKey)]);\n}\n\nclass BaseEmbedController extends BaseController {\n  constructor(_ref) {\n    let {\n      config = {},\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n\n    _defineProperty(this, \"_communicationProviderProxy\", void 0);\n\n    this.defaultState = {\n      buttonPosition: \"bottom-right\",\n      isIFrameFullScreen: true,\n      apiKey: \"torus-default\",\n      oauthModalVisibility: false,\n      loginInProgress: false,\n      dappMetadata: {\n        name: \"\",\n        icon: \"\"\n      }\n    };\n    this.initialize();\n  }\n  /**\n   * Called by orchestrator once while initializing the class\n   * @param handlers - JRPC handlers for provider\n   * @returns - provider - Returns the providerProxy\n   */\n\n\n  initializeProvider(handlers) {\n    const engine = new JRPCEngine();\n    const communicationMiddleware = createCommunicationMiddleware(handlers);\n    engine.push(communicationMiddleware);\n    const communicationProvider = providerFromEngine(engine);\n    this.setCommunicationProvider(communicationProvider);\n  }\n\n  setCommunicationProvider(communicationProvider) {\n    if (this._communicationProviderProxy) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      this._communicationProviderProxy.setTarget(communicationProvider);\n    } else {\n      this._communicationProviderProxy = createSwappableProxy(communicationProvider);\n    }\n  }\n\n}\n\nclass CommunicationWindowManager extends SafeEventEmitter {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"handleWindowRpc\", (request, response, next, end) => {\n      const {\n        method,\n        params\n      } = request;\n\n      if (method === COMMUNICATION_JRPC_METHODS.OPENED_WINDOW) {\n        const {\n          windowId\n        } = params; // I've been informed that a window has been opened\n\n        this.emit(\"\".concat(windowId, \":opened\"));\n        response.result = true;\n        end();\n      } else if (method === COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW) {\n        const {\n          windowId\n        } = params; // I've been informed that a window has been closed\n\n        this.emit(\"\".concat(windowId, \":closed\"));\n        response.result = true;\n        end();\n      } else {\n        next();\n      }\n    });\n  }\n\n}\n\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\n\nconst getTxStatusText = txStatus => {\n  switch (txStatus) {\n    case \"rejected\":\n    case \"unapproved\":\n    case \"failed\":\n      return ACTIVITY_STATUS_UNSUCCESSFUL;\n\n    case \"confirmed\":\n      return ACTIVITY_STATUS_SUCCESSFUL;\n\n    case \"submitted\":\n      return ACTIVITY_STATUS_PENDING;\n\n    case \"cancelled\":\n      return ACTIVITY_STATUS_CANCELLED;\n\n    default:\n      return \"\";\n  }\n};\n\n/**\n * General utility functions\n */\n\nfunction intToHex(i) {\n  const hex = i.toString(16);\n  return \"0x\".concat(hex);\n}\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */\n\nconst randomId = () => Math.random().toString(36).slice(2);\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\n\nfunction padWithZeroes(hexString, targetLength) {\n  if (hexString !== \"\" && !/^[a-f0-9]+$/iu.test(hexString)) {\n    throw new Error(\"Expected an unprefixed hex string. Received: \".concat(hexString));\n  }\n\n  if (targetLength < 0) {\n    throw new Error(\"Expected a non-negative integer target length. Received: \".concat(targetLength));\n  }\n\n  return String.prototype.padStart.call(hexString, targetLength, \"0\");\n}\n/**\n * Concatenate an extended ECDSA signature into a hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature.\n */\n\nfunction concatSig(v, r, s) {\n  const rSig = fromSigned(r);\n  const sSig = fromSigned(s);\n  const vSig = bufferToInt(v);\n  const rStr = padWithZeroes(toUnsigned(rSig).toString(\"hex\"), 64);\n  const sStr = padWithZeroes(toUnsigned(sSig).toString(\"hex\"), 64);\n  const vStr = stripHexPrefix(intToHex(vSig));\n  return addHexPrefix(rStr.concat(sStr, vStr));\n}\nfunction timeout$1(duration) {\n  return new Promise(resolve => {\n    const timeoutRef = window.setTimeout(() => {\n      resolve();\n      window.clearTimeout(timeoutRef);\n    }, duration);\n  });\n}\n/**\n * Text/number formatting utilities\n */\n\nconst formatSmallNumbers = function (number) {\n  let currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"usd\";\n  let noTilde = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const finalNumber = BigNumber.isBigNumber(number) ? number.toNumber() : number;\n  if (!Number.isFinite(finalNumber)) return \"\";\n  const value = currency.toLowerCase() === \"usd\" ? parseFloat(Number(finalNumber).toFixed(2)) : parseFloat(Number(finalNumber).toFixed(5));\n  const tilde = value > 0 ? \"~ \" : \"\";\n  return \"\".concat(currency.toLowerCase() === \"usd\" || noTilde ? \"\" : tilde).concat(Number(value), \" \").concat(currency.toUpperCase());\n};\nconst addressSlicer = function (address) {\n  let sliceLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n\n  if (address.length < 11) {\n    return address;\n  }\n\n  if (typeof address !== \"string\") return \"\";\n  return \"\".concat(address.slice(0, sliceLength), \"...\").concat(address.slice(-sliceLength));\n};\nconst significantDigits = function (number) {\n  let perc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let length_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  let input = !BigNumber.isBigNumber(number) ? new BigNumber(number) : number;\n  if (input.isZero()) return input;\n\n  if (perc) {\n    input = input.times(new BigNumber(100));\n  }\n\n  let depth;\n\n  if (input.gte(new BigNumber(1))) {\n    depth = length_;\n  } else {\n    depth = length_ - 1 + Math.ceil(Math.log10(new BigNumber(\"1\").div(input).toNumber()));\n  }\n\n  const shift = new BigNumber(10).pow(new BigNumber(depth));\n  const roundedNumber = Math.round(shift.times(input).toNumber()) / shift.toNumber();\n  return roundedNumber;\n};\nconst formatDate = inputDate => {\n  const monthList = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const date = new Date(inputDate);\n  const day = date.getDate();\n  const month = monthList[date.getMonth()];\n  const year = date.getFullYear();\n  return \"\".concat(day, \" \").concat(month, \" \").concat(year);\n};\nconst formatTime = time => {\n  return new Date(time).toTimeString().slice(0, 8);\n};\n/**\n * Network utilities\n */\n\nconst transactionMatchesNetwork = (transaction, chainId) => {\n  if (typeof transaction.chainId !== \"undefined\") {\n    return transaction.chainId === chainId;\n  }\n\n  return false;\n};\n/**\n * Signing utils\n */\n\nconst hashMessage = message => {\n  const bufferedMessage = Buffer.from(message, \"utf8\");\n  const el = hashPersonalMessage(bufferedMessage);\n  return el;\n};\nconst signMessage = (privateKey, data) => {\n  const privKey = Buffer.from(privateKey, \"hex\");\n  const message = stripHexPrefix(data);\n  const msgSig = ecsign(Buffer.from(message, \"hex\"), privKey);\n  const rawMsgSig = concatSig(intToBuffer(msgSig.v), msgSig.r, msgSig.s);\n  return rawMsgSig;\n};\n/**\n * popup handler utils\n */\n\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\nconst broadcastChannelOptions = {\n  // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n  webWorkerSupport: false // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n\n};\nfunction getCustomDeviceInfo() {\n  var _navigator;\n\n  if ((_navigator = navigator) !== null && _navigator !== void 0 && _navigator.brave) {\n    return {\n      browser: \"Brave\"\n    };\n  }\n}\nclass UserError extends Error {}\nconst handleRedirectParameters = (hash, queryParameters) => {\n  const hashParameters = {};\n  const hashUrl = new URL(\"\".concat(window.location.origin, \"/?\").concat(hash.slice(1)));\n  hashUrl.searchParams.forEach((value, key) => {\n    hashParameters[key] = value;\n  });\n  let instanceParameters = {};\n  let error = \"\";\n\n  if (!queryParameters.windowId) {\n    if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n      instanceParameters = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n      error = hashParameters.error_description || hashParameters.error || error;\n    } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n      instanceParameters = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n      if (queryParameters.error) error = queryParameters.error;\n    }\n  }\n\n  return {\n    error,\n    instanceParameters,\n    hashParameters\n  };\n};\n\nclass BaseKeyringController extends BaseController {\n  constructor(_ref) {\n    var _state$wallets;\n\n    let {\n      config = {},\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n    this.defaultState = {\n      wallets: (_state$wallets = state.wallets) !== null && _state$wallets !== void 0 ? _state$wallets : []\n    };\n    this.initialize();\n  } // for signing auth message\n\n\n  signAuthMessage(address, message) {\n    const keyring = this.state.wallets.find(x => x.address === address);\n\n    if (!keyring) {\n      throw new Error(\"key does not exist\");\n    }\n\n    const hashedMessage = hashMessage(message).toString(\"hex\");\n    const rawMessageSig = signMessage(keyring.privateKey, hashedMessage);\n    return rawMessageSig;\n  }\n\n}\n\nconst RETRIABLE_ERRORS = [// ignore server overload errors\n\"Gateway timeout\", \"ETIMEDOUT\", // ignore server sent html error pages\n// or truncated json responses\n\"failed to parse response body\", // ignore errors where http req failed to establish\n\"Failed to fetch\"];\n\nfunction checkForHttpErrors(fetchRes) {\n  // check for errors\n  switch (fetchRes.status) {\n    case 405:\n      throw ethErrors.rpc.methodNotFound();\n\n    case 418:\n      throw ethErrors.rpc.internal({\n        message: \"Request is being rate limited.\"\n      });\n\n    case 503:\n    case 504:\n      throw ethErrors.rpc.internal({\n        message: \"Gateway timeout. The request took too long to process.\" + \"This can happen when querying over too wide a block range.\"\n      });\n  }\n}\n\nfunction timeout(duration) {\n  return new Promise(resolve => setTimeout(resolve, duration));\n}\n\nfunction parseResponse(fetchRes, body) {\n  // check for error code\n  if (fetchRes.status !== 200) {\n    throw ethErrors.rpc.internal({\n      message: \"Non-200 status code: '\".concat(fetchRes.status, \"'\"),\n      data: body\n    });\n  } // check for rpc error\n\n\n  if (body.error) {\n    throw ethErrors.rpc.internal({\n      data: body.error\n    });\n  } // return successful result\n\n\n  return body.result;\n}\n\nfunction createFetchConfigFromReq(_ref) {\n  let {\n    req,\n    rpcTarget,\n    originHttpHeaderKey\n  } = _ref;\n  const parsedUrl = new URL(rpcTarget); // prepare payload\n  // copy only canonical json rpc properties\n\n  const payload = {\n    id: req.id,\n    jsonrpc: req.jsonrpc,\n    method: req.method,\n    params: req.params\n  }; // extract 'origin' parameter from request\n\n  const originDomain = req.origin; // serialize request body\n\n  const serializedPayload = JSON.stringify(payload); // configure fetch params\n\n  const fetchParams = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: serializedPayload\n  }; // optional: add request origin as header\n\n  if (originHttpHeaderKey && originDomain) {\n    fetchParams.headers[originHttpHeaderKey] = originDomain;\n  }\n\n  return {\n    fetchUrl: parsedUrl.href,\n    fetchParams\n  };\n}\nfunction createFetchMiddleware(_ref2) {\n  let {\n    rpcTarget,\n    originHttpHeaderKey\n  } = _ref2;\n  return createAsyncMiddleware(async (req, res, _next) => {\n    const {\n      fetchUrl,\n      fetchParams\n    } = createFetchConfigFromReq({\n      req,\n      rpcTarget,\n      originHttpHeaderKey\n    }); // attempt request multiple times\n\n    const maxAttempts = 5;\n    const retryInterval = 1000;\n\n    for (let attempt = 0; attempt < maxAttempts; attempt++) {\n      try {\n        const fetchRes = await fetch(fetchUrl, fetchParams); // check for http errrors\n\n        checkForHttpErrors(fetchRes); // parse response body\n\n        const fetchBody = await fetchRes.json();\n        const result = parseResponse(fetchRes, fetchBody); // set result and exit retry loop\n\n        res.result = result;\n        return;\n      } catch (err) {\n        const errMsg = err.toString();\n        const isRetriable = RETRIABLE_ERRORS.some(phrase => errMsg.includes(phrase)); // re-throw error if not retriable\n\n        if (!isRetriable) {\n          throw err;\n        }\n      } // delay before retrying\n\n\n      await timeout(retryInterval);\n    }\n  });\n}\n\nfunction createLoggerMiddleware(options) {\n  return function loggerMiddleware(request, response, next) {\n    next(callback => {\n      if (response.error) {\n        log.warn(\"Error in RPC response:\\n\", response);\n      }\n\n      if (request.isTorusInternal) return;\n      log.info(\"RPC (\".concat(options.origin, \"):\"), request, \"->\", response);\n      callback();\n    });\n  };\n}\n\nfunction createOriginMiddleware(options) {\n  return function originMiddleware(request, _, next) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    request.origin = options.origin;\n    next();\n  };\n}\n\nclass BroadcastChannelHandler {\n  constructor(channelPrefix) {\n    _defineProperty(this, \"bc\", void 0);\n\n    _defineProperty(this, \"channel\", void 0);\n\n    const queryParameters = new URLSearchParams(window.location.search);\n    const instanceId = queryParameters.get(\"instanceId\");\n    this.channel = \"\".concat(channelPrefix, \"_\").concat(instanceId);\n    this.bc = new BroadcastChannel(this.channel, broadcastChannelOptions);\n  }\n\n  getMessageFromChannel() {\n    return new Promise((resolve, reject) => {\n      this.bc.addEventListener(\"message\", async ev => {\n        this.bc.close();\n\n        if (ev.error) {\n          reject(ev.error);\n        } else {\n          resolve(ev.data);\n        }\n      });\n      this.bc.postMessage({\n        data: {\n          type: POPUP_LOADED\n        }\n      });\n    });\n  }\n\n}\n\nclass StreamWindow extends BaseController {\n  // if window has been closed by users\n  constructor(_ref) {\n    let {\n      config,\n      state = {}\n    } = _ref;\n    super({\n      config,\n      state\n    });\n\n    _defineProperty(this, \"closed\", false);\n\n    this.initialize();\n  }\n\n  async open() {\n    return new Promise((resolve, reject) => {\n      const {\n        communicationEngine,\n        communicationWindowManager\n      } = this.config;\n      communicationWindowManager.once(\"\".concat(this.state.windowId, \":closed\"), () => {\n        this.closed = true;\n      }); // Window is not open yet\n\n      if (!this.state.windowId) {\n        this.update({\n          windowId: randomId()\n        });\n        communicationWindowManager.once(\"\".concat(this.state.windowId, \":opened\"), () => {\n          resolve(this);\n        }); // Tell the other party to create a window by prompting the user to click on something\n\n        communicationEngine.emit(\"notification\", {\n          method: COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW,\n          params: {\n            windowId: this.state.windowId,\n            url: this.state.url.href\n          }\n        });\n      } else {\n        // Send this window with `windowId` the url to open via bc\n        const bc = new BroadcastChannel(this.state.windowId, broadcastChannelOptions);\n        let writeInterval = null;\n        bc.addEventListener(\"message\", async ev => {\n          try {\n            log.info(ev, \"receiving data on channel: \".concat(bc.name));\n            const {\n              error\n            } = ev;\n\n            if (error) {\n              // Popup says some error. so, we say it's not really opened\n              reject(new Error(error));\n              return;\n            }\n\n            const {\n              message\n            } = ev.data;\n\n            if (message === POPUP_LOADED) {\n              if (writeInterval) window.clearInterval(writeInterval);\n              await bc.postMessage({\n                data: {\n                  url: this.state.url.href,\n                  message: \"\" // No need of a msg\n\n                }\n              });\n              resolve(this);\n              bc.close();\n            }\n          } catch (error) {\n            reject(error);\n            bc.close(); // Something went wrong. so, we close that window\n\n            this.close();\n          }\n        }); // We don't know if the other end is ready to receive this msg. So, we keep writing until it receives and sends back something\n\n        writeInterval = window.setInterval(() => {\n          bc.postMessage({\n            data: {\n              message: SETUP_COMPLETE\n            }\n          });\n        }, 200);\n      }\n    });\n  }\n\n  close() {\n    const {\n      communicationEngine\n    } = this.config;\n    communicationEngine.emit(\"notification\", {\n      method: COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW,\n      params: {\n        windowId: this.state.windowId\n      }\n    });\n  }\n\n}\n\n/*\nScenarios:\n1. Open a normal popup window and no communication with it - Use PopupHandler\n2. Open a popup window and communicate with it - Use PopupWithBcHandler (can initiate communication by waiting for window to open or not)\n\n3. If window is already opened, pass in windowId to the popup handler.\n   This will establish communication with the popup window and sends it a new url to redirect to\n\n\nIf you're trying to open a window and it gets blocked (happens if you're in iframe or delay b/w click and opening window),\nStreamWindow is invoked and it writes in a channel to display a message to the user\n\nOnce user clicks on that modal/dialog, we pre-open the window and pass in the windowId (goes to 3)\n*/\n\n/**\n * Handles popup window management.\n * For broadcast channel communication, use url with `instanceId` coded into state parameter.\n * This state parameter will be passed across redirects according to OAuth spec.\n */\n\nclass PopupHandler extends BaseController {\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    }); // this.id = randomId()\n    // Add in dapp storage key to all popups as a hash parameter\n\n    this.defaultConfig = {\n      dappStorageKey: \"\",\n      features: getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW),\n      target: \"_blank\",\n      communicationEngine: null,\n      communicationWindowManager: null\n    };\n    this.defaultState = {\n      windowTimer: null,\n      window: null,\n      iClosedWindow: false,\n      windowId: \"\",\n      url: state.url\n    };\n    this.initialize();\n\n    this._setupTimer();\n  }\n\n  async open() {\n    // if window is already open\n    const {\n      target,\n      features,\n      dappStorageKey,\n      communicationEngine,\n      communicationWindowManager\n    } = this.config;\n    const {\n      windowId,\n      url\n    } = this.state;\n\n    if (dappStorageKey) {\n      const urlHashParams = new URLSearchParams(url.hash.slice(1));\n      urlHashParams.append(\"dappStorageKey\", dappStorageKey);\n      url.hash = urlHashParams.toString();\n      this.update({\n        url\n      });\n    } // No window has been pre-opened\n\n\n    if (!windowId) {\n      // try to open a window first\n      let localWindow = window.open(url.href, target, features);\n\n      if (!localWindow) {\n        // if it's blocked, open StreamWindow\n        localWindow = new StreamWindow({\n          config: {\n            communicationEngine,\n            communicationWindowManager\n          },\n          state: {\n            url\n          }\n        });\n        localWindow.open();\n      }\n\n      this.update({\n        window: localWindow\n      });\n      return;\n    } // A window has been pre-opened with a query parameter `windowId`\n\n\n    const localWindow = new StreamWindow({\n      config: {\n        communicationEngine,\n        communicationWindowManager\n      },\n      state: {\n        url,\n        windowId\n      }\n    });\n    this.update({\n      window: localWindow\n    });\n    await localWindow.open();\n  }\n\n  close() {\n    this.update({\n      iClosedWindow: true\n    });\n    const {\n      window\n    } = this.state;\n    if (window) window.close();\n  }\n\n  _setupTimer() {\n    const timer = window.setInterval(() => {\n      const {\n        window,\n        windowTimer,\n        iClosedWindow\n      } = this.state;\n\n      if (window && window.closed) {\n        if (windowTimer) clearInterval(windowTimer);\n\n        if (!iClosedWindow) {\n          this.emit(\"close\");\n        }\n\n        this.update({\n          iClosedWindow: false,\n          window: null\n        });\n      }\n\n      if (window === null && windowTimer) clearInterval(windowTimer);\n    }, 500);\n    this.update({\n      windowTimer: timer\n    });\n  }\n\n}\n\nclass PopupStoreChannel {\n  constructor(_ref) {\n    let {\n      instanceId,\n      handleLogout,\n      handleAccountImport,\n      handleNetworkChange,\n      handleSelectedAddressChange\n    } = _ref;\n\n    _defineProperty(this, \"handleLogout\", void 0);\n\n    _defineProperty(this, \"handleAccountImport\", void 0);\n\n    _defineProperty(this, \"handleNetworkChange\", void 0);\n\n    _defineProperty(this, \"handleSelectedAddressChange\", void 0);\n\n    _defineProperty(this, \"instanceId\", void 0);\n\n    this.instanceId = instanceId;\n    this.handleLogout = handleLogout;\n    this.handleAccountImport = handleAccountImport;\n    this.handleNetworkChange = handleNetworkChange;\n    this.handleSelectedAddressChange = handleSelectedAddressChange;\n  }\n\n  setupStoreChannels() {\n    this.logoutChannel();\n    this.importAccountChannel();\n    this.networkChangeChannel();\n    this.selectedAddressChangeChannel();\n  }\n\n  logoutChannel() {\n    const logoutChannel = new BroadcastChannel(\"\".concat(BROADCAST_CHANNELS.WALLET_LOGOUT_CHANNEL, \"_\").concat(this.instanceId), broadcastChannelOptions);\n    logoutChannel.addEventListener(\"message\", ev => {\n      var _ev$data;\n\n      log.info(\"received logout message\", ev);\n\n      if (!ev.error && ((_ev$data = ev.data) === null || _ev$data === void 0 ? void 0 : _ev$data.type) === BROADCAST_CHANNELS_MSGS.LOGOUT) {\n        log.info(\"Logging Out\");\n        this.handleLogout();\n      }\n    });\n  }\n\n  importAccountChannel() {\n    const walletAccountImportChannel = new BroadcastChannel(\"\".concat(BROADCAST_CHANNELS.WALLET_ACCOUNT_IMPORT_CHANNEL, \"_\").concat(this.instanceId), broadcastChannelOptions);\n    walletAccountImportChannel.addEventListener(\"message\", ev => {\n      var _ev$data2;\n\n      if (!ev.error && ((_ev$data2 = ev.data) === null || _ev$data2 === void 0 ? void 0 : _ev$data2.type) === BROADCAST_CHANNELS_MSGS.ACCOUNT_IMPORTED) {\n        var _ev$data3;\n\n        this.handleAccountImport((_ev$data3 = ev.data) === null || _ev$data3 === void 0 ? void 0 : _ev$data3.privKey);\n      }\n    });\n  }\n\n  networkChangeChannel() {\n    const walletAccountImportChannel = new BroadcastChannel(\"\".concat(BROADCAST_CHANNELS.WALLET_NETWORK_CHANGE_CHANNEL, \"_\").concat(this.instanceId), broadcastChannelOptions);\n    walletAccountImportChannel.addEventListener(\"message\", ev => {\n      var _ev$data4;\n\n      if (!ev.error && ((_ev$data4 = ev.data) === null || _ev$data4 === void 0 ? void 0 : _ev$data4.type) === BROADCAST_CHANNELS_MSGS.NETWORK_CHANGE) {\n        var _ev$data5;\n\n        this.handleNetworkChange((_ev$data5 = ev.data) === null || _ev$data5 === void 0 ? void 0 : _ev$data5.network);\n      }\n    });\n  }\n\n  selectedAddressChangeChannel() {\n    const walletAccountImportChannel = new BroadcastChannel(\"\".concat(BROADCAST_CHANNELS.WALLET_SELECTED_ADDRESS_CHANNEL, \"_\").concat(this.instanceId), broadcastChannelOptions);\n    walletAccountImportChannel.addEventListener(\"message\", ev => {\n      var _ev$data6;\n\n      if (!ev.error && ((_ev$data6 = ev.data) === null || _ev$data6 === void 0 ? void 0 : _ev$data6.type) === BROADCAST_CHANNELS_MSGS.SELECTED_ADDRESS_CHANGE) {\n        var _ev$data7;\n\n        this.handleSelectedAddressChange((_ev$data7 = ev.data) === null || _ev$data7 === void 0 ? void 0 : _ev$data7.selectedAddress);\n      }\n    });\n  }\n\n}\n\n/**\n * PopupWithBcHandler is a PopupHandler which uses broadcast channel to communicate with the popup window.\n */\n\nclass PopupWithBcHandler extends PopupHandler {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      instanceId\n    } = _ref;\n    super({\n      config,\n      state\n    });\n\n    _defineProperty(this, \"bc\", void 0);\n\n    this.bc = new BroadcastChannel(instanceId, broadcastChannelOptions);\n  }\n  /**\n   * Receives the data from popup window and closes the window\n   * @param successExtraFn - Extra function to be called after the data is received\n   * @returns The data to be received\n   */\n\n\n  handle(successExtraFn) {\n    return new Promise((resolve, reject) => {\n      const closeListener = () => {\n        this.bc.close();\n        reject(new UserError(\"user closed popup\"));\n        this.removeListener(\"close\", closeListener);\n      };\n\n      this.on(\"close\", closeListener);\n      this.bc.addEventListener(\"message\", async ev => {\n        log.info(ev, \"receiving data on channel: \".concat(this.bc.name));\n\n        try {\n          const {\n            error,\n            data\n          } = ev;\n\n          if (error) {\n            reject(new Error(error));\n            return;\n          }\n\n          if (successExtraFn) await successExtraFn.call(this, data);\n          resolve(data);\n        } catch (error) {\n          reject(error);\n        } finally {\n          this.bc.close();\n          this.close();\n        }\n      });\n      this.open().then(() => {\n        log.info(\"opened window \".concat(this.bc.name)); // Opened window. yay.  let the bc events do their job\n\n        return undefined;\n      }).catch(err => {\n        log.error(err, \"something went wrong while opening window\");\n        reject(err);\n      });\n    });\n  }\n  /**\n   * Use this if we have to send large payloads which don't fit in query/hash params.\n   * Waits for ack that popup window is ready to receive data.\n   * Receives the data from popup window and closes the window\n   * @param payload - The data to be sent to the popup window once we have ack that window is ready to receive data\n   * @param successExtraFn - Extra function to be called after the data is received\n   * @returns The data to be received\n   */\n\n\n  handleWithHandshake(payload, successExtraFn) {\n    return new Promise((resolve, reject) => {\n      const closeListener = () => {\n        this.bc.close();\n        reject(new UserError(\"user closed popup\"));\n        this.removeListener(\"close\", closeListener);\n      };\n\n      this.on(\"close\", closeListener);\n      this.bc.addEventListener(\"message\", async ev => {\n        try {\n          log.info(ev, \"receiving data on channel: \".concat(this.bc.name));\n          const {\n            error,\n            data\n          } = ev;\n\n          if (error) {\n            reject(new Error(error));\n            return;\n          } // Do handshake\n\n\n          const {\n            type = \"\"\n          } = data;\n\n          if (type === POPUP_LOADED) {\n            // Hack with generic to use the same type for both send and receive\n            await this.bc.postMessage({\n              data: payload\n            });\n          } else if (type === POPUP_RESULT) {\n            if (successExtraFn) await successExtraFn.call(this, data);\n            resolve(data); // Must only close the bc after result is done\n\n            this.bc.close();\n            this.close();\n          }\n        } catch (error) {\n          reject(error);\n          this.bc.close();\n          this.close();\n        }\n      });\n      this.open().then(() => {\n        log.info(\"opened window \".concat(this.bc.name)); // Opened window. yay.  let the bc events do their job\n\n        return undefined;\n      }).catch(err => {\n        log.error(err, \"something went wrong while opening window\");\n        reject(err);\n      });\n    });\n  }\n\n}\n\nclass RedirectHandler {\n  constructor() {\n    _defineProperty(this, \"error\", void 0);\n\n    _defineProperty(this, \"finalQueryParams\", {});\n\n    _defineProperty(this, \"instanceParameters\", void 0);\n\n    _defineProperty(this, \"hashParameters\", void 0);\n\n    const {\n      hash\n    } = window.location;\n    const queryParameters = new URLSearchParams(window.location.search);\n    queryParameters.forEach((value, key) => {\n      this.finalQueryParams[key] = value;\n    });\n    const {\n      error,\n      instanceParameters,\n      hashParameters\n    } = handleRedirectParameters(hash, this.finalQueryParams);\n    this.error = error;\n    this.instanceParameters = instanceParameters;\n    this.hashParameters = hashParameters;\n  }\n\n  async handle() {\n    return new Promise((resolve, reject) => {\n      const {\n        finalQueryParams,\n        instanceParameters,\n        hashParameters,\n        error\n      } = this;\n      let bc;\n\n      try {\n        if (!finalQueryParams.windowId) {\n          bc = new BroadcastChannel(\"\".concat(BROADCAST_CHANNELS.REDIRECT_CHANNEL, \"_\").concat(instanceParameters.instanceId), broadcastChannelOptions);\n          bc.addEventListener(\"message\", async ev => {\n            if (ev.error) {\n              reject(ev.error);\n              window.close();\n            } else {\n              resolve();\n              bc.close();\n              log.info(\"posted\", {\n                finalQueryParams,\n                hashParameters,\n                instanceParameters\n              });\n            }\n          });\n          bc.postMessage({\n            data: {\n              instanceParams: instanceParameters,\n              hashParams: hashParameters,\n              queryParams: finalQueryParams\n            },\n            error\n          });\n          setTimeout(() => {\n            resolve();\n            window.location.href = window.location.origin + window.location.search + window.location.hash;\n          }, 5000);\n        } else {\n          bc = new BroadcastChannel(\"\".concat(finalQueryParams.windowId), broadcastChannelOptions);\n          bc.addEventListener(\"message\", async ev => {\n            const {\n              url,\n              message\n            } = ev.data;\n\n            if (url) {\n              resolve();\n              window.location.href = url;\n            } else if (message === SETUP_COMPLETE) {\n              await bc.postMessage({\n                data: {\n                  windowId: finalQueryParams.windowId,\n                  message: POPUP_LOADED\n                }\n              });\n            }\n\n            if (ev.error && ev.error !== \"\") {\n              log.error(ev.error);\n              resolve();\n              bc.close();\n            }\n          });\n        }\n      } catch (err) {\n        log.info(err, \"something went wrong\");\n        reject(err);\n        if (bc) bc.close();\n        window.close();\n      }\n    });\n  }\n\n}\n\nconst ACTIVITY_ACTION = {\n  ACTIVITY_ACTION_ALL: \"walletActivity.allTransactions\",\n  ACTIVITY_ACTION_SEND: \"walletActivity.send\",\n  ACTIVITY_ACTION_RECEIVE: \"walletActivity.receive\",\n  ACTIVITY_ACTION_TOPUP: \"walletActivity.topup\"\n};\nconst ACCOUNT_CATEGORY = {\n  NORMAL: \"normal\",\n  THRESHOLD: \"threshold\",\n  IMPORTED: \"imported\"\n};\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nconst DEFAULT_INTERVAL = 180 * 1000;\nconst DEFAULT_PREFERENCES = {\n  selectedCurrency: \"USD\",\n  theme: \"dark\",\n  locale: \"en-US\",\n  accountType: ACCOUNT_CATEGORY.NORMAL,\n  contacts: [],\n  jwtToken: \"\",\n  fetchedPastTx: [],\n  pastTransactions: [],\n  paymentTx: [],\n  defaultPublicAddress: \"\",\n  customTokens: [],\n  customNfts: [],\n  crashReport: true,\n  userInfo: {\n    aggregateVerifier: \"\",\n    email: \"\",\n    name: \"\",\n    profileImage: \"\",\n    typeOfLogin: LOGIN_PROVIDER.GOOGLE,\n    verifier: \"\",\n    verifierId: \"\"\n  }\n};\n/**\n * Controller that stores shared settings and exposes convenience methods\n */\n\nclass BasePreferencesController extends BaseController {\n  /**\n   * Name of this controller used during composition\n   */\n\n  /**\n   * Creates a PreferencesController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      defaultPreferences,\n      signAuthMessage\n    } = _ref;\n    super({\n      config,\n      state\n    });\n\n    _defineProperty(this, \"name\", \"PreferencesController\");\n\n    _defineProperty(this, \"iframeOrigin\", void 0);\n\n    _defineProperty(this, \"signAuthMessage\", void 0);\n\n    _defineProperty(this, \"defaultPreferences\", void 0);\n\n    if (!config.api) {\n      throw new Error(\"PreferencesController - no api specified in config.\");\n    }\n\n    this.defaultState = {\n      identities: {},\n      selectedAddress: \"\",\n      lastErrorMessage: \"\",\n      lastSuccessMessage: \"\"\n    };\n    this.defaultConfig = {\n      api: config.api,\n      pollInterval: DEFAULT_INTERVAL\n    };\n    this.initialize();\n    this.defaultPreferences = _objectSpread$1(_objectSpread$1({}, DEFAULT_PREFERENCES), defaultPreferences);\n    this.signAuthMessage = signAuthMessage;\n  }\n\n  setIframeOrigin(origin) {\n    this.iframeOrigin = origin;\n  }\n\n  getAddressState(address) {\n    const selectedAddress = address || this.state.selectedAddress;\n    return this.state.identities[selectedAddress];\n  }\n  /**\n   * Sets selected address\n   *\n   * @param selectedAddress - casper account hash\n   */\n\n\n  setSelectedAddress(selectedAddress) {\n    this.update({\n      selectedAddress\n    });\n  }\n\n  async getUser(address) {\n    const user = await get(\"\".concat(this.config.api, \"/user?fetchTx=false\"), this.headers(address), {\n      useAPIKey: true\n    });\n    return user.data;\n  }\n\n  async createUser(params) {\n    const {\n      selectedCurrency,\n      theme,\n      verifier,\n      verifierId,\n      locale,\n      address\n    } = params;\n    const userPayload = {\n      default_currency: selectedCurrency,\n      theme,\n      verifier,\n      verifier_id: verifierId,\n      locale\n    };\n    await post(\"\".concat(this.config.api, \"/user\"), userPayload, this.headers(address), {\n      useAPIKey: true\n    });\n    this.updateState({\n      theme,\n      defaultPublicAddress: address,\n      selectedCurrency,\n      locale\n    }, address);\n  }\n\n  async storeUserLogin(params) {\n    const {\n      verifierId,\n      verifier,\n      options,\n      address\n    } = params;\n\n    if (!options.rehydrate) {\n      const browser = bowser.getParser(window.navigator.userAgent);\n      const specialBrowser = getCustomDeviceInfo();\n      const recordLoginPayload = {\n        os: browser.getOSName(),\n        os_version: browser.getOSVersion() || \"unidentified\",\n        browser: (specialBrowser === null || specialBrowser === void 0 ? void 0 : specialBrowser.browser) || browser.getBrowserName() || \"unidentified\",\n        browser_version: browser.getBrowserVersion() || \"unidentified\",\n        platform: browser.getPlatform().type || \"desktop\",\n        hostname: this.iframeOrigin,\n        verifier,\n        verifier_id: verifierId\n      };\n      await post(\"\".concat(this.config.api, \"/user/recordLogin\"), recordLoginPayload, this.headers(address), {\n        useAPIKey: true\n      });\n    }\n  }\n\n  async setCrashReport(isEnabled) {\n    var _this$getAddressState;\n\n    if (isEnabled === ((_this$getAddressState = this.getAddressState()) === null || _this$getAddressState === void 0 ? void 0 : _this$getAddressState.crashReport)) return true;\n\n    try {\n      await patch(\"\".concat(this.config.api, \"/user\"), {\n        enable_crash_reporter: isEnabled\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        crashReport: isEnabled\n      });\n      return true;\n    } catch (error) {\n      log.error(error);\n      return false;\n    }\n  }\n\n  async setUserTheme(theme) {\n    var _this$getAddressState2;\n\n    if (theme === ((_this$getAddressState2 = this.getAddressState()) === null || _this$getAddressState2 === void 0 ? void 0 : _this$getAddressState2.theme)) return true;\n\n    try {\n      await patch(\"\".concat(this.config.api, \"/user\"), {\n        theme\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        theme\n      });\n      return true;\n    } catch (error) {\n      log.error(error);\n      return false;\n    }\n  }\n\n  async setUserLocale(locale) {\n    var _this$getAddressState3;\n\n    if (locale === ((_this$getAddressState3 = this.getAddressState()) === null || _this$getAddressState3 === void 0 ? void 0 : _this$getAddressState3.locale)) return;\n\n    try {\n      await patch(\"\".concat(this.config.api, \"/user\"), {\n        locale\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        locale\n      });\n      return true;\n    } catch (error) {\n      log.error(\"unable to set locale\", error);\n      return false;\n    }\n  }\n\n  async setSelectedCurrency(payload) {\n    var _this$getAddressState4;\n\n    if (payload.selectedCurrency === ((_this$getAddressState4 = this.getAddressState()) === null || _this$getAddressState4 === void 0 ? void 0 : _this$getAddressState4.selectedCurrency)) return true;\n\n    try {\n      await patch(\"\".concat(this.config.api, \"/user\"), {\n        default_currency: payload.selectedCurrency\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        selectedCurrency: payload.selectedCurrency\n      });\n      return true;\n    } catch (error) {\n      log.error(error);\n      return false;\n    }\n  }\n\n  async addContact(contact) {\n    try {\n      var _this$getAddressState5;\n\n      const response = await post(\"\".concat(this.config.api, \"/contact\"), contact, this.headers(), {\n        useAPIKey: true\n      });\n      this.updateState({\n        contacts: [...(((_this$getAddressState5 = this.getAddressState()) === null || _this$getAddressState5 === void 0 ? void 0 : _this$getAddressState5.contacts) || []), response.data]\n      });\n      return true;\n    } catch (error) {\n      log.error(\"unable to add contact\", error);\n      return false;\n    }\n  }\n\n  async deleteContact(contactId) {\n    try {\n      var _this$getAddressState6;\n\n      const response = await remove(\"\".concat(this.config.api, \"/contact/\").concat(contactId), {}, this.headers(), {\n        useAPIKey: true\n      });\n      const finalContacts = (_this$getAddressState6 = this.getAddressState()) === null || _this$getAddressState6 === void 0 ? void 0 : _this$getAddressState6.contacts.filter(contact => contact.id !== response.data.id);\n      if (finalContacts) this.updateState({\n        contacts: [...finalContacts]\n      });\n      return true;\n    } catch (error) {\n      log.error(\"unable to delete contact\", error);\n      return false;\n    }\n  }\n\n  async revokeDiscord(idToken) {\n    try {\n      const resp = await post(\"\".concat(this.config.api, \"/revoke/discord\"), {\n        token: idToken\n      }, this.headers(), {\n        useAPIKey: true\n      });\n      log.info(resp);\n    } catch (error) {\n      log.error(error);\n    }\n  }\n\n  async patchPastTx(body, address) {\n    try {\n      const response = await patch(\"\".concat(this.config.api, \"/transaction\"), body, this.headers(address), {\n        useAPIKey: true\n      });\n      log.info(\"successfully patched\", response);\n    } catch (error) {\n      log.error(\"unable to patch tx\", error);\n    }\n  }\n\n  async postPastTx(tx, address) {\n    try {\n      const response = await post(\"\".concat(this.config.api, \"/transaction\"), tx, this.headers(address), {\n        useAPIKey: true\n      });\n      log.info(\"successfully posted tx\", response);\n      return response;\n    } catch (error) {\n      log.error(error, \"unable to insert transaction\");\n    }\n  }\n\n  async getWalletOrders(address) {\n    try {\n      const response = await get(\"\".concat(this.config.api, \"/transaction\"), this.headers(address), {\n        useAPIKey: true\n      });\n      return response.success ? response.data ? response.data : [] : [];\n    } catch (error) {\n      log.error(\"unable to get wallet orders tx\", error);\n      return [];\n    }\n  }\n\n  async getTopUpOrders(address) {\n    try {\n      const response = await get(\"\".concat(this.config.commonApiHost, \"/transaction\"), this.headers(address), {\n        useAPIKey: true\n      });\n      return response.data || [];\n    } catch (error) {\n      log.error(\"unable to fetch past Top up orders\", error);\n    }\n  }\n\n  async getBillBoardData() {\n    try {\n      const response = await get(\"\".concat(this.config.api, \"/billboard\"), this.headers(), {\n        useAPIKey: true\n      });\n      return response.success ? response.data : [];\n    } catch (error) {\n      log.error(\"unable to get billboard data\", error);\n      return [];\n    }\n  }\n\n  async getMessageForSigning(publicAddress) {\n    const response = await post(\"\".concat(this.config.api, \"/auth/message\"), {\n      public_address: publicAddress\n    }, {}, {\n      useAPIKey: true\n    });\n    return response.message;\n  }\n\n  async getTwitterId(payload) {\n    const res = await get(\"\".concat(this.config.api, \"/twitter?screen_name=\").concat(payload.nick), this.headers(), {\n      useAPIKey: true\n    });\n    return \"\".concat(payload.typeOfLogin.toLowerCase(), \"|\").concat(res.data.toString());\n  }\n\n  async sendEmail(payload) {\n    return post(\"\".concat(this.config.api, \"/transaction/sendemail\"), payload.emailObject, this.headers(), {\n      useAPIKey: true\n    });\n  }\n\n  async refreshJwt() {\n    const address = this.state.selectedAddress;\n    const messageToSign = await this.getMessageForSigning(address);\n    if (!messageToSign.startsWith(this.config.signInPrefix)) throw new Error(\"Cannot sign on invalid message\");\n    const signedMessage = this.signAuthMessage(address, messageToSign);\n    const response = await post(\"\".concat(this.config.api, \"/auth/verify\"), {\n      public_address: address,\n      signed_message: signedMessage\n    }, {}, {\n      useAPIKey: true\n    });\n    this.updateState({\n      jwtToken: response.token\n    }, address);\n  }\n\n  async getDappList() {\n    try {\n      const response = await get(\"\".concat(this.config.api, \"/dapps\"), this.headers(), {\n        useAPIKey: true\n      });\n      return response.success ? response.data : [];\n    } catch (error) {\n      log.error(\"unable to get billboard data\", error);\n      return [];\n    }\n  }\n\n  async init(address, userInfo, jwtToken) {\n    let response = {\n      token: jwtToken\n    };\n    if (this.getAddressState(address)) return;\n\n    if (!jwtToken) {\n      const messageToSign = await this.getMessageForSigning(address);\n      if (!messageToSign.startsWith(this.config.signInPrefix)) throw new Error(\"Cannot sign on invalid message\");\n      const signedMessage = this.signAuthMessage(address, messageToSign);\n      response = await post(\"\".concat(this.config.api, \"/auth/verify\"), {\n        public_address: address,\n        signed_message: signedMessage\n      }, {}, {\n        useAPIKey: true\n      });\n    }\n\n    this.updateState({\n      jwtToken: response.token,\n      userInfo\n    }, address);\n  }\n\n  updateState(preferences, address) {\n    const selectedAddress = address || this.state.selectedAddress;\n    const currentState = this.getAddressState(selectedAddress) || cloneDeep(this.defaultPreferences);\n\n    const mergedState = _objectSpread$1(_objectSpread$1({}, currentState), preferences);\n\n    this.update({\n      identities: _objectSpread$1(_objectSpread$1({}, this.state.identities), {}, {\n        [selectedAddress]: mergedState\n      })\n    });\n    return mergedState;\n  }\n\n  headers(address) {\n    var _this$getAddressState7;\n\n    const selectedAddress = address || this.state.selectedAddress;\n    return {\n      headers: {\n        Authorization: \"Bearer \".concat(((_this$getAddressState7 = this.getAddressState(selectedAddress)) === null || _this$getAddressState7 === void 0 ? void 0 : _this$getAddressState7.jwtToken) || \"\"),\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      }\n    };\n  }\n\n}\n\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */\nvar TransactionStatus;\n\n(function (TransactionStatus) {\n  TransactionStatus[\"approved\"] = \"approved\";\n  TransactionStatus[\"cancelled\"] = \"cancelled\";\n  TransactionStatus[\"confirmed\"] = \"confirmed\";\n  TransactionStatus[\"failed\"] = \"failed\";\n  TransactionStatus[\"finalized\"] = \"finalized\";\n  TransactionStatus[\"processed\"] = \"processed\";\n  TransactionStatus[\"rejected\"] = \"rejected\";\n  TransactionStatus[\"signed\"] = \"signed\";\n  TransactionStatus[\"submitted\"] = \"submitted\";\n  TransactionStatus[\"unapproved\"] = \"unapproved\";\n  TransactionStatus[\"dropped\"] = \"dropped\";\n  TransactionStatus[\"expired\"] = \"expired\";\n})(TransactionStatus || (TransactionStatus = {}));\n\nconst TRANSACTION_TYPES = {\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\",\n  STANDARD_PAYMENT_TRANSACTION: \"payment_transaction\" // specific to chains like solana and casper\n\n};\nconst TX_EVENTS = {\n  TX_WARNING: \"tx:warning\",\n  TX_ERROR: \"tx:error\",\n  TX_FAILED: \"tx:failed\",\n  TX_CONFIRMED: \"tx:confirmed\",\n  TX_DROPPED: \"tx:dropped\",\n  TX_EXPIRED: \"tx:expired\",\n  TX_STATUS_UPDATE: \"tx:status_update\",\n  TX_UNAPPROVED: \"tx:unapproved\"\n};\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass BaseTransactionStateManager extends BaseController {\n  constructor(_ref) {\n    let {\n      config,\n      state,\n      getCurrentChainId\n    } = _ref;\n    super({\n      config,\n      state\n    });\n\n    _defineProperty(this, \"getCurrentChainId\", void 0);\n\n    this.defaultConfig = {\n      txHistoryLimit: 40\n    };\n    this.defaultState = {\n      transactions: {},\n      unapprovedTxs: {},\n      currentNetworkTxsList: []\n    };\n    this.initialize();\n    this.getCurrentChainId = getCurrentChainId;\n  }\n\n  getUnapprovedTxList() {\n    const chainId = this.getCurrentChainId();\n    return pickBy(this.state.transactions, transaction => transaction.status === TransactionStatus.unapproved && transactionMatchesNetwork(transaction, chainId));\n  }\n\n  getTransaction(txId) {\n    const {\n      transactions\n    } = this.state;\n    return transactions[txId];\n  }\n\n  updateTransaction(txMeta) {\n    // commit txMeta to state\n    const txId = txMeta.id;\n    txMeta.updated_at = new Date().toISOString();\n    this.update({\n      transactions: _objectSpread(_objectSpread({}, this.state.transactions), {}, {\n        [txId]: txMeta\n      })\n    });\n  }\n\n  setTxStatusRejected(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.rejected);\n\n    this._deleteTransaction(txId);\n  }\n  /**\n   * The implementing controller can override this functionality and add custom logic + call super.()\n   */\n\n\n  setTxStatusUnapproved(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.unapproved);\n  }\n\n  setTxStatusApproved(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.approved);\n  }\n\n  setTxStatusSigned(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.signed);\n  }\n\n  setTxStatusSubmitted(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.submitted);\n  }\n\n  setTxStatusDropped(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.dropped);\n  }\n\n  setTxStatusExpired(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.expired);\n  }\n\n  setTxStatusConfirmed(txId) {\n    this._setTransactionStatus(txId, TransactionStatus.confirmed);\n  }\n\n  setTxStatusFailed(txId, error_) {\n    const error = !error_ ? new Error(\"Internal torus failure\") : error_;\n    const txMeta = this.getTransaction(txId);\n    txMeta.error = error;\n    this.updateTransaction(txMeta);\n\n    this._setTransactionStatus(txId, TransactionStatus.failed);\n  }\n  /**\n   * Method to determine if the transaction is in a final state\n   * @param status - Transaction status\n   * @returns boolean if the transaction is in a final state\n   */\n\n\n  isFinalState(status) {\n    return status === TransactionStatus.rejected || status === TransactionStatus.submitted || status === TransactionStatus.confirmed || status === TransactionStatus.failed || status === TransactionStatus.cancelled || status === TransactionStatus.expired;\n  }\n  /**\n   * Filters out the unapproved transactions from state\n   */\n\n\n  clearUnapprovedTxs() {\n    this.update({\n      transactions: omitBy(this.state.transactions, transaction => transaction.status === TransactionStatus.unapproved)\n    });\n  }\n  /**\n   * will append new transactions to old txns.\n   */\n\n\n  _addTransactionsToState(transactions) {\n    this.update({\n      transactions: transactions.reduce((result, newTx) => {\n        result[newTx.id] = newTx;\n        return result;\n      }, this.state.transactions)\n    });\n  }\n  /**\n   * will set new txns, override existing if any in state.\n   */\n\n\n  _setTransactionsToState(transactions) {\n    this.update({\n      transactions: transactions.reduce((result, newTx) => {\n        result[newTx.id] = newTx;\n        return result;\n      }, {})\n    });\n  }\n\n  _deleteTransaction(targetTransactionId) {\n    const {\n      transactions\n    } = this.state;\n    delete transactions[targetTransactionId];\n    this.update({\n      transactions\n    });\n  }\n\n  _deleteTransactions(targetTransactionIds) {\n    const {\n      transactions\n    } = this.state;\n    targetTransactionIds.forEach(transactionId => {\n      delete transactions[transactionId];\n    });\n    this.update({\n      transactions\n    });\n  }\n\n  _setTransactionStatus(txId, status) {\n    const txMeta = this.getTransaction(txId);\n\n    if (!txMeta) {\n      return;\n    }\n\n    txMeta.status = status; // only updating status so no validation required on txn.\n\n    this.updateTransaction(txMeta);\n    this.emit(TX_EVENTS.TX_STATUS_UPDATE, {\n      txId,\n      status\n    });\n\n    if (this.isFinalState(status)) {\n      this.emit(\"\".concat(txMeta.id, \":finished\"), txMeta);\n    } else {\n      this.emit(\"\".concat(txMeta.id, \":\").concat(status), txId);\n    }\n  }\n\n}\n\nexport { ACCOUNT_CATEGORY, ACTIVITY_ACTION, ACTIVITY_ACTION_ALL, ACTIVITY_ACTION_RECEIVE, ACTIVITY_ACTION_SEND, ACTIVITY_ACTION_TOPUP, ACTIVITY_PERIOD_ALL, ACTIVITY_PERIOD_MONTH_ONE, ACTIVITY_PERIOD_MONTH_SIX, ACTIVITY_PERIOD_WEEK_ONE, ACTIVITY_STATUS_CANCELLED, ACTIVITY_STATUS_CANCELLING, ACTIVITY_STATUS_PENDING, ACTIVITY_STATUS_SUCCESSFUL, ACTIVITY_STATUS_UNSUCCESSFUL, BROADCAST_CHANNELS, BROADCAST_CHANNELS_MSGS, BaseBlockTracker, BaseController, BaseCurrencyController, BaseEmbedController, BaseKeyringController, BasePreferencesController, BaseTransactionStateManager, BroadcastChannelHandler, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, CommunicationWindowManager, DEFAULT_PREFERENCES, FEATURES_CONFIRM_WINDOW, FEATURES_DEFAULT_POPUP_WINDOW, FEATURES_DEFAULT_WALLET_WINDOW, FEATURES_PROVIDER_CHANGE_WINDOW, LOGIN_PROVIDER, PAYMENT_PROVIDER, POPUP_LOADED, POPUP_RESULT, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS, PopupHandler, PopupStoreChannel, PopupWithBcHandler, RedirectHandler, SETUP_COMPLETE, StreamWindow, TRANSACTION_TYPES, TX_EVENTS, TransactionStatus, UserError, addressSlicer, broadcastChannelOptions, concatSig, createChangeProviderMiddlewareMiddleware, createCommunicationMiddleware, createEventEmitterProxy, createFetchConfigFromReq, createFetchMiddleware, createGenericJRPCMiddleware, createLoggerMiddleware, createOriginMiddleware, createRandomId, createSwappableProxy, createTopupMiddleware, formatDate, formatSmallNumbers, formatTime, getCustomDeviceInfo, getPopupFeatures, getTxStatusText, handleRedirectParameters, hashMessage, intToHex, padWithZeroes, providerAsMiddleware, providerFromEngine, providerFromMiddleware, randomId, signMessage, significantDigits, timeout$1 as timeout, transactionMatchesNetwork };\n//# sourceMappingURL=baseControllers.esm.js.map\n"]},"metadata":{},"sourceType":"module"}