{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BaseAdapter, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, getChainConfig, WalletLoginError } from '@web3auth/base';\nclass MetamaskAdapter extends BaseAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n    _defineProperty(this, \"rehydrated\", false);\n    _defineProperty(this, \"metamaskProvider\", null);\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n    return null;\n  }\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n  setAdapterSettings(_) {}\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n  async disconnect() {\n    var _this$provider;\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\nexport { MetamaskAdapter };","map":{"version":3,"sources":["../src/metamaskAdapter.ts"],"names":["MetamaskAdapter","BaseAdapter","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","WALLET_ADAPTERS","METAMASK","ADAPTER_STATUS","NOT_READY","constructor","adapterOptions","chainConfig","provider","status","CONNECTED","metamaskProvider","_","Error","init","options","checkInitializationRequirements","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","notInstalled","READY","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","ERRORED","setAdapterSettings","checkConnectionRequirements","getChainConfig","CONNECTING","adapter","WalletLoginError","notConnectedError","request","method","chainId","switchChain","once","disconnect","reconnected","connectionError","cleanup","disconnectionError","removeAllListeners","DISCONNECTED","getUserInfo","params","switchError","code","chainName","displayName","rpcUrls","rpcTarget"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BaseAdapter, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, getChainConfig, WalletLoginError } from '@web3auth/base';\n\nclass MetamaskAdapter extends BaseAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"metamaskProvider\", null);\n\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_) {}\n\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect() {\n    var _this$provider;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n}\n\nexport { MetamaskAdapter };\n//# sourceMappingURL=metamaskAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}