{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Transaction } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport { isDuplexStream } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: method => \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\"),\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: maxEventListeners => \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \"}\"),\n    invalidRequestArgs: () => \"Expected a single, non-array, object argument.\",\n    invalidRequestMethod: () => \"'args.method' must be a non-empty string.\",\n    invalidRequestParams: () => \"'args.params' must be an object or array if provided.\",\n    invalidLoggerObject: () => \"'args.logger' must be an object if provided.\",\n    invalidLoggerMethod: method => \"'args.logger' must include required method '\".concat(method, \"'.\")\n  },\n  info: {\n    connected: chainId => \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\")\n  },\n  warnings: {}\n};\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: \"torus-\".concat(window.location.hostname)\n};\nvar log = loglevel.getLogger(\"solana-embed\");\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n    next(done => {\n      const {\n        error\n      } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(\"Torus - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = \"Torus: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\nconst getWindowId = () => Math.random().toString(36).slice(2);\nconst getTorusUrl = async buildEnv => {\n  let torusUrl;\n  let logLevel; // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = \"https://solana.tor.us\";\n      logLevel = \"error\";\n      break;\n  }\n  return {\n    torusUrl,\n    logLevel\n  };\n};\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\nfunction storageAvailable(type) {\n  let storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && (\n    // everything except Firefox\n    e.code === 22 ||\n    // Firefox\n    e.code === 1014 ||\n    // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" ||\n    // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n    // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n/**\n * popup handler utils\n */\n\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\nconst getNetworkConfig = label => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.mainnet-beta.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.testnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n    default:\n      return undefined;\n  }\n};\nclass BaseProvider extends SafeEventEmitter {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super();\n    _defineProperty(this, \"isTorus\", void 0);\n    _defineProperty(this, \"_rpcEngine\", void 0);\n    _defineProperty(this, \"jsonRpcConnectionEvents\", void 0);\n    _defineProperty(this, \"_state\", void 0);\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n    const {\n      method,\n      params\n    } = args;\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n  send(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n  sendAsync(payload) {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n}\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\nclass PopupHandler extends SafeEventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n    _defineProperty(this, \"url\", void 0);\n    _defineProperty(this, \"target\", void 0);\n    _defineProperty(this, \"features\", void 0);\n    _defineProperty(this, \"window\", void 0);\n    _defineProperty(this, \"windowTimer\", void 0);\n    _defineProperty(this, \"iClosedWindow\", void 0);\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n  open() {\n    var _this$window;\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass TorusCommunicationProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n    _defineProperty(this, \"torusUrl\", void 0);\n    _defineProperty(this, \"dappStorageKey\", void 0);\n    _defineProperty(this, \"windowRefs\", void 0);\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n    _defineProperty(this, \"torusIframe\", void 0);\n    this._state = _objectSpread$2({}, TorusCommunicationProvider._defaultState); // public state\n\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {}; // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n    const notificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const {\n          isFullScreen,\n          rid\n        } = params;\n        this._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const {\n          windowId,\n          url\n        } = params;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const {\n          currentLoginProvider\n        } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n  get isLoggedIn() {\n    return this._state.isLoggedIn;\n  }\n  get isIFrameFullScreen() {\n    return this._state.isIFrameFullScreen;\n  }\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n  async _initializeState(params) {\n    try {\n      const {\n        torusUrl,\n        dappStorageKey,\n        torusAlertContainer,\n        torusIframe\n      } = params;\n      this.torusUrl = torusUrl;\n      this.dappStorageKey = dappStorageKey;\n      this.torusAlertContainer = torusAlertContainer;\n      this.torusIframe = torusIframe;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const {\n        currentLoginProvider,\n        isLoggedIn\n      } = await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  _handleWindow(windowId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?windowId=\").concat(windowId));\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    }\n    const handledWindow = new PopupHandler({\n      url: finalUrl,\n      target,\n      features\n    });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    } // Add to collection only if window is opened\n\n    this.windowRefs[windowId] = handledWindow; // We tell the iframe that the window has been successfully opened\n\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: {\n        windowId\n      }\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: {\n          windowId\n        }\n      });\n    });\n  }\n  _displayIframe() {\n    let {\n      isFull = false,\n      rid = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: {\n        isIFrameFullScreen: isFull,\n        rid\n      }\n    });\n  }\n  hideTorusButton() {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n  showTorusButton() {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n  _rpcRequest(payload, callback) {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n\n  _handleConnect(currentLoginProvider, isLoggedIn) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        currentLoginProvider,\n        isLoggedIn\n      });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013,\n        // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011,\n        // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n      this.emit(\"disconnect\", error);\n    }\n  } // Called if the iframe wants to close the window cause it is done processing the request\n\n  _handleCloseWindow(params) {\n    const {\n      windowId\n    } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n  async _createPopupBlockAlert(windowId, url) {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n  getLogoUrl() {\n    const logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n    return logoUrl;\n  }\n}\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nclass TorusInPageProvider extends BaseProvider {\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"chainId\", void 0);\n    _defineProperty(this, \"selectedAddress\", void 0);\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n    this._state = _objectSpread$1({}, TorusInPageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.chainId = null;\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n    const jsonRpcNotificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params);\n      }\n    }; // json rpc notification listener\n\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n  isConnected() {\n    return this._state.isConnected;\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked\n      } = await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n      this._handleChainChanged({\n        chainId\n      });\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013,\n        // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011,\n        // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n  _handleChainChanged() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n        chainId\n      });\n      return;\n    }\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\n/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\nasync function getSiteIcon(window) {\n  try {\n    const {\n      document\n    } = window; // Use the site's favicon if it exists\n\n    let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    } // Search through available icons in no particular order\n\n    icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = \"\".concat(torusUrl, \"/frame\");\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\nclass Torus {\n  constructor() {\n    let {\n      modalZIndex = 99999\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _defineProperty(this, \"isInitialized\", void 0);\n    _defineProperty(this, \"torusAlert\", void 0);\n    _defineProperty(this, \"modalZIndex\", void 0);\n    _defineProperty(this, \"alertZIndex\", void 0);\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n    _defineProperty(this, \"provider\", void 0);\n    _defineProperty(this, \"communicationProvider\", void 0);\n    _defineProperty(this, \"dappStorageKey\", void 0);\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n    _defineProperty(this, \"torusUrl\", void 0);\n    _defineProperty(this, \"torusIframe\", void 0);\n    _defineProperty(this, \"styleLink\", void 0);\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n  get isLoggedIn() {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      network,\n      showTorusButton = false,\n      useLocalStorage = false,\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      apiKey = \"torus-default\",\n      extraParams = {}\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv);\n    log.info(torusUrl, \"url loaded\");\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n    torusIframeUrl.hash = hashParams.toString(); // Iframe code\n\n    this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\".concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex.toString(), \"\\\"\\n      ></iframe>\"));\n    this.torusAlertContainer = htmlToElement(\"<div id=\\\"torusAlertContainer\\\" style=\\\"display:none; z-index: \".concat(this.alertZIndex.toString(), \"\\\"></div>\"));\n    this.styleLink = htmlToElement(\"<link href=\\\"\".concat(torusUrl, \"/css/widget.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"));\n    const handleSetup = async () => {\n      return new Promise((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata(); // send init params here\n\n            this.torusIframe.contentWindow.postMessage({\n              buttonPosition,\n              apiKey,\n              network: typeof network === \"string\" ? getNetworkConfig(network) : network,\n              dappMetadata,\n              extraParams\n            }, torusIframeUrl.origin);\n            await this._setupWeb3({\n              torusUrl\n            });\n            if (showTorusButton) this.showTorusButton();else this.hideTorusButton();\n            this.isInitialized = true;\n            window.torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n    await documentReady();\n    await handleSetup();\n  }\n  async login() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({\n          isFull: true\n        });\n      } // If user is already logged in, we assume they have given access to the website\n\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest({\n          method: \"solana_requestAccounts\",\n          params: [this.requestedLoginProvider, params.login_hint]\n        }, getRpcPromiseCallback(resolve, reject));\n      });\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      } // This would never happen, but just in case\n\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n  async logout() {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: []\n    });\n    this.requestedLoginProvider = null;\n  }\n  async cleanUp() {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n  hideTorusButton() {\n    this.communicationProvider.hideTorusButton();\n  }\n  showTorusButton() {\n    this.communicationProvider.showTorusButton();\n  }\n  async setProvider(params) {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: _objectSpread({}, params)\n    });\n  }\n  async showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const instanceId = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: []\n    });\n    const finalPath = path ? \"/\".concat(path) : \"\";\n    const finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach(x => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    } // No need to track this window state. Hence, no _handleWindow call.\n\n    const walletWindow = new PopupHandler({\n      url: finalUrl,\n      features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n    });\n    walletWindow.open();\n  }\n  async getUserInfo() {\n    const userInfoResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: []\n    });\n    return userInfoResponse;\n  }\n  async initiateTopup(provider, params) {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: {\n        provider,\n        params,\n        windowId\n      }\n    });\n    return topupResponse;\n  } // Solana specific API\n\n  async sendTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      // params: { message: transaction.serializeMessage().toString(\"hex\") },\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    return response;\n  }\n  async signTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"sign_transaction\",\n      // params: { message: transaction.serializeMessage().toString(\"hex\") },\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    const buf = Buffer.from(response, \"hex\");\n    const sendTx = Transaction.from(buf);\n    return sendTx;\n  }\n  async signAllTransactions(transactions) {\n    const encodedTransactions = transactions.map(x => x.serialize({\n      requireAllSignatures: false\n    }).toString(\"hex\"));\n    const response = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: {\n        message: encodedTransactions\n      }\n    });\n    const allSignedTransaction = response.map(msg => Transaction.from(Buffer.from(msg, \"hex\")));\n    return allSignedTransaction;\n  }\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data\n      }\n    });\n    return response;\n  }\n  async getGaslessPublicKey() {\n    const response = await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: []\n    });\n    return response;\n  } // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  handleDappStorageKey(useLocalStorage) {\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = \"torus-app-\".concat(getWindowId());\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n  async _setupWeb3(providerParams) {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // compose the inPage provider\n\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n    inPageProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        }); // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload, cb);\n    };\n    communicationProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n        }); // for communication methods sending window id in jrpc req params\n\n        _payload.params.windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload, cb);\n    }; // detect solana_requestAccounts and pipe to enable for now\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inPageProvider[m]; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n      const self = this;\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const {\n          method,\n          params = []\n        } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({\n            loginProvider: params[0]\n          });\n          self.login({\n            loginProvider: params[0]\n          }) // eslint-disable-next-line promise/no-callback-in-promise\n          .then(res => cb(null, res)) // eslint-disable-next-line promise/no-callback-in-promise\n          .catch(err => cb(err));\n        }\n        return originalMethod.apply(this, [request, cb]);\n      };\n    }; // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n    await Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n      dappStorageKey: this.dappStorageKey,\n      torusAlertContainer: this.torusAlertContainer,\n      torusIframe: this.torusIframe\n    }))]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };","map":{"version":3,"sources":["../src/messages.ts","../src/interfaces.ts","../src/config.ts","../src/loglevel.ts","../src/utils.ts","../src/baseProvider.ts","../src/embedUtils.ts","../src/PopupHandler.ts","../src/communicationProvider.ts","../src/inPageProvider.ts","../src/siteMetadata.ts","../src/embed.ts"],"names":["errors","disconnected","permanentlyDisconnected","unsupportedSync","method","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","info","connected","chainId","warnings","PAYMENT_PROVIDER","MOONPAY","WYRE","RAMPNETWORK","XANPOOL","MERCURYO","TRANSAK","TORUS_BUILD_ENV","PRODUCTION","DEVELOPMENT","TESTING","BUTTON_POSITION","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","LOGIN_PROVIDER","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","LINE","GITHUB","KAKAO","LINKEDIN","TWITTER","WEIBO","WECHAT","EMAIL_PASSWORDLESS","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","supportedVerifierList","api","prodTorusUrl","localStorageKey","window","location","hostname","loglevel","getLogger","createErrorMiddleware","req","res","next","error","rpc","invalidRequest","message","data","done","log","logStreamDisconnectWarning","remoteLabel","emitter","warningMsg","stack","warn","listenerCount","emit","getWindowId","Math","random","toString","slice","getTorusUrl","buildEnv","torusUrl","logLevel","getUserLanguage","userLanguage","navigator","language","userLanguages","split","Object","prototype","hasOwnProperty","call","config","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","storageAvailable","type","storage","x","setItem","removeItem","e","code","name","length","getPopupFeatures","w","h","dualScreenLeft","screenLeft","undefined","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","systemZoom","left","abs","top","features","getNetworkConfig","label","blockExplorerUrl","displayName","logo","rpcTarget","ticker","tickerName","BaseProvider","SafeEventEmitter","constructor","connectionStream","jsonRpcStreamName","isDuplexStream","Error","messages","isTorus","setMaxListeners","_handleConnect","bind","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","request","sendAsync","mux","ObjectMultiplex","pump","ignoreStream","jsonRpcConnection","createStreamMiddleware","stream","createStream","rpcEngine","JRPCEngine","push","createIdRemapMiddleware","createLoggerMiddleware","origin","middleware","_rpcEngine","jsonRpcConnectionEvents","events","args","Array","isArray","params","Promise","resolve","reject","getRpcPromiseCallback","send","payload","callback","streamName","handleEvent","handle","eventName","handler","handlerArgs","handlerWrapper","removeEventListener","addEventListener","documentReady","readyState","htmlToElement","html","template","createElement","trimmedHtml","trim","innerHTML","content","firstChild","PopupHandler","url","target","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","open","href","focus","close","redirect","locationReplaceOnRedirect","replace","TorusCommunicationProvider","buttonPosition","currentLoginProvider","isIFrameFullScreen","hasEmittedConnection","torusWidgetVisibility","initialized","isLoggedIn","isPermanentlyDisconnected","isConnected","_state","_defaultState","dappStorageKey","languageTranslations","configuration","embedTranslations","windowRefs","on","notificationHandler","COMMUNICATION_NOTIFICATIONS","IFRAME_STATUS","isFullScreen","rid","_displayIframe","isFull","CREATE_WINDOW","windowId","_createPopupBlockAlert","CLOSE_WINDOW","_handleCloseWindow","USER_LOGGED_IN","USER_LOGGED_OUT","torusAlertContainer","torusIframe","COMMUNICATION_JRPC_METHODS","GET_PROVIDER_STATE","_handleWindow","finalUrl","URL","hash","handledWindow","OPENED_WINDOW","once","CLOSED_WINDOW","style","display","right","bottom","assign","hideTorusButton","showTorusButton","cb","_payload","jsonrpc","tryWindowHandle","debug","isRecoverable","errorMessage","EthereumRpcError","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","bindOnLoad","remove","children","attachOnLoad","TorusInPageProvider","accounts","isUnlocked","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","jsonRpcNotificationHandler","PROVIDER_NOTIFICATIONS","ACCOUNTS_CHANGED","UNLOCK_STATE_CHANGED","CHAIN_CHANGED","PROVIDER_JRPC_METHODS","isInternal","err","result","isEthAccounts","finalAccounts","account","dequal","imgExists","img","onload","onerror","src","getSiteName","siteName","querySelector","metaTitle","title","getSiteIcon","icon","from","querySelectorAll","find","_icon","Boolean","getSiteMetadata","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","SET_PROVIDER","isLocalStorageAvailable","preLoadIframe","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","init","enableLogging","network","useLocalStorage","apiKey","extraParams","setAPIKey","setDefaultLevel","enableAll","disableAll","handleDappStorageKey","torusIframeUrl","pathname","endsWith","hashParams","URLSearchParams","append","styleLink","handleSetup","body","dappMetadata","contentWindow","postMessage","_setupWeb3","torus","login","loginProvider","provider","login_hint","logout","LOGOUT","cleanUp","clearInit","isElement","element","Element","Document","contains","setProvider","showWallet","path","instanceId","WALLET_INSTANCE_ID","finalPath","searchParams","keys","forEach","walletWindow","getUserInfo","userInfoResponse","USER_INFO","initiateTopup","topupResponse","TOPUP","sendTransaction","transaction","response","serialize","requireAllSignatures","signTransaction","buf","Buffer","sendTx","Transaction","signAllTransactions","transactions","encodedTransactions","map","allSignedTransaction","msg","signMessage","getGaslessPublicKey","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","BasePostMessageStream","targetWindow","communicationStream","inPageProvider","includes","detectAccountRequestPrototypeModifier","m","originalMethod","self","providerFunc","then","catch","apply","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","all"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Transaction } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport { isDuplexStream } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\n\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: method => \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\"),\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: maxEventListeners => \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \"}\"),\n    invalidRequestArgs: () => \"Expected a single, non-array, object argument.\",\n    invalidRequestMethod: () => \"'args.method' must be a non-empty string.\",\n    invalidRequestParams: () => \"'args.params' must be an object or array if provided.\",\n    invalidLoggerObject: () => \"'args.logger' must be an object if provided.\",\n    invalidLoggerMethod: method => \"'args.logger' must include required method '\".concat(method, \"'.\")\n  },\n  info: {\n    connected: chainId => \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\")\n  },\n  warnings: {}\n};\n\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: \"torus-\".concat(window.location.hostname)\n};\n\nvar log = loglevel.getLogger(\"solana-embed\");\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n\n    next(done => {\n      const {\n        error\n      } = res;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(\"Torus - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = \"Torus: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\nconst getWindowId = () => Math.random().toString(36).slice(2);\nconst getTorusUrl = async buildEnv => {\n  let torusUrl;\n  let logLevel; // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n\n    default:\n      torusUrl = \"https://solana.tor.us\";\n      logLevel = \"error\";\n      break;\n  }\n\n  return {\n    torusUrl,\n    logLevel\n  };\n};\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\nfunction storageAvailable(type) {\n  let storage;\n\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n/**\n * popup handler utils\n */\n\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\nconst getNetworkConfig = label => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.mainnet-beta.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.testnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    default:\n      return undefined;\n  }\n};\n\nclass BaseProvider extends SafeEventEmitter {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"isTorus\", void 0);\n\n    _defineProperty(this, \"_rpcEngine\", void 0);\n\n    _defineProperty(this, \"jsonRpcConnectionEvents\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  send(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  sendAsync(payload) {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n}\n\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\n\nclass PopupHandler extends SafeEventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"features\", void 0);\n\n    _defineProperty(this, \"window\", void 0);\n\n    _defineProperty(this, \"windowTimer\", void 0);\n\n    _defineProperty(this, \"iClosedWindow\", void 0);\n\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n\n    this._setupTimer();\n  }\n\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n\n  open() {\n    var _this$window;\n\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n\n}\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nclass TorusCommunicationProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"windowRefs\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    this._state = _objectSpread$2({}, TorusCommunicationProvider._defaultState); // public state\n\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {}; // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const {\n          isFullScreen,\n          rid\n        } = params;\n\n        this._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const {\n          windowId,\n          url\n        } = params;\n\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const {\n          currentLoginProvider\n        } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn() {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen() {\n    return this._state.isIFrameFullScreen;\n  }\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params) {\n    try {\n      const {\n        torusUrl,\n        dappStorageKey,\n        torusAlertContainer,\n        torusIframe\n      } = params;\n      this.torusUrl = torusUrl;\n      this.dappStorageKey = dappStorageKey;\n      this.torusAlertContainer = torusAlertContainer;\n      this.torusIframe = torusIframe;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const {\n        currentLoginProvider,\n        isLoggedIn\n      } = await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?windowId=\").concat(windowId));\n\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    }\n\n    const handledWindow = new PopupHandler({\n      url: finalUrl,\n      target,\n      features\n    });\n    handledWindow.open();\n\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n\n      return;\n    } // Add to collection only if window is opened\n\n\n    this.windowRefs[windowId] = handledWindow; // We tell the iframe that the window has been successfully opened\n\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: {\n        windowId\n      }\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: {\n          windowId\n        }\n      });\n    });\n  }\n\n  _displayIframe() {\n    let {\n      isFull = false,\n      rid = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: {\n        isIFrameFullScreen: isFull,\n        rid\n      }\n    });\n  }\n\n  hideTorusButton() {\n    this._state.torusWidgetVisibility = false;\n\n    this._displayIframe();\n  }\n\n  showTorusButton() {\n    this._state.torusWidgetVisibility = true;\n\n    this._displayIframe();\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    const cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(currentLoginProvider, isLoggedIn) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        currentLoginProvider,\n        isLoggedIn\n      });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  } // Called if the iframe wants to close the window cause it is done processing the request\n\n\n  _handleCloseWindow(params) {\n    const {\n      windowId\n    } = params;\n\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  async _createPopupBlockAlert(windowId, url) {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  getLogoUrl() {\n    const logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n    return logoUrl;\n  }\n\n}\n\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nclass TorusInPageProvider extends BaseProvider {\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"chainId\", void 0);\n\n    _defineProperty(this, \"selectedAddress\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    this._state = _objectSpread$1({}, TorusInPageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.chainId = null;\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params);\n      }\n    }; // json rpc notification listener\n\n\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked\n      } = await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n\n      this._handleChainChanged({\n        chainId\n      });\n\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n\n        return;\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // defensive programming\n    let finalAccounts = accounts;\n\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n\n  _handleChainChanged() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n        chainId\n      });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n\n}\n\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\n/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n\n      img.onload = () => resolve(true);\n\n      img.onerror = () => resolve(false);\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nasync function getSiteIcon(window) {\n  try {\n    const {\n      document\n    } = window; // Use the site's favicon if it exists\n\n    let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    } // Search through available icons in no particular order\n\n\n    icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = \"\".concat(torusUrl, \"/frame\");\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  constructor() {\n    let {\n      modalZIndex = 99999\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"isInitialized\", void 0);\n\n    _defineProperty(this, \"torusAlert\", void 0);\n\n    _defineProperty(this, \"modalZIndex\", void 0);\n\n    _defineProperty(this, \"alertZIndex\", void 0);\n\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    _defineProperty(this, \"communicationProvider\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    _defineProperty(this, \"styleLink\", void 0);\n\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn() {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      network,\n      showTorusButton = false,\n      useLocalStorage = false,\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      apiKey = \"torus-default\",\n      extraParams = {}\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv);\n    log.info(torusUrl, \"url loaded\");\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n    torusIframeUrl.hash = hashParams.toString(); // Iframe code\n\n    this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\".concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex.toString(), \"\\\"\\n      ></iframe>\"));\n    this.torusAlertContainer = htmlToElement(\"<div id=\\\"torusAlertContainer\\\" style=\\\"display:none; z-index: \".concat(this.alertZIndex.toString(), \"\\\"></div>\"));\n    this.styleLink = htmlToElement(\"<link href=\\\"\".concat(torusUrl, \"/css/widget.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"));\n\n    const handleSetup = async () => {\n      return new Promise((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata(); // send init params here\n\n            this.torusIframe.contentWindow.postMessage({\n              buttonPosition,\n              apiKey,\n              network: typeof network === \"string\" ? getNetworkConfig(network) : network,\n              dappMetadata,\n              extraParams\n            }, torusIframeUrl.origin);\n            await this._setupWeb3({\n              torusUrl\n            });\n            if (showTorusButton) this.showTorusButton();else this.hideTorusButton();\n            this.isInitialized = true;\n            window.torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({\n          isFull: true\n        });\n      } // If user is already logged in, we assume they have given access to the website\n\n\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest({\n          method: \"solana_requestAccounts\",\n          params: [this.requestedLoginProvider, params.login_hint]\n        }, getRpcPromiseCallback(resolve, reject));\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      } // This would never happen, but just in case\n\n\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async logout() {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: []\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp() {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n\n    this.clearInit();\n  }\n\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof Document;\n    }\n\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n\n    this.isInitialized = false;\n  }\n\n  hideTorusButton() {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton() {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params) {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: _objectSpread({}, params)\n    });\n  }\n\n  async showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const instanceId = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: []\n    });\n    const finalPath = path ? \"/\".concat(path) : \"\";\n    const finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach(x => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n\n    if (this.dappStorageKey) {\n      finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    } // No need to track this window state. Hence, no _handleWindow call.\n\n\n    const walletWindow = new PopupHandler({\n      url: finalUrl,\n      features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n    });\n    walletWindow.open();\n  }\n\n  async getUserInfo() {\n    const userInfoResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: []\n    });\n    return userInfoResponse;\n  }\n\n  async initiateTopup(provider, params) {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n\n    this.communicationProvider._handleWindow(windowId);\n\n    const topupResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: {\n        provider,\n        params,\n        windowId\n      }\n    });\n    return topupResponse;\n  } // Solana specific API\n\n\n  async sendTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      // params: { message: transaction.serializeMessage().toString(\"hex\") },\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    return response;\n  }\n\n  async signTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"sign_transaction\",\n      // params: { message: transaction.serializeMessage().toString(\"hex\") },\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    const buf = Buffer.from(response, \"hex\");\n    const sendTx = Transaction.from(buf);\n    return sendTx;\n  }\n\n  async signAllTransactions(transactions) {\n    const encodedTransactions = transactions.map(x => x.serialize({\n      requireAllSignatures: false\n    }).toString(\"hex\"));\n    const response = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: {\n        message: encodedTransactions\n      }\n    });\n    const allSignedTransaction = response.map(msg => Transaction.from(Buffer.from(msg, \"hex\")));\n    return allSignedTransaction;\n  }\n\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data\n      }\n    });\n    return response;\n  }\n\n  async getGaslessPublicKey() {\n    const response = await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: []\n    });\n    return response;\n  } // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n\n  handleDappStorageKey(useLocalStorage) {\n    let dappStorageKey = \"\";\n\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = \"torus-app-\".concat(getWindowId());\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  async _setupWeb3(providerParams) {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // compose the inPage provider\n\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        }); // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n\n\n        _payload.windowId = windowId;\n      }\n\n      inPageProvider._rpcEngine.handle(_payload, cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n\n        }); // for communication methods sending window id in jrpc req params\n\n\n        _payload.params.windowId = windowId;\n      }\n\n      communicationProvider._rpcEngine.handle(_payload, cb);\n    }; // detect solana_requestAccounts and pipe to enable for now\n\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inPageProvider[m]; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n      const self = this;\n\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const {\n          method,\n          params = []\n        } = request;\n\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({\n            loginProvider: params[0]\n          });\n          self.login({\n            loginProvider: params[0]\n          }) // eslint-disable-next-line promise/no-callback-in-promise\n          .then(res => cb(null, res)) // eslint-disable-next-line promise/no-callback-in-promise\n          .catch(err => cb(err));\n        }\n\n        return originalMethod.apply(this, [request, cb]);\n      };\n    }; // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n\n\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n    await Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n      dappStorageKey: this.dappStorageKey,\n      torusAlertContainer: this.torusAlertContainer,\n      torusIframe: this.torusIframe\n    }))]);\n    log.debug(\"Torus - injected provider\");\n  }\n\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };\n//# sourceMappingURL=solanaEmbed.esm.js.map\n"]},"metadata":{},"sourceType":"module"}