{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar util_1 = require(\"./util\");\nvar TRANSACTION_TYPE = 0;\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nvar Transaction = /** @class */function (_super) {\n  __extends(Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  function Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _this = this;\n    var _a;\n    _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    })) || this;\n    _this.common = _this._validateTxV(_this.v, opts.common);\n    _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n    if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {\n      var msg = _this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n      throw new Error(msg);\n    }\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n    if (_this.common.gteHardfork('spuriousDragon')) {\n      if (!_this.isSigned()) {\n        _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = _this.v;\n        var chainIdDoubled = _this.common.chainIdBN().muln(2);\n        // v and chain ID meet EIP-155 conditions\n        if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n          _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n    if (_this.common.isActivatedEIP(3860)) {\n      (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);\n    }\n    var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n    if (freeze) {\n      Object.freeze(_this);\n    }\n    return _this;\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n  Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return new Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n  Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var values = ethereumjs_util_1.rlp.decode(serialized);\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n    return this.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link Transaction.fromSerializedTx})\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link Transaction.fromSerializedTx} constructor\n   */\n  Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n  Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n    var _a = __read(values, 9),\n      nonce = _a[0],\n      gasPrice = _a[1],\n      gasLimit = _a[2],\n      to = _a[3],\n      value = _a[4],\n      data = _a[5],\n      v = _a[6],\n      r = _a[7],\n      s = _a[8];\n    (0, ethereumjs_util_1.validateNoLeadingZeroes)({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      value: value,\n      v: v,\n      r: r,\n      s: s\n    });\n    return new Transaction({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      v: v,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n  Transaction.prototype.raw = function () {\n    return [(0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value), this.data, this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]), this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]), this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n  Transaction.prototype.serialize = function () {\n    return ethereumjs_util_1.rlp.encode(this.raw());\n  };\n  Transaction.prototype._getMessageToSign = function () {\n    var values = [(0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value), this.data];\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      values.push((0, ethereumjs_util_1.toBuffer)(this.common.chainIdBN()));\n      values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n      values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n    }\n    return values;\n  };\n  Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n    var message = this._getMessageToSign();\n    if (hashMessage) {\n      return (0, ethereumjs_util_1.rlphash)(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  Transaction.prototype.getDataFee = function () {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: _super.prototype.getDataFee.call(this),\n        hardfork: this.common.hardfork()\n      };\n    }\n    return _super.prototype.getDataFee.call(this);\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  Transaction.prototype.hash = function () {\n    // In contrast to the tx type transaction implementations the `hash()` function\n    // for the legacy tx does not throw if the tx is not signed.\n    // This has been considered for inclusion but lead to unexpected backwards\n    // compatibility problems (no concrete reference found, needs validation).\n    //\n    // For context see also https://github.com/ethereumjs/ethereumjs-monorepo/pull/1445,\n    // September, 2021 as well as work done before.\n    //\n    // This should be updated along the next major version release by adding:\n    //\n    //if (!this.isSigned()) {\n    //  const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n    //  throw new Error(msg)\n    //}\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = (0, ethereumjs_util_1.rlphash)(this.raw());\n      }\n      return this.cache.hash;\n    }\n    return (0, ethereumjs_util_1.rlphash)(this.raw());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  Transaction.prototype.getMessageToVerifySignature = function () {\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('This transaction is not signed');\n      throw new Error(msg);\n    }\n    var message = this._getMessageToSign();\n    return (0, ethereumjs_util_1.rlphash)(message);\n  };\n  /**\n   * Returns the public key of the sender\n   */\n  Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n    var msgHash = this.getMessageToVerifySignature();\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n      throw new Error(msg);\n    }\n    var _b = this,\n      v = _b.v,\n      r = _b.r,\n      s = _b.s;\n    try {\n      return (0, ethereumjs_util_1.ecrecover)(msgHash, v, (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined);\n    } catch (e) {\n      var msg = this._errorMsg('Invalid Signature');\n      throw new Error(msg);\n    }\n  };\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n  Transaction.prototype._processSignature = function (v, r, s) {\n    var vBN = new ethereumjs_util_1.BN(v);\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      vBN.iadd(this.common.chainIdBN().muln(2).addn(8));\n    }\n    var opts = {\n      common: this.common\n    };\n    return Transaction.fromTxData({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v: vBN,\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n  Transaction.prototype.toJSON = function () {\n    return {\n      nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n      gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),\n      gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, ethereumjs_util_1.bnToHex)(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined\n    };\n  };\n  /**\n   * Validates tx's `v` value\n   */\n  Transaction.prototype._validateTxV = function (v, common) {\n    var chainIdBN;\n    // No unsigned tx and EIP-155 activated and chain ID included\n    if (v !== undefined && !v.eqn(0) && (!common || common.gteHardfork('spuriousDragon')) && !v.eqn(27) && !v.eqn(28)) {\n      if (common) {\n        var chainIdDoubled = common.chainIdBN().muln(2);\n        var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n        if (!isValidEIP155V) {\n          throw new Error(\"Incompatible EIP155-based V \".concat(v, \" and chain id \").concat(common.chainIdBN(), \". See the Common parameter of the Transaction constructor to set the chain id.\"));\n        }\n      } else {\n        // Derive the original chain ID\n        var numSub = void 0;\n        if (v.subn(35).isEven()) {\n          numSub = 35;\n        } else {\n          numSub = 36;\n        }\n        // Use derived chain ID to create a proper Common\n        chainIdBN = v.subn(numSub).divn(2);\n      }\n    }\n    return this._getCommon(common, chainIdBN);\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n  Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n    return this.common.gteHardfork('spuriousDragon');\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n  Transaction.prototype._signedTxImplementsEIP155 = function () {\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('This transaction is not signed');\n      throw new Error(msg);\n    }\n    var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon');\n    // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n    var v = this.v;\n    var chainIdDoubled = this.common.chainIdBN().muln(2);\n    var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n  };\n  /**\n   * Return a compact error string representation of the object\n   */\n  Transaction.prototype.errorStr = function () {\n    var errorStr = this._getSharedErrorPostfix();\n    errorStr += \" gasPrice=\".concat(this.gasPrice);\n    return errorStr;\n  };\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  Transaction.prototype._errorMsg = function (msg) {\n    return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n  };\n  return Transaction;\n}(baseTransaction_1.BaseTransaction);\nexports.default = Transaction;","map":{"version":3,"sources":["../src/legacyTransaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar util_1 = require(\"./util\");\nvar TRANSACTION_TYPE = 0;\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nvar Transaction = /** @class */ (function (_super) {\n    __extends(Transaction, _super);\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    function Transaction(txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        var _this = this;\n        var _a;\n        _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE })) || this;\n        _this.common = _this._validateTxV(_this.v, opts.common);\n        _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n        if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {\n            var msg = _this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        _this._validateCannotExceedMaxInteger({ gasPrice: _this.gasPrice });\n        if (_this.common.gteHardfork('spuriousDragon')) {\n            if (!_this.isSigned()) {\n                _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n            }\n            else {\n                // EIP155 spec:\n                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n                // then when computing the hash of a transaction for purposes of signing or recovering\n                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n                var v = _this.v;\n                var chainIdDoubled = _this.common.chainIdBN().muln(2);\n                // v and chain ID meet EIP-155 conditions\n                if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n                    _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n                }\n            }\n        }\n        if (_this.common.isActivatedEIP(3860)) {\n            (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);\n        }\n        var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n        if (freeze) {\n            Object.freeze(_this);\n        }\n        return _this;\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n     *\n     * Notes:\n     * - All parameters are optional and have some basic default values\n     */\n    Transaction.fromTxData = function (txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        return new Transaction(txData, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     */\n    Transaction.fromSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        var values = ethereumjs_util_1.rlp.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input. Must be array');\n        }\n        return this.fromValuesArray(values, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     * (alias of {@link Transaction.fromSerializedTx})\n     *\n     * @deprecated this constructor alias is deprecated and will be removed\n     * in favor of the {@link Transaction.fromSerializedTx} constructor\n     */\n    Transaction.fromRlpSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        return Transaction.fromSerializedTx(serialized, opts);\n    };\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     */\n    Transaction.fromValuesArray = function (values, opts) {\n        if (opts === void 0) { opts = {}; }\n        // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n        // This happens if you get the RLP data from `raw()`\n        if (values.length !== 6 && values.length !== 9) {\n            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n        }\n        var _a = __read(values, 9), nonce = _a[0], gasPrice = _a[1], gasLimit = _a[2], to = _a[3], value = _a[4], data = _a[5], v = _a[6], r = _a[7], s = _a[8];\n        (0, ethereumjs_util_1.validateNoLeadingZeroes)({ nonce: nonce, gasPrice: gasPrice, gasLimit: gasLimit, value: value, v: v, r: r, s: s });\n        return new Transaction({\n            nonce: nonce,\n            gasPrice: gasPrice,\n            gasLimit: gasLimit,\n            to: to,\n            value: value,\n            data: data,\n            v: v,\n            r: r,\n            s: s,\n        }, opts);\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     *\n     * For legacy txs this is also the correct format to add transactions\n     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n     * for typed txs).\n     *\n     * For an unsigned tx this method returns the empty Buffer values\n     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n     * representation have a look at {@link Transaction.getMessageToSign}.\n     */\n    Transaction.prototype.raw = function () {\n        return [\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),\n            this.data,\n            this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    };\n    /**\n     * Returns the serialized encoding of the legacy transaction.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link Transaction.getMessageToSign}.\n     */\n    Transaction.prototype.serialize = function () {\n        return ethereumjs_util_1.rlp.encode(this.raw());\n    };\n    Transaction.prototype._getMessageToSign = function () {\n        var values = [\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),\n            this.data,\n        ];\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            values.push((0, ethereumjs_util_1.toBuffer)(this.common.chainIdBN()));\n            values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n            values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n        }\n        return values;\n    };\n    Transaction.prototype.getMessageToSign = function (hashMessage) {\n        if (hashMessage === void 0) { hashMessage = true; }\n        var message = this._getMessageToSign();\n        if (hashMessage) {\n            return (0, ethereumjs_util_1.rlphash)(message);\n        }\n        else {\n            return message;\n        }\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    Transaction.prototype.getDataFee = function () {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: _super.prototype.getDataFee.call(this),\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return _super.prototype.getDataFee.call(this);\n    };\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    Transaction.prototype.getUpfrontCost = function () {\n        return this.gasLimit.mul(this.gasPrice).add(this.value);\n    };\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    Transaction.prototype.hash = function () {\n        // In contrast to the tx type transaction implementations the `hash()` function\n        // for the legacy tx does not throw if the tx is not signed.\n        // This has been considered for inclusion but lead to unexpected backwards\n        // compatibility problems (no concrete reference found, needs validation).\n        //\n        // For context see also https://github.com/ethereumjs/ethereumjs-monorepo/pull/1445,\n        // September, 2021 as well as work done before.\n        //\n        // This should be updated along the next major version release by adding:\n        //\n        //if (!this.isSigned()) {\n        //  const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n        //  throw new Error(msg)\n        //}\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = (0, ethereumjs_util_1.rlphash)(this.raw());\n            }\n            return this.cache.hash;\n        }\n        return (0, ethereumjs_util_1.rlphash)(this.raw());\n    };\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    Transaction.prototype.getMessageToVerifySignature = function () {\n        if (!this.isSigned()) {\n            var msg = this._errorMsg('This transaction is not signed');\n            throw new Error(msg);\n        }\n        var message = this._getMessageToSign();\n        return (0, ethereumjs_util_1.rlphash)(message);\n    };\n    /**\n     * Returns the public key of the sender\n     */\n    Transaction.prototype.getSenderPublicKey = function () {\n        var _a;\n        var msgHash = this.getMessageToVerifySignature();\n        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        // Reasoning: https://ethereum.stackexchange.com/a/55728\n        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n            throw new Error(msg);\n        }\n        var _b = this, v = _b.v, r = _b.r, s = _b.s;\n        try {\n            return (0, ethereumjs_util_1.ecrecover)(msgHash, v, (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined);\n        }\n        catch (e) {\n            var msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    };\n    /**\n     * Process the v, r, s values from the `sign` method of the base transaction.\n     */\n    Transaction.prototype._processSignature = function (v, r, s) {\n        var vBN = new ethereumjs_util_1.BN(v);\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            vBN.iadd(this.common.chainIdBN().muln(2).addn(8));\n        }\n        var opts = {\n            common: this.common,\n        };\n        return Transaction.fromTxData({\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            v: vBN,\n            r: new ethereumjs_util_1.BN(r),\n            s: new ethereumjs_util_1.BN(s),\n        }, opts);\n    };\n    /**\n     * Returns an object with the JSON representation of the transaction.\n     */\n    Transaction.prototype.toJSON = function () {\n        return {\n            nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n            gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),\n            gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, ethereumjs_util_1.bnToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined,\n        };\n    };\n    /**\n     * Validates tx's `v` value\n     */\n    Transaction.prototype._validateTxV = function (v, common) {\n        var chainIdBN;\n        // No unsigned tx and EIP-155 activated and chain ID included\n        if (v !== undefined &&\n            !v.eqn(0) &&\n            (!common || common.gteHardfork('spuriousDragon')) &&\n            !v.eqn(27) &&\n            !v.eqn(28)) {\n            if (common) {\n                var chainIdDoubled = common.chainIdBN().muln(2);\n                var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n                if (!isValidEIP155V) {\n                    throw new Error(\"Incompatible EIP155-based V \".concat(v, \" and chain id \").concat(common.chainIdBN(), \". See the Common parameter of the Transaction constructor to set the chain id.\"));\n                }\n            }\n            else {\n                // Derive the original chain ID\n                var numSub = void 0;\n                if (v.subn(35).isEven()) {\n                    numSub = 35;\n                }\n                else {\n                    numSub = 36;\n                }\n                // Use derived chain ID to create a proper Common\n                chainIdBN = v.subn(numSub).divn(2);\n            }\n        }\n        return this._getCommon(common, chainIdBN);\n    };\n    /**\n     * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n     */\n    Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n        return this.common.gteHardfork('spuriousDragon');\n    };\n    /**\n     * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n     */\n    Transaction.prototype._signedTxImplementsEIP155 = function () {\n        if (!this.isSigned()) {\n            var msg = this._errorMsg('This transaction is not signed');\n            throw new Error(msg);\n        }\n        var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon');\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = this.v;\n        var chainIdDoubled = this.common.chainIdBN().muln(2);\n        var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n        return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n    };\n    /**\n     * Return a compact error string representation of the object\n     */\n    Transaction.prototype.errorStr = function () {\n        var errorStr = this._getSharedErrorPostfix();\n        errorStr += \" gasPrice=\".concat(this.gasPrice);\n        return errorStr;\n    };\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    Transaction.prototype._errorMsg = function (msg) {\n        return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n    };\n    return Transaction;\n}(baseTransaction_1.BaseTransaction));\nexports.default = Transaction;\n//# sourceMappingURL=legacyTransaction.js.map"]},"metadata":{},"sourceType":"script"}