{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar types_1 = require(\"./types\");\nvar util_1 = require(\"./util\");\nvar TRANSACTION_TYPE = 1;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\nvar AccessListEIP2930Transaction = /** @class */function (_super) {\n  __extends(AccessListEIP2930Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  function AccessListEIP2930Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _this = this;\n    var _a, _b;\n    _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    })) || this;\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n    _this.DEFAULT_HARDFORK = 'berlin';\n    var chainId = txData.chainId,\n      accessList = txData.accessList,\n      gasPrice = txData.gasPrice;\n    _this.common = _this._getCommon(opts.common, chainId);\n    _this.chainId = _this.common.chainIdBN();\n    // EIP-2718 check is done in Common\n    if (!_this.common.isActivatedEIP(2930)) {\n      throw new Error('EIP-2930 not enabled on Common');\n    }\n    _this.activeCapabilities = _this.activeCapabilities.concat([2718, 2930]);\n    // Populate the access list fields\n    var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n    _this.accessList = accessListData.accessList;\n    _this.AccessListJSON = accessListData.AccessListJSON;\n    // Verify the access list format.\n    util_1.AccessLists.verifyAccessList(_this.accessList);\n    _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasPrice === '' ? '0x' : gasPrice));\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n    if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {\n      var msg = _this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n      throw new Error(msg);\n    }\n    if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n      var msg = _this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n      throw new Error(msg);\n    }\n    if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      var msg = _this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n      throw new Error(msg);\n    }\n    if (_this.common.isActivatedEIP(3860)) {\n      (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);\n    }\n    var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n    if (freeze) {\n      Object.freeze(_this);\n    }\n    return _this;\n  }\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderR\", {\n    /**\n     * EIP-2930 alias for `r`\n     *\n     * @deprecated use `r` instead\n     */\n    get: function () {\n      return this.r;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderS\", {\n    /**\n     * EIP-2930 alias for `s`\n     *\n     * @deprecated use `s` instead\n     */\n    get: function () {\n      return this.s;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"yParity\", {\n    /**\n     * EIP-2930 alias for `v`\n     *\n     * @deprecated use `v` instead\n     */\n    get: function () {\n      return this.v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  AccessListEIP2930Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return new AccessListEIP2930Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   */\n  AccessListEIP2930Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\"Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: \".concat(TRANSACTION_TYPE, \", received: \").concat(serialized.slice(0, 1).toString('hex')));\n    }\n    var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n    return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link AccessListEIP2930Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link AccessListEIP2930Transaction.fromSerializedTx} constructor\n   */\n  AccessListEIP2930Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return AccessListEIP2930Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   */\n  AccessListEIP2930Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    if (values.length !== 8 && values.length !== 11) {\n      throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n    }\n    var _a = __read(values, 11),\n      chainId = _a[0],\n      nonce = _a[1],\n      gasPrice = _a[2],\n      gasLimit = _a[3],\n      to = _a[4],\n      value = _a[5],\n      data = _a[6],\n      accessList = _a[7],\n      v = _a[8],\n      r = _a[9],\n      s = _a[10];\n    (0, ethereumjs_util_1.validateNoLeadingZeroes)({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      value: value,\n      v: v,\n      r: r,\n      s: s\n    });\n    var emptyAccessList = [];\n    return new AccessListEIP2930Transaction({\n      chainId: new ethereumjs_util_1.BN(chainId),\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,\n      v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  AccessListEIP2930Transaction.prototype.getDataFee = function () {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n    var cost = _super.prototype.getDataFee.call(this);\n    cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork()\n      };\n    }\n    return cost;\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  AccessListEIP2930Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   *\n   * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n   */\n  AccessListEIP2930Transaction.prototype.raw = function () {\n    return [(0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.chainId), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value), this.data, this.accessList, this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]), this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]), this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the EIP-2930 transaction.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  AccessListEIP2930Transaction.prototype.serialize = function () {\n    var base = this.raw();\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n  };\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  AccessListEIP2930Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n    var base = this.raw().slice(0, 8);\n    var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n    if (hashMessage) {\n      return (0, ethereumjs_util_1.keccak256)(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  AccessListEIP2930Transaction.prototype.hash = function () {\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n      throw new Error(msg);\n    }\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = (0, ethereumjs_util_1.keccak256)(this.serialize());\n      }\n      return this.cache.hash;\n    }\n    return (0, ethereumjs_util_1.keccak256)(this.serialize());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  AccessListEIP2930Transaction.prototype.getMessageToVerifySignature = function () {\n    return this.getMessageToSign();\n  };\n  /**\n   * Returns the public key of the sender\n   */\n  AccessListEIP2930Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('Cannot call this method if transaction is not signed');\n      throw new Error(msg);\n    }\n    var msgHash = this.getMessageToVerifySignature();\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n      throw new Error(msg);\n    }\n    var _b = this,\n      yParity = _b.yParity,\n      r = _b.r,\n      s = _b.s;\n    try {\n      return (0, ethereumjs_util_1.ecrecover)(msgHash, yParity.addn(27),\n      // Recover the 27 which was stripped from ecsign\n      (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s));\n    } catch (e) {\n      var msg = this._errorMsg('Invalid Signature');\n      throw new Error(msg);\n    }\n  };\n  AccessListEIP2930Transaction.prototype._processSignature = function (v, r, s) {\n    var opts = {\n      common: this.common\n    };\n    return AccessListEIP2930Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: new ethereumjs_util_1.BN(v - 27),\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  AccessListEIP2930Transaction.prototype.toJSON = function () {\n    var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n    return {\n      chainId: (0, ethereumjs_util_1.bnToHex)(this.chainId),\n      nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n      gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),\n      gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, ethereumjs_util_1.bnToHex)(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined\n    };\n  };\n  /**\n   * Return a compact error string representation of the object\n   */\n  AccessListEIP2930Transaction.prototype.errorStr = function () {\n    var _a, _b;\n    var errorStr = this._getSharedErrorPostfix();\n    // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n    errorStr += \" gasPrice=\".concat(this.gasPrice, \" accessListCount=\").concat((_b = (_a = this.accessList) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);\n    return errorStr;\n  };\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  AccessListEIP2930Transaction.prototype._errorMsg = function (msg) {\n    return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n  };\n  return AccessListEIP2930Transaction;\n}(baseTransaction_1.BaseTransaction);\nexports.default = AccessListEIP2930Transaction;","map":{"version":3,"sources":["../src/eip2930Transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar baseTransaction_1 = require(\"./baseTransaction\");\nvar types_1 = require(\"./types\");\nvar util_1 = require(\"./util\");\nvar TRANSACTION_TYPE = 1;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\nvar AccessListEIP2930Transaction = /** @class */ (function (_super) {\n    __extends(AccessListEIP2930Transaction, _super);\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    function AccessListEIP2930Transaction(txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        var _this = this;\n        var _a, _b;\n        _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE })) || this;\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        _this.DEFAULT_HARDFORK = 'berlin';\n        var chainId = txData.chainId, accessList = txData.accessList, gasPrice = txData.gasPrice;\n        _this.common = _this._getCommon(opts.common, chainId);\n        _this.chainId = _this.common.chainIdBN();\n        // EIP-2718 check is done in Common\n        if (!_this.common.isActivatedEIP(2930)) {\n            throw new Error('EIP-2930 not enabled on Common');\n        }\n        _this.activeCapabilities = _this.activeCapabilities.concat([2718, 2930]);\n        // Populate the access list fields\n        var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n        _this.accessList = accessListData.accessList;\n        _this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_1.AccessLists.verifyAccessList(_this.accessList);\n        _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasPrice === '' ? '0x' : gasPrice));\n        _this._validateCannotExceedMaxInteger({\n            gasPrice: _this.gasPrice,\n        });\n        if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {\n            var msg = _this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n            throw new Error(msg);\n        }\n        if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n            var msg = _this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n            throw new Error(msg);\n        }\n        if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            var msg = _this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n            throw new Error(msg);\n        }\n        if (_this.common.isActivatedEIP(3860)) {\n            (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);\n        }\n        var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n        if (freeze) {\n            Object.freeze(_this);\n        }\n        return _this;\n    }\n    Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderR\", {\n        /**\n         * EIP-2930 alias for `r`\n         *\n         * @deprecated use `r` instead\n         */\n        get: function () {\n            return this.r;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderS\", {\n        /**\n         * EIP-2930 alias for `s`\n         *\n         * @deprecated use `s` instead\n         */\n        get: function () {\n            return this.s;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AccessListEIP2930Transaction.prototype, \"yParity\", {\n        /**\n         * EIP-2930 alias for `v`\n         *\n         * @deprecated use `v` instead\n         */\n        get: function () {\n            return this.v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    AccessListEIP2930Transaction.fromTxData = function (txData, opts) {\n        if (opts === void 0) { opts = {}; }\n        return new AccessListEIP2930Transaction(txData, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     */\n    AccessListEIP2930Transaction.fromSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n            throw new Error(\"Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: \".concat(TRANSACTION_TYPE, \", received: \").concat(serialized\n                .slice(0, 1)\n                .toString('hex')));\n        }\n        var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n    };\n    /**\n     * Instantiate a transaction from the serialized tx.\n     * (alias of {@link AccessListEIP2930Transaction.fromSerializedTx})\n     *\n     * Note: This means that the Buffer should start with 0x01.\n     *\n     * @deprecated this constructor alias is deprecated and will be removed\n     * in favor of the {@link AccessListEIP2930Transaction.fromSerializedTx} constructor\n     */\n    AccessListEIP2930Transaction.fromRlpSerializedTx = function (serialized, opts) {\n        if (opts === void 0) { opts = {}; }\n        return AccessListEIP2930Transaction.fromSerializedTx(serialized, opts);\n    };\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     */\n    AccessListEIP2930Transaction.fromValuesArray = function (values, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (values.length !== 8 && values.length !== 11) {\n            throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n        }\n        var _a = __read(values, 11), chainId = _a[0], nonce = _a[1], gasPrice = _a[2], gasLimit = _a[3], to = _a[4], value = _a[5], data = _a[6], accessList = _a[7], v = _a[8], r = _a[9], s = _a[10];\n        (0, ethereumjs_util_1.validateNoLeadingZeroes)({ nonce: nonce, gasPrice: gasPrice, gasLimit: gasLimit, value: value, v: v, r: r, s: s });\n        var emptyAccessList = [];\n        return new AccessListEIP2930Transaction({\n            chainId: new ethereumjs_util_1.BN(chainId),\n            nonce: nonce,\n            gasPrice: gasPrice,\n            gasLimit: gasLimit,\n            to: to,\n            value: value,\n            data: data,\n            accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,\n            v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n            r: r,\n            s: s,\n        }, opts);\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    AccessListEIP2930Transaction.prototype.getDataFee = function () {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        var cost = _super.prototype.getDataFee.call(this);\n        cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: cost,\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return cost;\n    };\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    AccessListEIP2930Transaction.prototype.getUpfrontCost = function () {\n        return this.gasLimit.mul(this.gasPrice).add(this.value);\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     *\n     * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n     */\n    AccessListEIP2930Transaction.prototype.raw = function () {\n        return [\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.chainId),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    };\n    /**\n     * Returns the serialized encoding of the EIP-2930 transaction.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    AccessListEIP2930Transaction.prototype.serialize = function () {\n        var base = this.raw();\n        return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n    };\n    /**\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n     * ```\n     *\n     * @param hashMessage - Return hashed message if set to true (default: true)\n     */\n    AccessListEIP2930Transaction.prototype.getMessageToSign = function (hashMessage) {\n        if (hashMessage === void 0) { hashMessage = true; }\n        var base = this.raw().slice(0, 8);\n        var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n        if (hashMessage) {\n            return (0, ethereumjs_util_1.keccak256)(message);\n        }\n        else {\n            return message;\n        }\n    };\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    AccessListEIP2930Transaction.prototype.hash = function () {\n        if (!this.isSigned()) {\n            var msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = (0, ethereumjs_util_1.keccak256)(this.serialize());\n            }\n            return this.cache.hash;\n        }\n        return (0, ethereumjs_util_1.keccak256)(this.serialize());\n    };\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    AccessListEIP2930Transaction.prototype.getMessageToVerifySignature = function () {\n        return this.getMessageToSign();\n    };\n    /**\n     * Returns the public key of the sender\n     */\n    AccessListEIP2930Transaction.prototype.getSenderPublicKey = function () {\n        var _a;\n        if (!this.isSigned()) {\n            var msg = this._errorMsg('Cannot call this method if transaction is not signed');\n            throw new Error(msg);\n        }\n        var msgHash = this.getMessageToVerifySignature();\n        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        // Reasoning: https://ethereum.stackexchange.com/a/55728\n        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n            var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n            throw new Error(msg);\n        }\n        var _b = this, yParity = _b.yParity, r = _b.r, s = _b.s;\n        try {\n            return (0, ethereumjs_util_1.ecrecover)(msgHash, yParity.addn(27), // Recover the 27 which was stripped from ecsign\n            (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s));\n        }\n        catch (e) {\n            var msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    };\n    AccessListEIP2930Transaction.prototype._processSignature = function (v, r, s) {\n        var opts = {\n            common: this.common,\n        };\n        return AccessListEIP2930Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: new ethereumjs_util_1.BN(v - 27),\n            r: new ethereumjs_util_1.BN(r),\n            s: new ethereumjs_util_1.BN(s),\n        }, opts);\n    };\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    AccessListEIP2930Transaction.prototype.toJSON = function () {\n        var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n        return {\n            chainId: (0, ethereumjs_util_1.bnToHex)(this.chainId),\n            nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n            gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),\n            gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, ethereumjs_util_1.bnToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            accessList: accessListJSON,\n            v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined,\n        };\n    };\n    /**\n     * Return a compact error string representation of the object\n     */\n    AccessListEIP2930Transaction.prototype.errorStr = function () {\n        var _a, _b;\n        var errorStr = this._getSharedErrorPostfix();\n        // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n        errorStr += \" gasPrice=\".concat(this.gasPrice, \" accessListCount=\").concat((_b = (_a = this.accessList) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);\n        return errorStr;\n    };\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    AccessListEIP2930Transaction.prototype._errorMsg = function (msg) {\n        return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n    };\n    return AccessListEIP2930Transaction;\n}(baseTransaction_1.BaseTransaction));\nexports.default = AccessListEIP2930Transaction;\n//# sourceMappingURL=eip2930Transaction.js.map"]},"metadata":{},"sourceType":"script"}