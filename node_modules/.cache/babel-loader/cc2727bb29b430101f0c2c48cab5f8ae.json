{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccessLists = exports.checkMaxInitCodeSize = void 0;\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\nfunction checkMaxInitCodeSize(common, length) {\n  if (length > common.param('vm', 'maxInitCodeSize')) {\n    throw new Error(\"the initcode size of this transaction is too large: it is \".concat(length, \" while the max is \").concat(common.param('vm', 'maxInitCodeSize')));\n  }\n}\nexports.checkMaxInitCodeSize = checkMaxInitCodeSize;\nvar AccessLists = /** @class */function () {\n  function AccessLists() {}\n  AccessLists.getAccessListData = function (accessList) {\n    var AccessListJSON;\n    var bufferAccessList;\n    if (accessList && (0, types_1.isAccessList)(accessList)) {\n      AccessListJSON = accessList;\n      var newAccessList = [];\n      for (var i = 0; i < accessList.length; i++) {\n        var item = accessList[i];\n        var addressBuffer = (0, ethereumjs_util_1.toBuffer)(item.address);\n        var storageItems = [];\n        for (var index = 0; index < item.storageKeys.length; index++) {\n          storageItems.push((0, ethereumjs_util_1.toBuffer)(item.storageKeys[index]));\n        }\n        newAccessList.push([addressBuffer, storageItems]);\n      }\n      bufferAccessList = newAccessList;\n    } else {\n      bufferAccessList = accessList !== null && accessList !== void 0 ? accessList : [];\n      // build the JSON\n      var json = [];\n      for (var i = 0; i < bufferAccessList.length; i++) {\n        var data = bufferAccessList[i];\n        var address = (0, ethereumjs_util_1.bufferToHex)(data[0]);\n        var storageKeys = [];\n        for (var item = 0; item < data[1].length; item++) {\n          storageKeys.push((0, ethereumjs_util_1.bufferToHex)(data[1][item]));\n        }\n        var jsonItem = {\n          address: address,\n          storageKeys: storageKeys\n        };\n        json.push(jsonItem);\n      }\n      AccessListJSON = json;\n    }\n    return {\n      AccessListJSON: AccessListJSON,\n      accessList: bufferAccessList\n    };\n  };\n  AccessLists.verifyAccessList = function (accessList) {\n    for (var key = 0; key < accessList.length; key++) {\n      var accessListItem = accessList[key];\n      var address = accessListItem[0];\n      var storageSlots = accessListItem[1];\n      if (accessListItem[2] !== undefined) {\n        throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n      }\n      if (address.length != 20) {\n        throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n      }\n      for (var storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n        if (storageSlots[storageSlot].length != 32) {\n          throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n        }\n      }\n    }\n  };\n  AccessLists.getAccessListJSON = function (accessList) {\n    var accessListJSON = [];\n    for (var index = 0; index < accessList.length; index++) {\n      var item = accessList[index];\n      var JSONItem = {\n        address: '0x' + (0, ethereumjs_util_1.setLengthLeft)(item[0], 20).toString('hex'),\n        storageKeys: []\n      };\n      var storageSlots = item[1];\n      for (var slot = 0; slot < storageSlots.length; slot++) {\n        var storageSlot = storageSlots[slot];\n        JSONItem.storageKeys.push('0x' + (0, ethereumjs_util_1.setLengthLeft)(storageSlot, 32).toString('hex'));\n      }\n      accessListJSON.push(JSONItem);\n    }\n    return accessListJSON;\n  };\n  AccessLists.getDataFeeEIP2930 = function (accessList, common) {\n    var accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n    var accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n    var slots = 0;\n    for (var index = 0; index < accessList.length; index++) {\n      var item = accessList[index];\n      var storageSlots = item[1];\n      slots += storageSlots.length;\n    }\n    var addresses = accessList.length;\n    return addresses * accessListAddressCost + slots * accessListStorageKeyCost;\n  };\n  return AccessLists;\n}();\nexports.AccessLists = AccessLists;","map":{"version":3,"sources":["../src/util.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA,SAAgB,oBAAoB,CAAC,MAAc,EAAE,MAAc,EAAA;EACjE,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,iBAAiB,CAAC,EAAE;IAClD,MAAM,IAAI,KAAK,CACb,4DAAA,CAAA,MAAA,CAA6D,MAAM,EAAA,oBAAA,CAAA,CAAA,MAAA,CAAqB,MAAM,CAAC,KAAK,CAClG,IAAI,EACJ,iBAAiB,CAClB,CAAE,CACJ;EACF;AACH;AATA,OAAA,CAAA,oBAAA,GAAA,oBAAA;AAWA,IAAA,WAAA,GAAA,aAAA,YAAA;EAAA,SAAA,WAAA,GAAA,CAiGA;EAhGgB,WAAA,CAAA,iBAAiB,GAA/B,UAAgC,UAAyC,EAAA;IACvE,IAAI,cAAc;IAClB,IAAI,gBAAgB;IACpB,IAAI,UAAU,IAAI,CAAA,CAAA,EAAA,OAAA,CAAA,YAAY,EAAC,UAAU,CAAC,EAAE;MAC1C,cAAc,GAAG,UAAU;MAC3B,IAAM,aAAa,GAAqB,EAAE;MAE1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC1C,IAAM,IAAI,GAAmB,UAAU,CAAC,CAAC,CAAC;QAC1C,IAAM,aAAa,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,QAAQ,EAAC,IAAI,CAAC,OAAO,CAAC;QAC5C,IAAM,YAAY,GAAa,EAAE;QACjC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;UAC5D,YAAY,CAAC,IAAI,CAAC,CAAA,CAAA,EAAA,iBAAA,CAAA,QAAQ,EAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QACrD;QACD,aAAa,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;MAClD;MACD,gBAAgB,GAAG,aAAa;KACjC,MAAM;MACL,gBAAgB,GAAG,UAAU,KAAA,IAAA,IAAV,UAAU,KAAA,KAAA,CAAA,GAAV,UAAU,GAAI,EAAE;MACnC;MACA,IAAM,IAAI,GAAe,EAAE;MAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAChD,IAAM,IAAI,GAAG,gBAAgB,CAAC,CAAC,CAAC;QAChC,IAAM,OAAO,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,WAAW,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpC,IAAM,WAAW,GAAa,EAAE;QAChC,KAAK,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;UAChD,WAAW,CAAC,IAAI,CAAC,CAAA,CAAA,EAAA,iBAAA,CAAA,WAAW,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7C;QACD,IAAM,QAAQ,GAAmB;UAC/B,OAAO,EAAA,OAAA;UACP,WAAW,EAAA;SACZ;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;MACpB;MACD,cAAc,GAAG,IAAI;IACtB;IAED,OAAO;MACL,cAAc,EAAA,cAAA;MACd,UAAU,EAAE;KACb;EACH,CAAC;EAEa,WAAA,CAAA,gBAAgB,GAA9B,UAA+B,UAA4B,EAAA;IACzD,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;MAChD,IAAM,cAAc,GAAG,UAAU,CAAC,GAAG,CAAC;MACtC,IAAM,OAAO,GAAW,cAAc,CAAC,CAAC,CAAC;MACzC,IAAM,YAAY,GAAa,cAAc,CAAC,CAAC,CAAC;MAChD,IAAU,cAAe,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;QAC1C,MAAM,IAAI,KAAK,CACb,sGAAsG,CACvG;MACF;MACD,IAAI,OAAO,CAAC,MAAM,IAAI,EAAE,EAAE;QACxB,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC;MACnF;MACD,KAAK,IAAI,WAAW,GAAG,CAAC,EAAE,WAAW,GAAG,YAAY,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE;QAC1E,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC,MAAM,IAAI,EAAE,EAAE;UAC1C,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC;QACxF;MACF;IACF;EACH,CAAC;EAEa,WAAA,CAAA,iBAAiB,GAA/B,UAAgC,UAA4B,EAAA;IAC1D,IAAM,cAAc,GAAG,EAAE;IACzB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;MACtD,IAAM,IAAI,GAAQ,UAAU,CAAC,KAAK,CAAC;MACnC,IAAM,QAAQ,GAAQ;QACpB,OAAO,EAAE,IAAI,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,aAAa,EAAS,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;QAClE,WAAW,EAAE;OACd;MACD,IAAM,YAAY,GAAa,IAAI,CAAC,CAAC,CAAC;MACtC,KAAK,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;QACrD,IAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC;QACtC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,aAAa,EAAC,WAAW,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;MACjF;MACD,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC;IAC9B;IACD,OAAO,cAAc;EACvB,CAAC;EAEa,WAAA,CAAA,iBAAiB,GAA/B,UAAgC,UAA4B,EAAE,MAAc,EAAA;IAC1E,IAAM,wBAAwB,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,0BAA0B,CAAC;IACtF,IAAM,qBAAqB,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,uBAAuB,CAAC;IAEhF,IAAI,KAAK,GAAG,CAAC;IACb,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;MACtD,IAAM,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC;MAC9B,IAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAC;MAC5B,KAAK,IAAI,YAAY,CAAC,MAAM;IAC7B;IAED,IAAM,SAAS,GAAG,UAAU,CAAC,MAAM;IACnC,OAAO,SAAS,GAAG,qBAAqB,GAAG,KAAK,GAAG,wBAAwB;EAC7E,CAAC;EACH,OAAA,WAAC;AAAD,CAAC,EAAA;AAjGY,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccessLists = exports.checkMaxInitCodeSize = void 0;\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\nfunction checkMaxInitCodeSize(common, length) {\n    if (length > common.param('vm', 'maxInitCodeSize')) {\n        throw new Error(\"the initcode size of this transaction is too large: it is \".concat(length, \" while the max is \").concat(common.param('vm', 'maxInitCodeSize')));\n    }\n}\nexports.checkMaxInitCodeSize = checkMaxInitCodeSize;\nvar AccessLists = /** @class */ (function () {\n    function AccessLists() {\n    }\n    AccessLists.getAccessListData = function (accessList) {\n        var AccessListJSON;\n        var bufferAccessList;\n        if (accessList && (0, types_1.isAccessList)(accessList)) {\n            AccessListJSON = accessList;\n            var newAccessList = [];\n            for (var i = 0; i < accessList.length; i++) {\n                var item = accessList[i];\n                var addressBuffer = (0, ethereumjs_util_1.toBuffer)(item.address);\n                var storageItems = [];\n                for (var index = 0; index < item.storageKeys.length; index++) {\n                    storageItems.push((0, ethereumjs_util_1.toBuffer)(item.storageKeys[index]));\n                }\n                newAccessList.push([addressBuffer, storageItems]);\n            }\n            bufferAccessList = newAccessList;\n        }\n        else {\n            bufferAccessList = accessList !== null && accessList !== void 0 ? accessList : [];\n            // build the JSON\n            var json = [];\n            for (var i = 0; i < bufferAccessList.length; i++) {\n                var data = bufferAccessList[i];\n                var address = (0, ethereumjs_util_1.bufferToHex)(data[0]);\n                var storageKeys = [];\n                for (var item = 0; item < data[1].length; item++) {\n                    storageKeys.push((0, ethereumjs_util_1.bufferToHex)(data[1][item]));\n                }\n                var jsonItem = {\n                    address: address,\n                    storageKeys: storageKeys,\n                };\n                json.push(jsonItem);\n            }\n            AccessListJSON = json;\n        }\n        return {\n            AccessListJSON: AccessListJSON,\n            accessList: bufferAccessList,\n        };\n    };\n    AccessLists.verifyAccessList = function (accessList) {\n        for (var key = 0; key < accessList.length; key++) {\n            var accessListItem = accessList[key];\n            var address = accessListItem[0];\n            var storageSlots = accessListItem[1];\n            if (accessListItem[2] !== undefined) {\n                throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n            }\n            if (address.length != 20) {\n                throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n            }\n            for (var storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n                if (storageSlots[storageSlot].length != 32) {\n                    throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n                }\n            }\n        }\n    };\n    AccessLists.getAccessListJSON = function (accessList) {\n        var accessListJSON = [];\n        for (var index = 0; index < accessList.length; index++) {\n            var item = accessList[index];\n            var JSONItem = {\n                address: '0x' + (0, ethereumjs_util_1.setLengthLeft)(item[0], 20).toString('hex'),\n                storageKeys: [],\n            };\n            var storageSlots = item[1];\n            for (var slot = 0; slot < storageSlots.length; slot++) {\n                var storageSlot = storageSlots[slot];\n                JSONItem.storageKeys.push('0x' + (0, ethereumjs_util_1.setLengthLeft)(storageSlot, 32).toString('hex'));\n            }\n            accessListJSON.push(JSONItem);\n        }\n        return accessListJSON;\n    };\n    AccessLists.getDataFeeEIP2930 = function (accessList, common) {\n        var accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n        var accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n        var slots = 0;\n        for (var index = 0; index < accessList.length; index++) {\n            var item = accessList[index];\n            var storageSlots = item[1];\n            slots += storageSlots.length;\n        }\n        var addresses = accessList.length;\n        return addresses * accessListAddressCost + slots * accessListStorageKeyCost;\n    };\n    return AccessLists;\n}());\nexports.AccessLists = AccessLists;\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"script"}