{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConsensusAlgorithm = exports.ConsensusType = exports.Hardfork = exports.Chain = exports.CustomChain = void 0;\nvar events_1 = require(\"events\");\nvar crc_32_1 = require(\"crc-32\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar chains_1 = require(\"./chains\");\nvar hardforks_1 = require(\"./hardforks\");\nvar eips_1 = require(\"./eips\");\nvar CustomChain;\n(function (CustomChain) {\n  /**\n   * Polygon (Matic) Mainnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  CustomChain[\"PolygonMainnet\"] = \"polygon-mainnet\";\n  /**\n   * Polygon (Matic) Mumbai Testnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  CustomChain[\"PolygonMumbai\"] = \"polygon-mumbai\";\n  /**\n   * Arbitrum Rinkeby Testnet\n   *\n   * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n   */\n  CustomChain[\"ArbitrumRinkebyTestnet\"] = \"arbitrum-rinkeby-testnet\";\n  /**\n   * xDai EVM sidechain with a native stable token\n   *\n   * - [Documentation](https://www.xdaichain.com/)\n   */\n  CustomChain[\"xDaiChain\"] = \"x-dai-chain\";\n  /**\n   * Optimistic Kovan - testnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  CustomChain[\"OptimisticKovan\"] = \"optimistic-kovan\";\n  /**\n   * Optimistic Ethereum - mainnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  CustomChain[\"OptimisticEthereum\"] = \"optimistic-ethereum\";\n})(CustomChain = exports.CustomChain || (exports.CustomChain = {}));\nvar Chain;\n(function (Chain) {\n  Chain[Chain[\"Mainnet\"] = 1] = \"Mainnet\";\n  Chain[Chain[\"Ropsten\"] = 3] = \"Ropsten\";\n  Chain[Chain[\"Rinkeby\"] = 4] = \"Rinkeby\";\n  Chain[Chain[\"Kovan\"] = 42] = \"Kovan\";\n  Chain[Chain[\"Goerli\"] = 5] = \"Goerli\";\n  Chain[Chain[\"Sepolia\"] = 11155111] = \"Sepolia\";\n})(Chain = exports.Chain || (exports.Chain = {}));\nvar Hardfork;\n(function (Hardfork) {\n  Hardfork[\"Chainstart\"] = \"chainstart\";\n  Hardfork[\"Homestead\"] = \"homestead\";\n  Hardfork[\"Dao\"] = \"dao\";\n  Hardfork[\"TangerineWhistle\"] = \"tangerineWhistle\";\n  Hardfork[\"SpuriousDragon\"] = \"spuriousDragon\";\n  Hardfork[\"Byzantium\"] = \"byzantium\";\n  Hardfork[\"Constantinople\"] = \"constantinople\";\n  Hardfork[\"Petersburg\"] = \"petersburg\";\n  Hardfork[\"Istanbul\"] = \"istanbul\";\n  Hardfork[\"MuirGlacier\"] = \"muirGlacier\";\n  Hardfork[\"Berlin\"] = \"berlin\";\n  Hardfork[\"London\"] = \"london\";\n  Hardfork[\"ArrowGlacier\"] = \"arrowGlacier\";\n  Hardfork[\"Shanghai\"] = \"shanghai\";\n  Hardfork[\"MergeForkIdTransition\"] = \"mergeForkIdTransition\";\n  Hardfork[\"Merge\"] = \"merge\";\n})(Hardfork = exports.Hardfork || (exports.Hardfork = {}));\nvar ConsensusType;\n(function (ConsensusType) {\n  ConsensusType[\"ProofOfStake\"] = \"pos\";\n  ConsensusType[\"ProofOfWork\"] = \"pow\";\n  ConsensusType[\"ProofOfAuthority\"] = \"poa\";\n})(ConsensusType = exports.ConsensusType || (exports.ConsensusType = {}));\nvar ConsensusAlgorithm;\n(function (ConsensusAlgorithm) {\n  ConsensusAlgorithm[\"Ethash\"] = \"ethash\";\n  ConsensusAlgorithm[\"Clique\"] = \"clique\";\n  ConsensusAlgorithm[\"Casper\"] = \"casper\";\n})(ConsensusAlgorithm = exports.ConsensusAlgorithm || (exports.ConsensusAlgorithm = {}));\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nvar Common = /** @class */function (_super) {\n  __extends(Common, _super);\n  /**\n   *\n   * @constructor\n   */\n  function Common(opts) {\n    var e_1, _a;\n    var _this = this;\n    var _b, _c;\n    _this = _super.call(this) || this;\n    _this._supportedHardforks = [];\n    _this._eips = [];\n    _this._customChains = (_b = opts.customChains) !== null && _b !== void 0 ? _b : [];\n    _this._chainParams = _this.setChain(opts.chain);\n    _this.DEFAULT_HARDFORK = (_c = _this._chainParams.defaultHardfork) !== null && _c !== void 0 ? _c : Hardfork.Istanbul;\n    try {\n      for (var _d = __values(_this._chainParams.hardforks), _e = _d.next(); !_e.done; _e = _d.next()) {\n        var hf = _e.value;\n        if (!hf.forkHash) {\n          hf.forkHash = _this._calcForkHash(hf.name);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    _this._hardfork = _this.DEFAULT_HARDFORK;\n    if (opts.supportedHardforks) {\n      _this._supportedHardforks = opts.supportedHardforks;\n    }\n    if (opts.hardfork) {\n      _this.setHardfork(opts.hardfork);\n    }\n    if (opts.eips) {\n      _this.setEIPs(opts.eips);\n    }\n    return _this;\n  }\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one.\n   *\n   * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n   * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n   *\n   * ```javascript\n   * Common.custom({chainId: 123})\n   * ```\n   *\n   * There are also selected supported custom chains which can be initialized by using one of the\n   * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n   *\n   * ```javascript\n   * Common.custom(CustomChains.MaticMumbai)\n   * ```\n   *\n   * Note that these supported custom chains only provide some base parameters (usually the chain and\n   * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n   * the `@ethereumjs/tx` library to a Layer-2 chain).\n   *\n   * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n   * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n   */\n  Common.custom = function (chainParamsOrName, opts) {\n    var _a;\n    if (opts === void 0) {\n      opts = {};\n    }\n    var baseChain = (_a = opts.baseChain) !== null && _a !== void 0 ? _a : 'mainnet';\n    var standardChainParams = __assign({}, Common._getChainParams(baseChain));\n    standardChainParams['name'] = 'custom-chain';\n    if (typeof chainParamsOrName !== 'string') {\n      return new Common(__assign({\n        chain: __assign(__assign({}, standardChainParams), chainParamsOrName)\n      }, opts));\n    } else {\n      if (chainParamsOrName === CustomChain.PolygonMainnet) {\n        return Common.custom({\n          name: CustomChain.PolygonMainnet,\n          chainId: 137,\n          networkId: 137\n        }, opts);\n      }\n      if (chainParamsOrName === CustomChain.PolygonMumbai) {\n        return Common.custom({\n          name: CustomChain.PolygonMumbai,\n          chainId: 80001,\n          networkId: 80001\n        }, opts);\n      }\n      if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n        return Common.custom({\n          name: CustomChain.ArbitrumRinkebyTestnet,\n          chainId: 421611,\n          networkId: 421611\n        }, opts);\n      }\n      if (chainParamsOrName === CustomChain.xDaiChain) {\n        return Common.custom({\n          name: CustomChain.xDaiChain,\n          chainId: 100,\n          networkId: 100\n        }, opts);\n      }\n      if (chainParamsOrName === CustomChain.OptimisticKovan) {\n        return Common.custom({\n          name: CustomChain.OptimisticKovan,\n          chainId: 69,\n          networkId: 69\n        }, __assign({\n          hardfork: Hardfork.Berlin\n        }, opts));\n      }\n      if (chainParamsOrName === CustomChain.OptimisticEthereum) {\n        return Common.custom({\n          name: CustomChain.OptimisticEthereum,\n          chainId: 10,\n          networkId: 10\n        }, __assign({\n          hardfork: Hardfork.Berlin\n        }, opts));\n      }\n      throw new Error(\"Custom chain \".concat(chainParamsOrName, \" not supported\"));\n    }\n  };\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one. It uses all the `Chain`\n   * params from {@link baseChain} except the ones overridden in {@link customChainParams}.\n   *\n   * @deprecated Use {@link Common.custom} instead\n   *\n   * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n   * chain params on.\n   * @param customChainParams The custom parameters of the chain.\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n   */\n  Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n    var standardChainParams = Common._getChainParams(baseChain);\n    return new Common({\n      chain: __assign(__assign({}, standardChainParams), customChainParams),\n      hardfork: hardfork,\n      supportedHardforks: supportedHardforks\n    });\n  };\n  /**\n   * Static method to determine if a {@link chainId} is supported as a standard chain\n   * @param chainId BN id (`1`) of a standard chain\n   * @returns boolean\n   */\n  Common.isSupportedChainId = function (chainId) {\n    var initializedChains = (0, chains_1._getInitializedChains)();\n    return Boolean(initializedChains['names'][chainId.toString()]);\n  };\n  Common._getChainParams = function (chain, customChains) {\n    var initializedChains = (0, chains_1._getInitializedChains)(customChains);\n    if (typeof chain === 'number' || ethereumjs_util_1.BN.isBN(chain)) {\n      chain = chain.toString();\n      if (initializedChains['names'][chain]) {\n        var name_1 = initializedChains['names'][chain];\n        return initializedChains[name_1];\n      }\n      throw new Error(\"Chain with ID \".concat(chain, \" not supported\"));\n    }\n    if (initializedChains[chain]) {\n      return initializedChains[chain];\n    }\n    throw new Error(\"Chain with name \".concat(chain, \" not supported\"));\n  };\n  /**\n   * Sets the chain\n   * @param chain String ('mainnet') or Number (1) chain\n   *     representation. Or, a Dictionary of chain parameters for a private network.\n   * @returns The dictionary with parameters set as chain\n   */\n  Common.prototype.setChain = function (chain) {\n    var e_2, _a;\n    if (typeof chain === 'number' || typeof chain === 'string' || ethereumjs_util_1.BN.isBN(chain)) {\n      // Filter out genesis states if passed in to customChains\n      var plainCustomChains = void 0;\n      if (this._customChains && this._customChains.length > 0 && Array.isArray(this._customChains[0])) {\n        plainCustomChains = this._customChains.map(function (e) {\n          return e[0];\n        });\n      } else {\n        plainCustomChains = this._customChains;\n      }\n      this._chainParams = Common._getChainParams(chain, plainCustomChains);\n    } else if (typeof chain === 'object') {\n      if (this._customChains.length > 0) {\n        throw new Error('Chain must be a string, number, or BN when initialized with customChains passed in');\n      }\n      var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n      try {\n        for (var required_1 = __values(required), required_1_1 = required_1.next(); !required_1_1.done; required_1_1 = required_1.next()) {\n          var param = required_1_1.value;\n          if (chain[param] === undefined) {\n            throw new Error(\"Missing required chain parameter: \".concat(param));\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (required_1_1 && !required_1_1.done && (_a = required_1.return)) _a.call(required_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      this._chainParams = chain;\n    } else {\n      throw new Error('Wrong input format');\n    }\n    return this._chainParams;\n  };\n  /**\n   * Sets the hardfork to get params for\n   * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n   */\n  Common.prototype.setHardfork = function (hardfork) {\n    var e_3, _a;\n    if (!this._isSupportedHardfork(hardfork)) {\n      throw new Error(\"Hardfork \".concat(hardfork, \" not set as supported in supportedHardforks\"));\n    }\n    var existing = false;\n    try {\n      for (var HARDFORK_CHANGES_1 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next(); !HARDFORK_CHANGES_1_1.done; HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next()) {\n        var hfChanges = HARDFORK_CHANGES_1_1.value;\n        if (hfChanges[0] === hardfork) {\n          if (this._hardfork !== hardfork) {\n            this._hardfork = hardfork;\n            this.emit('hardforkChanged', hardfork);\n          }\n          existing = true;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_1_1 && !HARDFORK_CHANGES_1_1.done && (_a = HARDFORK_CHANGES_1.return)) _a.call(HARDFORK_CHANGES_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    if (!existing) {\n      throw new Error(\"Hardfork with name \".concat(hardfork, \" not supported\"));\n    }\n  };\n  /**\n   * Returns the hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @returns The name of the HF\n   */\n  Common.prototype.getHardforkByBlockNumber = function (blockNumber, td) {\n    var e_4, _a;\n    blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n    td = (0, ethereumjs_util_1.toType)(td, ethereumjs_util_1.TypeOutput.BN);\n    var hardfork = Hardfork.Chainstart;\n    var minTdHF;\n    var maxTdHF;\n    var previousHF;\n    try {\n      for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var hf = _c.value;\n        // Skip comparison for not applied HFs\n        if (hf.block === null) {\n          if (td !== undefined && td !== null && hf.td !== undefined && hf.td !== null) {\n            if (td.gte(new ethereumjs_util_1.BN(hf.td))) {\n              return hf.name;\n            }\n          }\n          continue;\n        }\n        if (blockNumber.gte(new ethereumjs_util_1.BN(hf.block))) {\n          hardfork = hf.name;\n        }\n        if (td && hf.td) {\n          if (td.gte(new ethereumjs_util_1.BN(hf.td))) {\n            minTdHF = hf.name;\n          } else {\n            maxTdHF = previousHF;\n          }\n        }\n        previousHF = hf.name;\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n    if (td) {\n      var msgAdd = \"block number: \".concat(blockNumber, \" (-> \").concat(hardfork, \"), \");\n      if (minTdHF) {\n        if (!this.hardforkGteHardfork(hardfork, minTdHF)) {\n          var msg = 'HF determined by block number is lower than the minimum total difficulty HF';\n          msgAdd += \"total difficulty: \".concat(td, \" (-> \").concat(minTdHF, \")\");\n          throw new Error(\"\".concat(msg, \": \").concat(msgAdd));\n        }\n      }\n      if (maxTdHF) {\n        if (!this.hardforkGteHardfork(maxTdHF, hardfork)) {\n          var msg = 'Maximum HF determined by total difficulty is lower than the block number HF';\n          msgAdd += \"total difficulty: \".concat(td, \" (-> \").concat(maxTdHF, \")\");\n          throw new Error(\"\".concat(msg, \": \").concat(msgAdd));\n        }\n      }\n    }\n    return hardfork;\n  };\n  /**\n   * Sets a new hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @returns The name of the HF set\n   */\n  Common.prototype.setHardforkByBlockNumber = function (blockNumber, td) {\n    var hardfork = this.getHardforkByBlockNumber(blockNumber, td);\n    this.setHardfork(hardfork);\n    return hardfork;\n  };\n  /**\n   * Internal helper function to choose between hardfork set and hardfork provided as param\n   * @param hardfork Hardfork given to function as a parameter\n   * @returns Hardfork chosen to be used\n   */\n  Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n    if (onlySupported === void 0) {\n      onlySupported = true;\n    }\n    if (!hardfork) {\n      hardfork = this._hardfork;\n    } else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n      throw new Error(\"Hardfork \".concat(hardfork, \" not set as supported in supportedHardforks\"));\n    }\n    return hardfork;\n  };\n  /**\n   * Internal helper function, returns the params for the given hardfork for the chain set\n   * @param hardfork Hardfork name\n   * @returns Dictionary with hardfork params\n   */\n  Common.prototype._getHardfork = function (hardfork) {\n    var e_5, _a;\n    var hfs = this.hardforks();\n    try {\n      for (var hfs_1 = __values(hfs), hfs_1_1 = hfs_1.next(); !hfs_1_1.done; hfs_1_1 = hfs_1.next()) {\n        var hf = hfs_1_1.value;\n        if (hf['name'] === hardfork) return hf;\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (hfs_1_1 && !hfs_1_1.done && (_a = hfs_1.return)) _a.call(hfs_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n    throw new Error(\"Hardfork \".concat(hardfork, \" not defined for chain \").concat(this.chainName()));\n  };\n  /**\n   * Internal helper function to check if a hardfork is set to be supported by the library\n   * @param hardfork Hardfork name\n   * @returns True if hardfork is supported\n   */\n  Common.prototype._isSupportedHardfork = function (hardfork) {\n    var e_6, _a;\n    if (this._supportedHardforks.length > 0) {\n      try {\n        for (var _b = __values(this._supportedHardforks), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var supportedHf = _c.value;\n          if (hardfork === supportedHf) return true;\n        }\n      } catch (e_6_1) {\n        e_6 = {\n          error: e_6_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_6) throw e_6.error;\n        }\n      }\n    } else {\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Sets the active EIPs\n   * @param eips\n   */\n  Common.prototype.setEIPs = function (eips) {\n    var e_7, _a;\n    var _this = this;\n    if (eips === void 0) {\n      eips = [];\n    }\n    var _loop_1 = function (eip) {\n      if (!(eip in eips_1.EIPs)) {\n        throw new Error(\"\".concat(eip, \" not supported\"));\n      }\n      var minHF = this_1.gteHardfork(eips_1.EIPs[eip]['minimumHardfork']);\n      if (!minHF) {\n        throw new Error(\"\".concat(eip, \" cannot be activated on hardfork \").concat(this_1.hardfork(), \", minimumHardfork: \").concat(minHF));\n      }\n      if (eips_1.EIPs[eip].requiredEIPs) {\n        ;\n        eips_1.EIPs[eip].requiredEIPs.forEach(function (elem) {\n          if (!(eips.includes(elem) || _this.isActivatedEIP(elem))) {\n            throw new Error(\"\".concat(eip, \" requires EIP \").concat(elem, \", but is not included in the EIP list\"));\n          }\n        });\n      }\n    };\n    var this_1 = this;\n    try {\n      for (var eips_2 = __values(eips), eips_2_1 = eips_2.next(); !eips_2_1.done; eips_2_1 = eips_2.next()) {\n        var eip = eips_2_1.value;\n        _loop_1(eip);\n      }\n    } catch (e_7_1) {\n      e_7 = {\n        error: e_7_1\n      };\n    } finally {\n      try {\n        if (eips_2_1 && !eips_2_1.done && (_a = eips_2.return)) _a.call(eips_2);\n      } finally {\n        if (e_7) throw e_7.error;\n      }\n    }\n    this._eips = eips;\n  };\n  /**\n   * Returns a parameter for the current chain setup\n   *\n   * If the parameter is present in an EIP, the EIP always takes precendence.\n   * Otherwise the parameter if taken from the latest applied HF with\n   * a change on the respective parameter.\n   *\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @returns The value requested or `null` if not found\n   */\n  Common.prototype.param = function (topic, name) {\n    var e_8, _a;\n    // TODO: consider the case that different active EIPs\n    // can change the same parameter\n    var value = null;\n    try {\n      for (var _b = __values(this._eips), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var eip = _c.value;\n        value = this.paramByEIP(topic, name, eip);\n        if (value !== null) {\n          return value;\n        }\n      }\n    } catch (e_8_1) {\n      e_8 = {\n        error: e_8_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_8) throw e_8.error;\n      }\n    }\n    return this.paramByHardfork(topic, name, this._hardfork);\n  };\n  /**\n   * Returns the parameter corresponding to a hardfork\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param hardfork Hardfork name\n   * @returns The value requested or `null` if not found\n   */\n  Common.prototype.paramByHardfork = function (topic, name, hardfork) {\n    var e_9, _a, e_10, _b;\n    hardfork = this._chooseHardfork(hardfork);\n    var value = null;\n    try {\n      for (var HARDFORK_CHANGES_2 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next(); !HARDFORK_CHANGES_2_1.done; HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next()) {\n        var hfChanges = HARDFORK_CHANGES_2_1.value;\n        // EIP-referencing HF file (e.g. berlin.json)\n        if ('eips' in hfChanges[1]) {\n          var hfEIPs = hfChanges[1]['eips'];\n          try {\n            for (var hfEIPs_1 = (e_10 = void 0, __values(hfEIPs)), hfEIPs_1_1 = hfEIPs_1.next(); !hfEIPs_1_1.done; hfEIPs_1_1 = hfEIPs_1.next()) {\n              var eip = hfEIPs_1_1.value;\n              var valueEIP = this.paramByEIP(topic, name, eip);\n              value = valueEIP !== null ? valueEIP : value;\n            }\n          } catch (e_10_1) {\n            e_10 = {\n              error: e_10_1\n            };\n          } finally {\n            try {\n              if (hfEIPs_1_1 && !hfEIPs_1_1.done && (_b = hfEIPs_1.return)) _b.call(hfEIPs_1);\n            } finally {\n              if (e_10) throw e_10.error;\n            }\n          }\n          // Paramater-inlining HF file (e.g. istanbul.json)\n        } else {\n          if (!hfChanges[1][topic]) {\n            throw new Error(\"Topic \".concat(topic, \" not defined\"));\n          }\n          if (hfChanges[1][topic][name] !== undefined) {\n            value = hfChanges[1][topic][name].v;\n          }\n        }\n        if (hfChanges[0] === hardfork) break;\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_2_1 && !HARDFORK_CHANGES_2_1.done && (_a = HARDFORK_CHANGES_2.return)) _a.call(HARDFORK_CHANGES_2);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n    return value;\n  };\n  /**\n   * Returns a parameter corresponding to an EIP\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param eip Number of the EIP\n   * @returns The value requested or `null` if not found\n   */\n  Common.prototype.paramByEIP = function (topic, name, eip) {\n    if (!(eip in eips_1.EIPs)) {\n      throw new Error(\"\".concat(eip, \" not supported\"));\n    }\n    var eipParams = eips_1.EIPs[eip];\n    if (!(topic in eipParams)) {\n      throw new Error(\"Topic \".concat(topic, \" not defined\"));\n    }\n    if (eipParams[topic][name] === undefined) {\n      return null;\n    }\n    var value = eipParams[topic][name].v;\n    return value;\n  };\n  /**\n   * Returns a parameter for the hardfork active on block number\n   * @param topic Parameter topic\n   * @param name Parameter name\n   * @param blockNumber Block number\n   */\n  Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n    var activeHfs = this.activeHardforks(blockNumber);\n    var hardfork = activeHfs[activeHfs.length - 1]['name'];\n    return this.paramByHardfork(topic, name, hardfork);\n  };\n  /**\n   * Checks if an EIP is activated by either being included in the EIPs\n   * manually passed in with the {@link CommonOpts.eips} or in a\n   * hardfork currently being active\n   *\n   * Note: this method only works for EIPs being supported\n   * by the {@link CommonOpts.eips} constructor option\n   * @param eip\n   */\n  Common.prototype.isActivatedEIP = function (eip) {\n    var e_11, _a;\n    if (this.eips().includes(eip)) {\n      return true;\n    }\n    try {\n      for (var HARDFORK_CHANGES_3 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next(); !HARDFORK_CHANGES_3_1.done; HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next()) {\n        var hfChanges = HARDFORK_CHANGES_3_1.value;\n        var hf = hfChanges[1];\n        if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n          if (hf['eips'].includes(eip)) {\n            return true;\n          }\n        }\n      }\n    } catch (e_11_1) {\n      e_11 = {\n        error: e_11_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_3_1 && !HARDFORK_CHANGES_3_1.done && (_a = HARDFORK_CHANGES_3.return)) _a.call(HARDFORK_CHANGES_3);\n      } finally {\n        if (e_11) throw e_11.error;\n      }\n    }\n    return false;\n  };\n  /**\n   * Checks if set or provided hardfork is active on block number\n   * @param hardfork Hardfork name or null (for HF set)\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n  Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n    var _a;\n    if (opts === void 0) {\n      opts = {};\n    }\n    blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n    var onlySupported = (_a = opts.onlySupported) !== null && _a !== void 0 ? _a : false;\n    hardfork = this._chooseHardfork(hardfork, onlySupported);\n    var hfBlock = this.hardforkBlockBN(hardfork);\n    if (hfBlock && blockNumber.gte(hfBlock)) {\n      return true;\n    }\n    return false;\n  };\n  /**\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n  Common.prototype.activeOnBlock = function (blockNumber, opts) {\n    return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n  };\n  /**\n   * Sequence based check if given or set HF1 is greater than or equal HF2\n   * @param hardfork1 Hardfork name or null (if set)\n   * @param hardfork2 Hardfork name\n   * @param opts Hardfork options\n   * @returns True if HF1 gte HF2\n   */\n  Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n    var e_12, _a;\n    if (opts === void 0) {\n      opts = {};\n    }\n    var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n    hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n    var hardforks;\n    if (onlyActive) {\n      hardforks = this.activeHardforks(null, opts);\n    } else {\n      hardforks = this.hardforks();\n    }\n    var posHf1 = -1,\n      posHf2 = -1;\n    var index = 0;\n    try {\n      for (var hardforks_2 = __values(hardforks), hardforks_2_1 = hardforks_2.next(); !hardforks_2_1.done; hardforks_2_1 = hardforks_2.next()) {\n        var hf = hardforks_2_1.value;\n        if (hf['name'] === hardfork1) posHf1 = index;\n        if (hf['name'] === hardfork2) posHf2 = index;\n        index += 1;\n      }\n    } catch (e_12_1) {\n      e_12 = {\n        error: e_12_1\n      };\n    } finally {\n      try {\n        if (hardforks_2_1 && !hardforks_2_1.done && (_a = hardforks_2.return)) _a.call(hardforks_2);\n      } finally {\n        if (e_12) throw e_12.error;\n      }\n    }\n    return posHf1 >= posHf2 && posHf2 !== -1;\n  };\n  /**\n   * Alias to hardforkGteHardfork when hardfork is set\n   * @param hardfork Hardfork name\n   * @param opts Hardfork options\n   * @returns True if hardfork set is greater than hardfork provided\n   */\n  Common.prototype.gteHardfork = function (hardfork, opts) {\n    return this.hardforkGteHardfork(null, hardfork, opts);\n  };\n  /**\n   * Checks if given or set hardfork is active on the chain\n   * @param hardfork Hardfork name, optional if HF set\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if hardfork is active on the chain\n   */\n  Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n    var e_13, _a;\n    var _b;\n    if (opts === void 0) {\n      opts = {};\n    }\n    var onlySupported = (_b = opts.onlySupported) !== null && _b !== void 0 ? _b : false;\n    hardfork = this._chooseHardfork(hardfork, onlySupported);\n    try {\n      for (var _c = __values(this.hardforks()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var hf = _d.value;\n        if (hf['name'] === hardfork && hf['block'] !== null) return true;\n      }\n    } catch (e_13_1) {\n      e_13 = {\n        error: e_13_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_13) throw e_13.error;\n      }\n    }\n    return false;\n  };\n  /**\n   * Returns the active hardfork switches for the current chain\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Array with hardfork arrays\n   */\n  Common.prototype.activeHardforks = function (blockNumber, opts) {\n    var e_14, _a;\n    if (opts === void 0) {\n      opts = {};\n    }\n    var activeHardforks = [];\n    var hfs = this.hardforks();\n    try {\n      for (var hfs_2 = __values(hfs), hfs_2_1 = hfs_2.next(); !hfs_2_1.done; hfs_2_1 = hfs_2.next()) {\n        var hf = hfs_2_1.value;\n        if (hf['block'] === null) continue;\n        if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block']) break;\n        if (opts.onlySupported && !this._isSupportedHardfork(hf['name'])) continue;\n        activeHardforks.push(hf);\n      }\n    } catch (e_14_1) {\n      e_14 = {\n        error: e_14_1\n      };\n    } finally {\n      try {\n        if (hfs_2_1 && !hfs_2_1.done && (_a = hfs_2.return)) _a.call(hfs_2);\n      } finally {\n        if (e_14) throw e_14.error;\n      }\n    }\n    return activeHardforks;\n  };\n  /**\n   * Returns the latest active hardfork name for chain or block or throws if unavailable\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Hardfork name\n   */\n  Common.prototype.activeHardfork = function (blockNumber, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var activeHardforks = this.activeHardforks(blockNumber, opts);\n    if (activeHardforks.length > 0) {\n      return activeHardforks[activeHardforks.length - 1]['name'];\n    } else {\n      throw new Error(\"No (supported) active hardfork found\");\n    }\n  };\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   * @deprecated Please use {@link Common.hardforkBlockBN} for large number support\n   */\n  Common.prototype.hardforkBlock = function (hardfork) {\n    var block = this.hardforkBlockBN(hardfork);\n    return (0, ethereumjs_util_1.toType)(block, ethereumjs_util_1.TypeOutput.Number);\n  };\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   */\n  Common.prototype.hardforkBlockBN = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n    var block = this._getHardfork(hardfork)['block'];\n    if (block === undefined || block === null) {\n      return null;\n    }\n    return new ethereumjs_util_1.BN(block);\n  };\n  /**\n   * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Total difficulty or null if no set\n   */\n  Common.prototype.hardforkTD = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n    var td = this._getHardfork(hardfork)['td'];\n    if (td === undefined || td === null) {\n      return null;\n    }\n    return new ethereumjs_util_1.BN(td);\n  };\n  /**\n   * True if block number provided is the hardfork (given or set) change block\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n  Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n    blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n    hardfork = this._chooseHardfork(hardfork, false);\n    var block = this.hardforkBlockBN(hardfork);\n    return block ? block.eq(blockNumber) : false;\n  };\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   * @deprecated Please use {@link Common.nextHardforkBlockBN} for large number support\n   */\n  Common.prototype.nextHardforkBlock = function (hardfork) {\n    var block = this.nextHardforkBlockBN(hardfork);\n    return (0, ethereumjs_util_1.toType)(block, ethereumjs_util_1.TypeOutput.Number);\n  };\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   */\n  Common.prototype.nextHardforkBlockBN = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n    var hfBlock = this.hardforkBlockBN(hardfork);\n    if (hfBlock === null) {\n      return null;\n    }\n    // Next fork block number or null if none available\n    // Logic: if accumulator is still null and on the first occurrence of\n    // a block greater than the current hfBlock set the accumulator,\n    // pass on the accumulator as the final result from this time on\n    var nextHfBlock = this.hardforks().reduce(function (acc, hf) {\n      var block = new ethereumjs_util_1.BN(hf.block);\n      return block.gt(hfBlock) && acc === null ? block : acc;\n    }, null);\n    return nextHfBlock;\n  };\n  /**\n   * True if block number provided is the hardfork change block following the hardfork given or set\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n  Common.prototype.isNextHardforkBlock = function (blockNumber, hardfork) {\n    blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n    hardfork = this._chooseHardfork(hardfork, false);\n    var nextHardforkBlock = this.nextHardforkBlockBN(hardfork);\n    return nextHardforkBlock === null ? false : nextHardforkBlock.eq(blockNumber);\n  };\n  /**\n   * Internal helper function to calculate a fork hash\n   * @param hardfork Hardfork name\n   * @returns Fork hash as hex string\n   */\n  Common.prototype._calcForkHash = function (hardfork) {\n    var e_15, _a;\n    var genesis = Buffer.from(this.genesis().hash.substr(2), 'hex');\n    var hfBuffer = Buffer.alloc(0);\n    var prevBlock = 0;\n    try {\n      for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var hf = _c.value;\n        var block = hf.block;\n        // Skip for chainstart (0), not applied HFs (null) and\n        // when already applied on same block number HFs\n        if (block !== 0 && block !== null && block !== prevBlock) {\n          var hfBlockBuffer = Buffer.from(block.toString(16).padStart(16, '0'), 'hex');\n          hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer]);\n        }\n        if (hf.name === hardfork) break;\n        if (block !== null) {\n          prevBlock = block;\n        }\n      }\n    } catch (e_15_1) {\n      e_15 = {\n        error: e_15_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_15) throw e_15.error;\n      }\n    }\n    var inputBuffer = Buffer.concat([genesis, hfBuffer]);\n    // CRC32 delivers result as signed (negative) 32-bit integer,\n    // convert to hex string\n    var forkhash = (0, ethereumjs_util_1.intToBuffer)((0, crc_32_1.buf)(inputBuffer) >>> 0).toString('hex');\n    return \"0x\".concat(forkhash);\n  };\n  /**\n   * Returns an eth/64 compliant fork hash (EIP-2124)\n   * @param hardfork Hardfork name, optional if HF set\n   */\n  Common.prototype.forkHash = function (hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false);\n    var data = this._getHardfork(hardfork);\n    if (data['block'] === null && data['td'] === undefined) {\n      var msg = 'No fork hash calculation possible for future hardfork';\n      throw new Error(msg);\n    }\n    if (data['forkHash'] !== undefined) {\n      return data['forkHash'];\n    }\n    return this._calcForkHash(hardfork);\n  };\n  /**\n   *\n   * @param forkHash Fork hash as a hex string\n   * @returns Array with hardfork data (name, block, forkHash)\n   */\n  Common.prototype.hardforkForForkHash = function (forkHash) {\n    var resArray = this.hardforks().filter(function (hf) {\n      return hf.forkHash === forkHash;\n    });\n    return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n  };\n  /**\n   * Returns the Genesis parameters of the current chain\n   * @returns Genesis dictionary\n   */\n  Common.prototype.genesis = function () {\n    return this._chainParams['genesis'];\n  };\n  /**\n   * Returns the Genesis state of the current chain,\n   * all values are provided as hex-prefixed strings.\n   */\n  Common.prototype.genesisState = function () {\n    var e_16, _a;\n    // Use require statements here in favor of import statements\n    // to load json files on demand\n    // (high memory usage by large mainnet.json genesis state file)\n    switch (this.chainName()) {\n      case 'mainnet':\n        return require('./genesisStates/mainnet.json');\n      case 'ropsten':\n        return require('./genesisStates/ropsten.json');\n      case 'rinkeby':\n        return require('./genesisStates/rinkeby.json');\n      case 'kovan':\n        return require('./genesisStates/kovan.json');\n      case 'goerli':\n        return require('./genesisStates/goerli.json');\n      case 'sepolia':\n        return require('./genesisStates/sepolia.json');\n    }\n    // Custom chains with genesis state provided\n    if (this._customChains && this._customChains.length > 0 && Array.isArray(this._customChains[0])) {\n      try {\n        for (var _b = __values(this._customChains), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var chainArrayWithGenesis = _c.value;\n          if (chainArrayWithGenesis[0].name === this.chainName()) {\n            return chainArrayWithGenesis[1];\n          }\n        }\n      } catch (e_16_1) {\n        e_16 = {\n          error: e_16_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_16) throw e_16.error;\n        }\n      }\n    }\n    return {};\n  };\n  /**\n   * Returns the hardforks for current chain\n   * @returns {Array} Array with arrays of hardforks\n   */\n  Common.prototype.hardforks = function () {\n    return this._chainParams['hardforks'];\n  };\n  /**\n   * Returns bootstrap nodes for the current chain\n   * @returns {Dictionary} Dict with bootstrap nodes\n   */\n  Common.prototype.bootstrapNodes = function () {\n    return this._chainParams['bootstrapNodes'];\n  };\n  /**\n   * Returns DNS networks for the current chain\n   * @returns {String[]} Array of DNS ENR urls\n   */\n  Common.prototype.dnsNetworks = function () {\n    return this._chainParams['dnsNetworks'];\n  };\n  /**\n   * Returns the hardfork set\n   * @returns Hardfork name\n   */\n  Common.prototype.hardfork = function () {\n    return this._hardfork;\n  };\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   * @deprecated Please use {@link Common.chainIdBN} for large number support\n   */\n  Common.prototype.chainId = function () {\n    return (0, ethereumjs_util_1.toType)(this.chainIdBN(), ethereumjs_util_1.TypeOutput.Number);\n  };\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   */\n  Common.prototype.chainIdBN = function () {\n    return new ethereumjs_util_1.BN(this._chainParams['chainId']);\n  };\n  /**\n   * Returns the name of current chain\n   * @returns chain name (lower case)\n   */\n  Common.prototype.chainName = function () {\n    return this._chainParams['name'];\n  };\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   * @deprecated Please use {@link Common.networkIdBN} for large number support\n   */\n  Common.prototype.networkId = function () {\n    return (0, ethereumjs_util_1.toType)(this.networkIdBN(), ethereumjs_util_1.TypeOutput.Number);\n  };\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   */\n  Common.prototype.networkIdBN = function () {\n    return new ethereumjs_util_1.BN(this._chainParams['networkId']);\n  };\n  /**\n   * Returns the active EIPs\n   * @returns List of EIPs\n   */\n  Common.prototype.eips = function () {\n    return this._eips;\n  };\n  /**\n   * Returns the consensus type of the network\n   * Possible values: \"pow\"|\"poa\"|\"pos\"\n   *\n   * Note: This value can update along a hardfork.\n   */\n  Common.prototype.consensusType = function () {\n    var e_17, _a;\n    var hardfork = this.hardfork();\n    var value;\n    try {\n      for (var HARDFORK_CHANGES_4 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_4_1 = HARDFORK_CHANGES_4.next(); !HARDFORK_CHANGES_4_1.done; HARDFORK_CHANGES_4_1 = HARDFORK_CHANGES_4.next()) {\n        var hfChanges = HARDFORK_CHANGES_4_1.value;\n        if ('consensus' in hfChanges[1]) {\n          value = hfChanges[1]['consensus']['type'];\n        }\n        if (hfChanges[0] === hardfork) break;\n      }\n    } catch (e_17_1) {\n      e_17 = {\n        error: e_17_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_4_1 && !HARDFORK_CHANGES_4_1.done && (_a = HARDFORK_CHANGES_4.return)) _a.call(HARDFORK_CHANGES_4);\n      } finally {\n        if (e_17) throw e_17.error;\n      }\n    }\n    if (value) {\n      return value;\n    }\n    return this._chainParams['consensus']['type'];\n  };\n  /**\n   * Returns the concrete consensus implementation\n   * algorithm or protocol for the network\n   * e.g. \"ethash\" for \"pow\" consensus type,\n   * \"clique\" for \"poa\" consensus type or\n   * \"casper\" for \"pos\" consensus type.\n   *\n   * Note: This value can update along a hardfork.\n   */\n  Common.prototype.consensusAlgorithm = function () {\n    var e_18, _a;\n    var hardfork = this.hardfork();\n    var value;\n    try {\n      for (var HARDFORK_CHANGES_5 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_5_1 = HARDFORK_CHANGES_5.next(); !HARDFORK_CHANGES_5_1.done; HARDFORK_CHANGES_5_1 = HARDFORK_CHANGES_5.next()) {\n        var hfChanges = HARDFORK_CHANGES_5_1.value;\n        if ('consensus' in hfChanges[1]) {\n          value = hfChanges[1]['consensus']['algorithm'];\n        }\n        if (hfChanges[0] === hardfork) break;\n      }\n    } catch (e_18_1) {\n      e_18 = {\n        error: e_18_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_5_1 && !HARDFORK_CHANGES_5_1.done && (_a = HARDFORK_CHANGES_5.return)) _a.call(HARDFORK_CHANGES_5);\n      } finally {\n        if (e_18) throw e_18.error;\n      }\n    }\n    if (value) {\n      return value;\n    }\n    return this._chainParams['consensus']['algorithm'];\n  };\n  /**\n   * Returns a dictionary with consensus configuration\n   * parameters based on the consensus algorithm\n   *\n   * Expected returns (parameters must be present in\n   * the respective chain json files):\n   *\n   * ethash: -\n   * clique: period, epoch\n   * aura: -\n   * casper: -\n   *\n   * Note: This value can update along a hardfork.\n   */\n  Common.prototype.consensusConfig = function () {\n    var e_19, _a;\n    var hardfork = this.hardfork();\n    var value;\n    try {\n      for (var HARDFORK_CHANGES_6 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_6_1 = HARDFORK_CHANGES_6.next(); !HARDFORK_CHANGES_6_1.done; HARDFORK_CHANGES_6_1 = HARDFORK_CHANGES_6.next()) {\n        var hfChanges = HARDFORK_CHANGES_6_1.value;\n        if ('consensus' in hfChanges[1]) {\n          // The config parameter is named after the respective consensus algorithm\n          value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']];\n        }\n        if (hfChanges[0] === hardfork) break;\n      }\n    } catch (e_19_1) {\n      e_19 = {\n        error: e_19_1\n      };\n    } finally {\n      try {\n        if (HARDFORK_CHANGES_6_1 && !HARDFORK_CHANGES_6_1.done && (_a = HARDFORK_CHANGES_6.return)) _a.call(HARDFORK_CHANGES_6);\n      } finally {\n        if (e_19) throw e_19.error;\n      }\n    }\n    if (value) {\n      return value;\n    }\n    var consensusAlgorithm = this.consensusAlgorithm();\n    return this._chainParams['consensus'][consensusAlgorithm];\n  };\n  /**\n   * Returns a deep copy of this {@link Common} instance.\n   */\n  Common.prototype.copy = function () {\n    var copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n    copy.removeAllListeners();\n    return copy;\n  };\n  return Common;\n}(events_1.EventEmitter);\nexports.default = Common;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AASA,IAAY,WA0CX;AA1CD,CAAA,UAAY,WAAW,EAAA;EACrB;;;;AAIG;EACH,WAAA,CAAA,gBAAA,CAAA,GAAA,iBAAkC;EAElC;;;;AAIG;EACH,WAAA,CAAA,eAAA,CAAA,GAAA,gBAAgC;EAEhC;;;;AAIG;EACH,WAAA,CAAA,wBAAA,CAAA,GAAA,0BAAmD;EAEnD;;;;AAIG;EACH,WAAA,CAAA,WAAA,CAAA,GAAA,aAAyB;EAEzB;;;;AAIG;EACH,WAAA,CAAA,iBAAA,CAAA,GAAA,kBAAoC;EAEpC;;;;AAIG;EACH,WAAA,CAAA,oBAAA,CAAA,GAAA,qBAA0C;AAC5C,CAAC,EA1CW,WAAW,GAAX,OAAA,CAAA,WAAW,KAAX,OAAA,CAAA,WAAW,GAAA,CAAA,CAAA,CAAA,CAAA;AA4CvB,IAAY,KAOX;AAPD,CAAA,UAAY,KAAK,EAAA;EACf,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAW;EACX,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAW;EACX,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAW;EACX,KAAA,CAAA,KAAA,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,GAAA,OAAU;EACV,KAAA,CAAA,KAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAU;EACV,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,GAAA,QAAA,CAAA,GAAA,SAAkB;AACpB,CAAC,EAPW,KAAK,GAAL,OAAA,CAAA,KAAK,KAAL,OAAA,CAAA,KAAK,GAAA,CAAA,CAAA,CAAA,CAAA;AASjB,IAAY,QAiBX;AAjBD,CAAA,UAAY,QAAQ,EAAA;EAClB,QAAA,CAAA,YAAA,CAAA,GAAA,YAAyB;EACzB,QAAA,CAAA,WAAA,CAAA,GAAA,WAAuB;EACvB,QAAA,CAAA,KAAA,CAAA,GAAA,KAAW;EACX,QAAA,CAAA,kBAAA,CAAA,GAAA,kBAAqC;EACrC,QAAA,CAAA,gBAAA,CAAA,GAAA,gBAAiC;EACjC,QAAA,CAAA,WAAA,CAAA,GAAA,WAAuB;EACvB,QAAA,CAAA,gBAAA,CAAA,GAAA,gBAAiC;EACjC,QAAA,CAAA,YAAA,CAAA,GAAA,YAAyB;EACzB,QAAA,CAAA,UAAA,CAAA,GAAA,UAAqB;EACrB,QAAA,CAAA,aAAA,CAAA,GAAA,aAA2B;EAC3B,QAAA,CAAA,QAAA,CAAA,GAAA,QAAiB;EACjB,QAAA,CAAA,QAAA,CAAA,GAAA,QAAiB;EACjB,QAAA,CAAA,cAAA,CAAA,GAAA,cAA6B;EAC7B,QAAA,CAAA,UAAA,CAAA,GAAA,UAAqB;EACrB,QAAA,CAAA,uBAAA,CAAA,GAAA,uBAA+C;EAC/C,QAAA,CAAA,OAAA,CAAA,GAAA,OAAe;AACjB,CAAC,EAjBW,QAAQ,GAAR,OAAA,CAAA,QAAQ,KAAR,OAAA,CAAA,QAAQ,GAAA,CAAA,CAAA,CAAA,CAAA;AAmBpB,IAAY,aAIX;AAJD,CAAA,UAAY,aAAa,EAAA;EACvB,aAAA,CAAA,cAAA,CAAA,GAAA,KAAoB;EACpB,aAAA,CAAA,aAAA,CAAA,GAAA,KAAmB;EACnB,aAAA,CAAA,kBAAA,CAAA,GAAA,KAAwB;AAC1B,CAAC,EAJW,aAAa,GAAb,OAAA,CAAA,aAAa,KAAb,OAAA,CAAA,aAAa,GAAA,CAAA,CAAA,CAAA,CAAA;AAMzB,IAAY,kBAIX;AAJD,CAAA,UAAY,kBAAkB,EAAA;EAC5B,kBAAA,CAAA,QAAA,CAAA,GAAA,QAAiB;EACjB,kBAAA,CAAA,QAAA,CAAA,GAAA,QAAiB;EACjB,kBAAA,CAAA,QAAA,CAAA,GAAA,QAAiB;AACnB,CAAC,EAJW,kBAAkB,GAAlB,OAAA,CAAA,kBAAkB,KAAlB,OAAA,CAAA,kBAAkB,GAAA,CAAA,CAAA,CAAA,CAAA;AAkG9B;;;;;;;AAOG;AACH,IAAA,MAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAoC,SAAA,CAAA,MAAA,EAAA,MAAA,CAAA;EAqLlC;;;AAGG;EACH,SAAA,MAAA,CAAY,IAAgB,EAAA;;IAA5B,IAAA,KAAA,GAAA,IAAA;;YACE,MAAA,CAAA,IAAA,CAAA,IAAA,CAAO,IAAA,IAAA;IArLD,KAAA,CAAA,mBAAmB,GAA6B,EAAE;IAClD,KAAA,CAAA,KAAK,GAAa,EAAE;IAqL1B,KAAI,CAAC,aAAa,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,YAAY,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;IAC5C,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;IAC7C,KAAI,CAAC,gBAAgB,GAAG,CAAA,EAAA,GAAA,KAAI,CAAC,YAAY,CAAC,eAAe,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,QAAQ,CAAC,QAAQ;;MAC9E,KAAiB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAI,CAAC,YAAY,CAAC,SAAS,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAE;QAAzC,IAAM,EAAE,GAAA,EAAA,CAAA,KAAA;QACX,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE;UAChB,EAAE,CAAC,QAAQ,GAAG,KAAI,CAAC,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC;QAC1C;MACF;;;;;;;;;;;;IACD,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,gBAAgB;IACtC,IAAI,IAAI,CAAC,kBAAkB,EAAE;MAC3B,KAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,kBAAkB;IACnD;IACD,IAAI,IAAI,CAAC,QAAQ,EAAE;MACjB,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC;IAChC;IACD,IAAI,IAAI,CAAC,IAAI,EAAE;MACb,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;IACxB;;EACH;EApMA;;;;;;;;;;;;;;;;;;;;;;;AAuBG;EACI,MAAA,CAAA,MAAM,GAAb,UACE,iBAAgD,EAChD,IAA2B,EAAA;;IAA3B,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;MAAA,IAAA,GAAA,CAAA,CAA2B;IAAA;IAE3B,IAAM,SAAS,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,SAAS,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,SAAS;IAC7C,IAAM,mBAAmB,GAAA,QAAA,CAAA,CAAA,CAAA,EAAQ,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAE;IACpE,mBAAmB,CAAC,MAAM,CAAC,GAAG,cAAc;IAE5C,IAAI,OAAO,iBAAiB,KAAK,QAAQ,EAAE;MACzC,OAAO,IAAI,MAAM,CAAA,QAAA,CAAA;QACf,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACA,mBAAmB,CAAA,EACnB,iBAAiB;MAAA,CAAA,EAEnB,IAAI,CAAA,CACP;KACH,MAAM;MACL,IAAI,iBAAiB,KAAK,WAAW,CAAC,cAAc,EAAE;QACpD,OAAO,MAAM,CAAC,MAAM,CAClB;UACE,IAAI,EAAE,WAAW,CAAC,cAAc;UAChC,OAAO,EAAE,GAAG;UACZ,SAAS,EAAE;SACZ,EACD,IAAI,CACL;MACF;MACD,IAAI,iBAAiB,KAAK,WAAW,CAAC,aAAa,EAAE;QACnD,OAAO,MAAM,CAAC,MAAM,CAClB;UACE,IAAI,EAAE,WAAW,CAAC,aAAa;UAC/B,OAAO,EAAE,KAAK;UACd,SAAS,EAAE;SACZ,EACD,IAAI,CACL;MACF;MACD,IAAI,iBAAiB,KAAK,WAAW,CAAC,sBAAsB,EAAE;QAC5D,OAAO,MAAM,CAAC,MAAM,CAClB;UACE,IAAI,EAAE,WAAW,CAAC,sBAAsB;UACxC,OAAO,EAAE,MAAM;UACf,SAAS,EAAE;SACZ,EACD,IAAI,CACL;MACF;MACD,IAAI,iBAAiB,KAAK,WAAW,CAAC,SAAS,EAAE;QAC/C,OAAO,MAAM,CAAC,MAAM,CAClB;UACE,IAAI,EAAE,WAAW,CAAC,SAAS;UAC3B,OAAO,EAAE,GAAG;UACZ,SAAS,EAAE;SACZ,EACD,IAAI,CACL;MACF;MAED,IAAI,iBAAiB,KAAK,WAAW,CAAC,eAAe,EAAE;QACrD,OAAO,MAAM,CAAC,MAAM,CAClB;UACE,IAAI,EAAE,WAAW,CAAC,eAAe;UACjC,OAAO,EAAE,EAAE;UACX,SAAS,EAAE;SACZ,EAAA,QAAA,CAAA;UAEC,QAAQ,EAAE,QAAQ,CAAC;QAAM,CAAA,EAAK,IAAI,CAAA,CACrC;MACF;MAED,IAAI,iBAAiB,KAAK,WAAW,CAAC,kBAAkB,EAAE;QACxD,OAAO,MAAM,CAAC,MAAM,CAClB;UACE,IAAI,EAAE,WAAW,CAAC,kBAAkB;UACpC,OAAO,EAAE,EAAE;UACX,SAAS,EAAE;SACZ,EAAA,QAAA,CAAA;UAEC,QAAQ,EAAE,QAAQ,CAAC;QAAM,CAAA,EAAK,IAAI,CAAA,CACrC;MACF;MACD,MAAM,IAAI,KAAK,CAAC,eAAA,CAAA,MAAA,CAAgB,iBAAiB,EAAA,gBAAA,CAAgB,CAAC;IACnE;EACH,CAAC;EAED;;;;;;;;;;;AAWG;EACI,MAAA,CAAA,cAAc,GAArB,UACE,SAAkC,EAClC,iBAAkC,EAClC,QAA4B,EAC5B,kBAA6C,EAAA;IAE7C,IAAM,mBAAmB,GAAG,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC;IAE7D,OAAO,IAAI,MAAM,CAAC;MAChB,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACA,mBAAmB,CAAA,EACnB,iBAAiB,CACrB;MACD,QAAQ,EAAE,QAAQ;MAClB,kBAAkB,EAAE;KACrB,CAAC;EACJ,CAAC;EAED;;;;AAIG;EACI,MAAA,CAAA,kBAAkB,GAAzB,UAA0B,OAAW,EAAA;IACnC,IAAM,iBAAiB,GAAQ,CAAA,CAAA,EAAA,QAAA,CAAA,qBAAqB,GAAE;IACtD,OAAO,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;EAChE,CAAC;EAEc,MAAA,CAAA,eAAe,GAA9B,UACE,KAAmC,EACnC,YAAuB,EAAA;IAEvB,IAAM,iBAAiB,GAAQ,CAAA,CAAA,EAAA,QAAA,CAAA,qBAAqB,EAAC,YAAY,CAAC;IAClE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,iBAAA,CAAA,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;MAC/C,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE;MAExB,IAAI,iBAAiB,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAE;QACrC,IAAM,MAAI,GAAW,iBAAiB,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QACtD,OAAO,iBAAiB,CAAC,MAAI,CAAC;MAC/B;MAED,MAAM,IAAI,KAAK,CAAC,gBAAA,CAAA,MAAA,CAAiB,KAAK,EAAA,gBAAA,CAAgB,CAAC;IACxD;IAED,IAAI,iBAAiB,CAAC,KAAK,CAAC,EAAE;MAC5B,OAAO,iBAAiB,CAAC,KAAK,CAAC;IAChC;IAED,MAAM,IAAI,KAAK,CAAC,kBAAA,CAAA,MAAA,CAAmB,KAAK,EAAA,gBAAA,CAAgB,CAAC;EAC3D,CAAC;EA4BD;;;;;AAKG;EACH,MAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAAS,KAA4C,EAAA;;IACnD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,iBAAA,CAAA,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;MAC5E;MACA,IAAI,iBAAiB,GAAA,KAAA,CAAU;MAC/B,IACE,IAAI,CAAC,aAAa,IAClB,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,IAC7B,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EACpC;QACA,iBAAiB,GAAI,IAAI,CAAC,aAA0C,CAAC,GAAG,CAAC,UAAC,CAAC,EAAA;UAAK,OAAA,CAAC,CAAC,CAAC,CAAC;QAAJ,CAAI,CAAC;OACtF,MAAM;QACL,iBAAiB,GAAG,IAAI,CAAC,aAAyB;MACnD;MACD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,eAAe,CAAC,KAAK,EAAE,iBAAiB,CAAC;KACrE,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;MACpC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;QACjC,MAAM,IAAI,KAAK,CACb,oFAAoF,CACrF;MACF;MACD,IAAM,QAAQ,GAAG,CAAC,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,gBAAgB,CAAC;;QACxE,KAAoB,IAAA,UAAA,GAAA,QAAA,CAAA,QAAQ,CAAA,EAAA,YAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAA,CAAA,YAAA,CAAA,IAAA,EAAA,YAAA,GAAA,UAAA,CAAA,IAAA,EAAA,EAAE;UAAzB,IAAM,KAAK,GAAA,YAAA,CAAA,KAAA;UACd,IAAU,KAAM,CAAC,KAAK,CAAC,KAAK,SAAS,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,oCAAA,CAAA,MAAA,CAAqC,KAAK,CAAE,CAAC;UAC9D;QACF;;;;;;;;;;;;MACD,IAAI,CAAC,YAAY,GAAG,KAAe;KACpC,MAAM;MACL,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC;IACtC;IACD,OAAO,IAAI,CAAC,YAAY;EAC1B,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,QAA2B,EAAA;;IACrC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE;MACxC,MAAM,IAAI,KAAK,CAAC,WAAA,CAAA,MAAA,CAAY,QAAQ,EAAA,6CAAA,CAA6C,CAAC;IACnF;IACD,IAAI,QAAQ,GAAG,KAAK;;MACpB,KAAwB,IAAA,kBAAA,GAAA,QAAA,CAAA,WAAA,CAAA,SAAgB,CAAA,EAAA,oBAAA,GAAA,kBAAA,CAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,CAAA,IAAA,EAAA,oBAAA,GAAA,kBAAA,CAAA,IAAA,EAAA,EAAE;QAArC,IAAM,SAAS,GAAA,oBAAA,CAAA,KAAA;QAClB,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;UAC7B,IAAI,IAAI,CAAC,SAAS,KAAK,QAAQ,EAAE;YAC/B,IAAI,CAAC,SAAS,GAAG,QAAQ;YACzB,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,QAAQ,CAAC;UACvC;UACD,QAAQ,GAAG,IAAI;QAChB;MACF;;;;;;;;;;;;IACD,IAAI,CAAC,QAAQ,EAAE;MACb,MAAM,IAAI,KAAK,CAAC,qBAAA,CAAA,MAAA,CAAsB,QAAQ,EAAA,gBAAA,CAAgB,CAAC;IAChE;EACH,CAAC;EAED;;;;;;;;;;;AAWG;EACH,MAAA,CAAA,SAAA,CAAA,wBAAwB,GAAxB,UAAyB,WAAmB,EAAE,EAAW,EAAA;;IACvD,WAAW,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,MAAM,EAAC,WAAW,EAAE,iBAAA,CAAA,UAAU,CAAC,EAAE,CAAC;IAChD,EAAE,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,MAAM,EAAC,EAAE,EAAE,iBAAA,CAAA,UAAU,CAAC,EAAE,CAAC;IAE9B,IAAI,QAAQ,GAAG,QAAQ,CAAC,UAAU;IAClC,IAAI,OAAO;IACX,IAAI,OAAO;IACX,IAAI,UAAU;;MACd,KAAiB,IAAA,EAAA,GAAA,QAAA,CAAA,IAAI,CAAC,SAAS,EAAE,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAE;QAA9B,IAAM,EAAE,GAAA,EAAA,CAAA,KAAA;QACX;QACA,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,EAAE;UACrB,IAAI,EAAE,KAAK,SAAS,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,CAAC,EAAE,KAAK,SAAS,IAAI,EAAE,CAAC,EAAE,KAAK,IAAI,EAAE;YAC5E,IAAI,EAAE,CAAC,GAAG,CAAC,IAAI,iBAAA,CAAA,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;cACzB,OAAO,EAAE,CAAC,IAAI;YACf;UACF;UACD;QACD;QACD,IAAI,WAAW,CAAC,GAAG,CAAC,IAAI,iBAAA,CAAA,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;UACrC,QAAQ,GAAG,EAAE,CAAC,IAAgB;QAC/B;QACD,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE;UACf,IAAI,EAAE,CAAC,GAAG,CAAC,IAAI,iBAAA,CAAA,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;YACzB,OAAO,GAAG,EAAE,CAAC,IAAI;WAClB,MAAM;YACL,OAAO,GAAG,UAAU;UACrB;QACF;QACD,UAAU,GAAG,EAAE,CAAC,IAAI;MACrB;;;;;;;;;;;;IACD,IAAI,EAAE,EAAE;MACN,IAAI,MAAM,GAAG,gBAAA,CAAA,MAAA,CAAiB,WAAW,EAAA,OAAA,CAAA,CAAA,MAAA,CAAQ,QAAQ,EAAA,KAAA,CAAK;MAC9D,IAAI,OAAO,EAAE;QACX,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE;UAChD,IAAM,GAAG,GAAG,6EAA6E;UACzF,MAAM,IAAI,oBAAA,CAAA,MAAA,CAAqB,EAAE,EAAA,OAAA,CAAA,CAAA,MAAA,CAAQ,OAAO,EAAA,GAAA,CAAG;UACnD,MAAM,IAAI,KAAK,CAAC,EAAA,CAAA,MAAA,CAAG,GAAG,EAAA,IAAA,CAAA,CAAA,MAAA,CAAK,MAAM,CAAE,CAAC;QACrC;MACF;MACD,IAAI,OAAO,EAAE;QACX,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;UAChD,IAAM,GAAG,GAAG,6EAA6E;UACzF,MAAM,IAAI,oBAAA,CAAA,MAAA,CAAqB,EAAE,EAAA,OAAA,CAAA,CAAA,MAAA,CAAQ,OAAO,EAAA,GAAA,CAAG;UACnD,MAAM,IAAI,KAAK,CAAC,EAAA,CAAA,MAAA,CAAG,GAAG,EAAA,IAAA,CAAA,CAAA,MAAA,CAAK,MAAM,CAAE,CAAC;QACrC;MACF;IACF;IACD,OAAO,QAAQ;EACjB,CAAC;EAED;;;;;;;;;;;AAWG;EACH,MAAA,CAAA,SAAA,CAAA,wBAAwB,GAAxB,UAAyB,WAAmB,EAAE,EAAW,EAAA;IACvD,IAAM,QAAQ,GAAG,IAAI,CAAC,wBAAwB,CAAC,WAAW,EAAE,EAAE,CAAC;IAC/D,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;IAC1B,OAAO,QAAQ;EACjB,CAAC;EAED;;;;AAIG;EACH,MAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UAAgB,QAAmC,EAAE,aAA6B,EAAA;IAA7B,IAAA,aAAA,KAAA,KAAA,CAAA,EAAA;MAAA,aAAA,GAAA,IAA6B;IAAA;IAChF,IAAI,CAAC,QAAQ,EAAE;MACb,QAAQ,GAAG,IAAI,CAAC,SAAS;KAC1B,MAAM,IAAI,aAAa,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE;MAChE,MAAM,IAAI,KAAK,CAAC,WAAA,CAAA,MAAA,CAAY,QAAQ,EAAA,6CAAA,CAA6C,CAAC;IACnF;IACD,OAAO,QAAQ;EACjB,CAAC;EAED;;;;AAIG;EACH,MAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAa,QAA2B,EAAA;;IACtC,IAAM,GAAG,GAAG,IAAI,CAAC,SAAS,EAAE;;MAC5B,KAAiB,IAAA,KAAA,GAAA,QAAA,CAAA,GAAG,CAAA,EAAA,OAAA,GAAA,KAAA,CAAA,IAAA,EAAA,EAAA,CAAA,OAAA,CAAA,IAAA,EAAA,OAAA,GAAA,KAAA,CAAA,IAAA,EAAA,EAAE;QAAjB,IAAM,EAAE,GAAA,OAAA,CAAA,KAAA;QACX,IAAI,EAAE,CAAC,MAAM,CAAC,KAAK,QAAQ,EAAE,OAAO,EAAE;MACvC;;;;;;;;;;;;IACD,MAAM,IAAI,KAAK,CAAC,WAAA,CAAA,MAAA,CAAY,QAAQ,EAAA,yBAAA,CAAA,CAAA,MAAA,CAA0B,IAAI,CAAC,SAAS,EAAE,CAAE,CAAC;EACnF,CAAC;EAED;;;;AAIG;EACH,MAAA,CAAA,SAAA,CAAA,oBAAoB,GAApB,UAAqB,QAAkC,EAAA;;IACrD,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE;;QACvC,KAA0B,IAAA,EAAA,GAAA,QAAA,CAAA,IAAI,CAAC,mBAAmB,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAE;UAA/C,IAAM,WAAW,GAAA,EAAA,CAAA,KAAA;UACpB,IAAI,QAAQ,KAAK,WAAW,EAAE,OAAO,IAAI;QAC1C;;;;;;;;;;;;KACF,MAAM;MACL,OAAO,IAAI;IACZ;IACD,OAAO,KAAK;EACd,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAQ,IAAmB,EAAA;;IAA3B,IAAA,KAAA,GAAA,IAAA;IAAQ,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;MAAA,IAAA,GAAA,EAAmB;IAAA;4BACd,GAAG,EAAA;MACZ,IAAI,EAAE,GAAG,IAAI,MAAA,CAAA,IAAI,CAAC,EAAE;QAClB,MAAM,IAAI,KAAK,CAAC,EAAA,CAAA,MAAA,CAAG,GAAG,EAAA,gBAAA,CAAgB,CAAC;MACxC;MACD,IAAM,KAAK,GAAG,MAAA,CAAK,WAAW,CAAC,MAAA,CAAA,IAAI,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAC;MAC5D,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,IAAI,KAAK,CACb,EAAA,CAAA,MAAA,CAAG,GAAG,EAAA,mCAAA,CAAA,CAAA,MAAA,CAAoC,MAAA,CAAK,QAAQ,EAAE,EAAA,qBAAA,CAAA,CAAA,MAAA,CAAsB,KAAK,CAAE,CACvF;MACF;MACD,IAAI,MAAA,CAAA,IAAI,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE;QAC1B;QAAE,MAAA,CAAA,IAAI,CAAC,GAAG,CAAC,CAAC,YAAyB,CAAC,OAAO,CAAC,UAAC,IAAI,EAAA;UACjD,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE;YACvD,MAAM,IAAI,KAAK,CAAC,EAAA,CAAA,MAAA,CAAG,GAAG,EAAA,gBAAA,CAAA,CAAA,MAAA,CAAiB,IAAI,EAAA,uCAAA,CAAuC,CAAC;UACpF;QACH,CAAC,CAAC;MACH;;;;MAhBH,KAAkB,IAAA,MAAA,GAAA,QAAA,CAAA,IAAI,CAAA,EAAA,QAAA,GAAA,MAAA,CAAA,IAAA,EAAA,EAAA,CAAA,QAAA,CAAA,IAAA,EAAA,QAAA,GAAA,MAAA,CAAA,IAAA,EAAA,EAAA;QAAjB,IAAM,GAAG,GAAA,QAAA,CAAA,KAAA;gBAAH,GAAG,CAAA;MAiBb;;;;;;;;;;;;IACD,IAAI,CAAC,KAAK,GAAG,IAAI;EACnB,CAAC;EAED;;;;;;;;;;AAUG;EACH,MAAA,CAAA,SAAA,CAAA,KAAK,GAAL,UAAM,KAAa,EAAE,IAAY,EAAA;;IAC/B;IACA;IACA,IAAI,KAAK,GAAG,IAAI;;MAChB,KAAkB,IAAA,EAAA,GAAA,QAAA,CAAA,IAAI,CAAC,KAAK,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAE;QAAzB,IAAM,GAAG,GAAA,EAAA,CAAA,KAAA;QACZ,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,CAAC;QACzC,IAAI,KAAK,KAAK,IAAI,EAAE;UAClB,OAAO,KAAK;QACb;MACF;;;;;;;;;;;;IACD,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;EAC1D,CAAC;EAED;;;;;;AAMG;EACH,MAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UAAgB,KAAa,EAAE,IAAY,EAAE,QAA2B,EAAA;;IACtE,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC;IAEzC,IAAI,KAAK,GAAG,IAAI;;MAChB,KAAwB,IAAA,kBAAA,GAAA,QAAA,CAAA,WAAA,CAAA,SAAgB,CAAA,EAAA,oBAAA,GAAA,kBAAA,CAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,CAAA,IAAA,EAAA,oBAAA,GAAA,kBAAA,CAAA,IAAA,EAAA,EAAE;QAArC,IAAM,SAAS,GAAA,oBAAA,CAAA,KAAA;QAClB;QACA,IAAI,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE;UAC1B,IAAM,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;;YACnC,KAAkB,IAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,EAAA,QAAA,CAAA,MAAM,CAAA,CAAA,EAAA,UAAA,GAAA,QAAA,CAAA,IAAA,EAAA,EAAA,CAAA,UAAA,CAAA,IAAA,EAAA,UAAA,GAAA,QAAA,CAAA,IAAA,EAAA,EAAE;cAArB,IAAM,GAAG,GAAA,UAAA,CAAA,KAAA;cACZ,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,CAAC;cAClD,KAAK,GAAG,QAAQ,KAAK,IAAI,GAAG,QAAQ,GAAG,KAAK;YAC7C;;;;;;;;;;;;UACD;SACD,MAAM;UACL,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,QAAA,CAAA,MAAA,CAAS,KAAK,EAAA,cAAA,CAAc,CAAC;UAC9C;UACD,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;YAC3C,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;UACpC;QACF;QACD,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MAChC;;;;;;;;;;;;IACD,OAAO,KAAK;EACd,CAAC;EAED;;;;;;AAMG;EACH,MAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,KAAa,EAAE,IAAY,EAAE,GAAW,EAAA;IACjD,IAAI,EAAE,GAAG,IAAI,MAAA,CAAA,IAAI,CAAC,EAAE;MAClB,MAAM,IAAI,KAAK,CAAC,EAAA,CAAA,MAAA,CAAG,GAAG,EAAA,gBAAA,CAAgB,CAAC;IACxC;IAED,IAAM,SAAS,GAAG,MAAA,CAAA,IAAI,CAAC,GAAG,CAAC;IAC3B,IAAI,EAAE,KAAK,IAAI,SAAS,CAAC,EAAE;MACzB,MAAM,IAAI,KAAK,CAAC,QAAA,CAAA,MAAA,CAAS,KAAK,EAAA,cAAA,CAAc,CAAC;IAC9C;IACD,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;MACxC,OAAO,IAAI;IACZ;IACD,IAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IACtC,OAAO,KAAK;EACd,CAAC;EAED;;;;;AAKG;EACH,MAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,UAAa,KAAa,EAAE,IAAY,EAAE,WAAmB,EAAA;IAC3D,IAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC;IACnD,IAAM,QAAQ,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC;IACxD,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,EAAE,QAAQ,CAAC;EACpD,CAAC;EAED;;;;;;;;AAQG;EACH,MAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,GAAW,EAAA;;IACxB,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC7B,OAAO,IAAI;IACZ;;MACD,KAAwB,IAAA,kBAAA,GAAA,QAAA,CAAA,WAAA,CAAA,SAAgB,CAAA,EAAA,oBAAA,GAAA,kBAAA,CAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,CAAA,IAAA,EAAA,oBAAA,GAAA,kBAAA,CAAA,IAAA,EAAA,EAAE;QAArC,IAAM,SAAS,GAAA,oBAAA,CAAA,KAAA;QAClB,IAAM,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC;QACvB,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,MAAM,IAAI,EAAE,EAAE;UAChD,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC5B,OAAO,IAAI;UACZ;QACF;MACF;;;;;;;;;;;;IACD,OAAO,KAAK;EACd,CAAC;EAED;;;;;;AAMG;EACH,MAAA,CAAA,SAAA,CAAA,uBAAuB,GAAvB,UACE,QAAkC,EAClC,WAAmB,EACnB,IAA0B,EAAA;;IAA1B,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;MAAA,IAAA,GAAA,CAAA,CAA0B;IAAA;IAE1B,WAAW,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,MAAM,EAAC,WAAW,EAAE,iBAAA,CAAA,UAAU,CAAC,EAAE,CAAC;IAChD,IAAM,aAAa,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,aAAa,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,KAAK;IACjD,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,aAAa,CAAC;IACxD,IAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC;IAC9C,IAAI,OAAO,IAAI,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;MACvC,OAAO,IAAI;IACZ;IACD,OAAO,KAAK;EACd,CAAC;EAED;;;;;AAKG;EACH,MAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,WAAmB,EAAE,IAAsB,EAAA;IACvD,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC;EAC9D,CAAC;EAED;;;;;;AAMG;EACH,MAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,UACE,SAAmC,EACnC,SAA4B,EAC5B,IAA0B,EAAA;;IAA1B,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;MAAA,IAAA,GAAA,CAAA,CAA0B;IAAA;IAE1B,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,KAAK,SAAS,GAAG,KAAK,GAAG,IAAI,CAAC,UAAU;IAC1E,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC;IAE/D,IAAI,SAAS;IACb,IAAI,UAAU,EAAE;MACd,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC;KAC7C,MAAM;MACL,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE;IAC7B;IAED,IAAI,MAAM,GAAG,CAAC,CAAC;MACb,MAAM,GAAG,CAAC,CAAC;IACb,IAAI,KAAK,GAAG,CAAC;;MACb,KAAiB,IAAA,WAAA,GAAA,QAAA,CAAA,SAAS,CAAA,EAAA,aAAA,GAAA,WAAA,CAAA,IAAA,EAAA,EAAA,CAAA,aAAA,CAAA,IAAA,EAAA,aAAA,GAAA,WAAA,CAAA,IAAA,EAAA,EAAE;QAAvB,IAAM,EAAE,GAAA,aAAA,CAAA,KAAA;QACX,IAAI,EAAE,CAAC,MAAM,CAAC,KAAK,SAAS,EAAE,MAAM,GAAG,KAAK;QAC5C,IAAI,EAAE,CAAC,MAAM,CAAC,KAAK,SAAS,EAAE,MAAM,GAAG,KAAK;QAC5C,KAAK,IAAI,CAAC;MACX;;;;;;;;;;;;IACD,OAAO,MAAM,IAAI,MAAM,IAAI,MAAM,KAAK,CAAC,CAAC;EAC1C,CAAC;EAED;;;;;AAKG;EACH,MAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,QAA2B,EAAE,IAAsB,EAAA;IAC7D,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC;EACvD,CAAC;EAED;;;;;AAKG;EACH,MAAA,CAAA,SAAA,CAAA,uBAAuB,GAAvB,UACE,QAAmC,EACnC,IAA0B,EAAA;;;IAA1B,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;MAAA,IAAA,GAAA,CAAA,CAA0B;IAAA;IAE1B,IAAM,aAAa,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,aAAa,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,KAAK;IACjD,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,aAAa,CAAC;;MACxD,KAAiB,IAAA,EAAA,GAAA,QAAA,CAAA,IAAI,CAAC,SAAS,EAAE,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAE;QAA9B,IAAM,EAAE,GAAA,EAAA,CAAA,KAAA;QACX,IAAI,EAAE,CAAC,MAAM,CAAC,KAAK,QAAQ,IAAI,EAAE,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,OAAO,IAAI;MACjE;;;;;;;;;;;;IACD,OAAO,KAAK;EACd,CAAC;EAED;;;;;AAKG;EACH,MAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UAAgB,WAA2B,EAAE,IAA0B,EAAA;;IAA1B,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;MAAA,IAAA,GAAA,CAAA,CAA0B;IAAA;IACrE,IAAM,eAAe,GAAqB,EAAE;IAC5C,IAAM,GAAG,GAAG,IAAI,CAAC,SAAS,EAAE;;MAC5B,KAAiB,IAAA,KAAA,GAAA,QAAA,CAAA,GAAG,CAAA,EAAA,OAAA,GAAA,KAAA,CAAA,IAAA,EAAA,EAAA,CAAA,OAAA,CAAA,IAAA,EAAA,OAAA,GAAA,KAAA,CAAA,IAAA,EAAA,EAAE;QAAjB,IAAM,EAAE,GAAA,OAAA,CAAA,KAAA;QACX,IAAI,EAAE,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE;QAC1B,IAAI,WAAW,KAAK,SAAS,IAAI,WAAW,KAAK,IAAI,IAAI,WAAW,GAAG,EAAE,CAAC,OAAO,CAAC,EAAE;QACpF,IAAI,IAAI,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE;QAElE,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC;MACzB;;;;;;;;;;;;IACD,OAAO,eAAe;EACxB,CAAC;EAED;;;;;AAKG;EACH,MAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,WAA2B,EAAE,IAA0B,EAAA;IAA1B,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;MAAA,IAAA,GAAA,CAAA,CAA0B;IAAA;IACpE,IAAM,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,IAAI,CAAC;IAC/D,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;MAC9B,OAAO,eAAe,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC;KAC3D,MAAM;MACL,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC;IACxD;EACH,CAAC;EAED;;;;;AAKG;EACH,MAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,QAA4B,EAAA;IACxC,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC;IAC5C,OAAO,CAAA,CAAA,EAAA,iBAAA,CAAA,MAAM,EAAC,KAAK,EAAE,iBAAA,CAAA,UAAU,CAAC,MAAM,CAAC;EACzC,CAAC;EAED;;;;AAIG;EACH,MAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UAAgB,QAA4B,EAAA;IAC1C,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC;IAChD,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;IAClD,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;MACzC,OAAO,IAAI;IACZ;IACD,OAAO,IAAI,iBAAA,CAAA,EAAE,CAAC,KAAK,CAAC;EACtB,CAAC;EAED;;;;AAIG;EACH,MAAA,CAAA,SAAA,CAAA,UAAU,GAAV,UAAW,QAA4B,EAAA;IACrC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC;IAChD,IAAM,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;IAC5C,IAAI,EAAE,KAAK,SAAS,IAAI,EAAE,KAAK,IAAI,EAAE;MACnC,OAAO,IAAI;IACZ;IACD,OAAO,IAAI,iBAAA,CAAA,EAAE,CAAC,EAAE,CAAC;EACnB,CAAC;EAED;;;;;AAKG;EACH,MAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UAAgB,WAAmB,EAAE,QAA4B,EAAA;IAC/D,WAAW,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,MAAM,EAAC,WAAW,EAAE,iBAAA,CAAA,UAAU,CAAC,EAAE,CAAC;IAChD,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC;IAChD,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC;IAC5C,OAAO,KAAK,GAAG,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,GAAG,KAAK;EAC9C,CAAC;EAED;;;;;AAKG;EACH,MAAA,CAAA,SAAA,CAAA,iBAAiB,GAAjB,UAAkB,QAA4B,EAAA;IAC5C,IAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;IAChD,OAAO,CAAA,CAAA,EAAA,iBAAA,CAAA,MAAM,EAAC,KAAK,EAAE,iBAAA,CAAA,UAAU,CAAC,MAAM,CAAC;EACzC,CAAC;EAED;;;;AAIG;EACH,MAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,UAAoB,QAA4B,EAAA;IAC9C,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC;IAChD,IAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC;IAC9C,IAAI,OAAO,KAAK,IAAI,EAAE;MACpB,OAAO,IAAI;IACZ;IACD;IACA;IACA;IACA;IACA,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,UAAC,GAAc,EAAE,EAAkB,EAAA;MAC7E,IAAM,KAAK,GAAG,IAAI,iBAAA,CAAA,EAAE,CAAC,EAAE,CAAC,KAAM,CAAC;MAC/B,OAAO,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,GAAG,GAAG;IACxD,CAAC,EAAE,IAAI,CAAC;IACR,OAAO,WAAW;EACpB,CAAC;EAED;;;;;AAKG;EACH,MAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,UAAoB,WAAmB,EAAE,QAA4B,EAAA;IACnE,WAAW,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,MAAM,EAAC,WAAW,EAAE,iBAAA,CAAA,UAAU,CAAC,EAAE,CAAC;IAChD,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC;IAChD,IAAM,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;IAE5D,OAAO,iBAAiB,KAAK,IAAI,GAAG,KAAK,GAAG,iBAAiB,CAAC,EAAE,CAAC,WAAW,CAAC;EAC/E,CAAC;EAED;;;;AAIG;EACH,MAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,QAA2B,EAAA;;IACvC,IAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;IAEjE,IAAI,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAI,SAAS,GAAG,CAAC;;MACjB,KAAiB,IAAA,EAAA,GAAA,QAAA,CAAA,IAAI,CAAC,SAAS,EAAE,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAE;QAA9B,IAAM,EAAE,GAAA,EAAA,CAAA,KAAA;QACX,IAAM,KAAK,GAAG,EAAE,CAAC,KAAK;QAEtB;QACA;QACA,IAAI,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;UACxD,IAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC;UAC9E,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QACpD;QAED,IAAI,EAAE,CAAC,IAAI,KAAK,QAAQ,EAAE;QAC1B,IAAI,KAAK,KAAK,IAAI,EAAE;UAClB,SAAS,GAAG,KAAK;QAClB;MACF;;;;;;;;;;;;IACD,IAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAEtD;IACA;IACA,IAAM,QAAQ,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,WAAW,EAAC,CAAA,CAAA,EAAA,QAAA,CAAA,GAAW,EAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC5E,OAAO,IAAA,CAAA,MAAA,CAAK,QAAQ,CAAE;EACxB,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAAS,QAA4B,EAAA;IACnC,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC;IAChD,IAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;IACxC,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;MACtD,IAAM,GAAG,GAAG,uDAAuD;MACnE,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC;IACrB;IACD,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,SAAS,EAAE;MAClC,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB;IACD,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;EACrC,CAAC;EAED;;;;AAIG;EACH,MAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,UAAoB,QAAgB,EAAA;IAClC,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,UAAC,EAAO,EAAA;MAC/C,OAAO,EAAE,CAAC,QAAQ,KAAK,QAAQ;IACjC,CAAC,CAAC;IACF,OAAO,QAAQ,CAAC,MAAM,IAAI,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;EACpE,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;EACrC,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,YAAY,GAAZ,YAAA;;IACE;IACA;IACA;IACA,QAAQ,IAAI,CAAC,SAAS,EAAE;MACtB,KAAK,SAAS;QACZ,OAAO,OAAO,CAAC,8BAA8B,CAAC;MAChD,KAAK,SAAS;QACZ,OAAO,OAAO,CAAC,8BAA8B,CAAC;MAChD,KAAK,SAAS;QACZ,OAAO,OAAO,CAAC,8BAA8B,CAAC;MAChD,KAAK,OAAO;QACV,OAAO,OAAO,CAAC,4BAA4B,CAAC;MAC9C,KAAK,QAAQ;QACX,OAAO,OAAO,CAAC,6BAA6B,CAAC;MAC/C,KAAK,SAAS;QACZ,OAAO,OAAO,CAAC,8BAA8B,CAAC;IAAA;IAGlD;IACA,IACE,IAAI,CAAC,aAAa,IAClB,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,IAC7B,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EACpC;;QACA,KAAoC,IAAA,EAAA,GAAA,QAAA,CAAA,IAAI,CAAC,aAAyC,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAE;UAA/E,IAAM,qBAAqB,GAAA,EAAA,CAAA,KAAA;UAC9B,IAAI,qBAAqB,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS,EAAE,EAAE;YACtD,OAAO,qBAAqB,CAAC,CAAC,CAAC;UAChC;QACF;;;;;;;;;;;;IACF;IAED,OAAO,CAAA,CAAE;EACX,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACE,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC;EACvC,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,cAAc,GAAd,YAAA;IACE,OAAO,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC;EAC5C,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;IACE,OAAO,IAAI,CAAC,YAAY,CAAC,aAAa,CAAE;EAC1C,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACE,OAAO,IAAI,CAAC,SAAS;EACvB,CAAC;EAED;;;;AAIG;EACH,MAAA,CAAA,SAAA,CAAA,OAAO,GAAP,YAAA;IACE,OAAO,CAAA,CAAA,EAAA,iBAAA,CAAA,MAAM,EAAC,IAAI,CAAC,SAAS,EAAE,EAAE,iBAAA,CAAA,UAAU,CAAC,MAAM,CAAC;EACpD,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACE,OAAO,IAAI,iBAAA,CAAA,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;EAC7C,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACE,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;EAClC,CAAC;EAED;;;;AAIG;EACH,MAAA,CAAA,SAAA,CAAA,SAAS,GAAT,YAAA;IACE,OAAO,CAAA,CAAA,EAAA,iBAAA,CAAA,MAAM,EAAC,IAAI,CAAC,WAAW,EAAE,EAAE,iBAAA,CAAA,UAAU,CAAC,MAAM,CAAC;EACtD,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,WAAW,GAAX,YAAA;IACE,OAAO,IAAI,iBAAA,CAAA,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;EAC/C,CAAC;EAED;;;AAGG;EACH,MAAA,CAAA,SAAA,CAAA,IAAI,GAAJ,YAAA;IACE,OAAO,IAAI,CAAC,KAAK;EACnB,CAAC;EAED;;;;;AAKG;EACH,MAAA,CAAA,SAAA,CAAA,aAAa,GAAb,YAAA;;IACE,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE;IAEhC,IAAI,KAAK;;MACT,KAAwB,IAAA,kBAAA,GAAA,QAAA,CAAA,WAAA,CAAA,SAAgB,CAAA,EAAA,oBAAA,GAAA,kBAAA,CAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,CAAA,IAAA,EAAA,oBAAA,GAAA,kBAAA,CAAA,IAAA,EAAA,EAAE;QAArC,IAAM,SAAS,GAAA,oBAAA,CAAA,KAAA;QAClB,IAAI,WAAW,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE;UAC/B,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC;QAC1C;QACD,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MAChC;;;;;;;;;;;;IACD,IAAI,KAAK,EAAE;MACT,OAAO,KAAK;IACb;IACD,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAE,CAAC,MAAM,CAAC;EAChD,CAAC;EAED;;;;;;;;AAQG;EACH,MAAA,CAAA,SAAA,CAAA,kBAAkB,GAAlB,YAAA;;IACE,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE;IAEhC,IAAI,KAAK;;MACT,KAAwB,IAAA,kBAAA,GAAA,QAAA,CAAA,WAAA,CAAA,SAAgB,CAAA,EAAA,oBAAA,GAAA,kBAAA,CAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,CAAA,IAAA,EAAA,oBAAA,GAAA,kBAAA,CAAA,IAAA,EAAA,EAAE;QAArC,IAAM,SAAS,GAAA,oBAAA,CAAA,KAAA;QAClB,IAAI,WAAW,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE;UAC/B,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC;QAC/C;QACD,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MAChC;;;;;;;;;;;;IACD,IAAI,KAAK,EAAE;MACT,OAAO,KAAK;IACb;IACD,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAE,CAAC,WAAW,CAAuB;EAC3E,CAAC;EAED;;;;;;;;;;;;;AAaG;EACH,MAAA,CAAA,SAAA,CAAA,eAAe,GAAf,YAAA;;IACE,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE;IAEhC,IAAI,KAAK;;MACT,KAAwB,IAAA,kBAAA,GAAA,QAAA,CAAA,WAAA,CAAA,SAAgB,CAAA,EAAA,oBAAA,GAAA,kBAAA,CAAA,IAAA,EAAA,EAAA,CAAA,oBAAA,CAAA,IAAA,EAAA,oBAAA,GAAA,kBAAA,CAAA,IAAA,EAAA,EAAE;QAArC,IAAM,SAAS,GAAA,oBAAA,CAAA,KAAA;QAClB,IAAI,WAAW,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE;UAC/B;UACA,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,CAAC;QAC1E;QACD,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MAChC;;;;;;;;;;;;IACD,IAAI,KAAK,EAAE;MACT,OAAO,KAAK;IACb;IACD,IAAM,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,EAAE;IACpD,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAE,CAAC,kBAAwC,CAAC;EAClF,CAAC;EAED;;AAEG;EACH,MAAA,CAAA,SAAA,CAAA,IAAI,GAAJ,YAAA;IACE,IAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC;IAC5E,IAAI,CAAC,kBAAkB,EAAE;IACzB,OAAO,IAAI;EACb,CAAC;EACH,OAAA,MAAC;AAAD,CAAC,CA9gCmC,QAAA,CAAA,YAAY,CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConsensusAlgorithm = exports.ConsensusType = exports.Hardfork = exports.Chain = exports.CustomChain = void 0;\nvar events_1 = require(\"events\");\nvar crc_32_1 = require(\"crc-32\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar chains_1 = require(\"./chains\");\nvar hardforks_1 = require(\"./hardforks\");\nvar eips_1 = require(\"./eips\");\nvar CustomChain;\n(function (CustomChain) {\n    /**\n     * Polygon (Matic) Mainnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMainnet\"] = \"polygon-mainnet\";\n    /**\n     * Polygon (Matic) Mumbai Testnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMumbai\"] = \"polygon-mumbai\";\n    /**\n     * Arbitrum Rinkeby Testnet\n     *\n     * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n     */\n    CustomChain[\"ArbitrumRinkebyTestnet\"] = \"arbitrum-rinkeby-testnet\";\n    /**\n     * xDai EVM sidechain with a native stable token\n     *\n     * - [Documentation](https://www.xdaichain.com/)\n     */\n    CustomChain[\"xDaiChain\"] = \"x-dai-chain\";\n    /**\n     * Optimistic Kovan - testnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */\n    CustomChain[\"OptimisticKovan\"] = \"optimistic-kovan\";\n    /**\n     * Optimistic Ethereum - mainnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */\n    CustomChain[\"OptimisticEthereum\"] = \"optimistic-ethereum\";\n})(CustomChain = exports.CustomChain || (exports.CustomChain = {}));\nvar Chain;\n(function (Chain) {\n    Chain[Chain[\"Mainnet\"] = 1] = \"Mainnet\";\n    Chain[Chain[\"Ropsten\"] = 3] = \"Ropsten\";\n    Chain[Chain[\"Rinkeby\"] = 4] = \"Rinkeby\";\n    Chain[Chain[\"Kovan\"] = 42] = \"Kovan\";\n    Chain[Chain[\"Goerli\"] = 5] = \"Goerli\";\n    Chain[Chain[\"Sepolia\"] = 11155111] = \"Sepolia\";\n})(Chain = exports.Chain || (exports.Chain = {}));\nvar Hardfork;\n(function (Hardfork) {\n    Hardfork[\"Chainstart\"] = \"chainstart\";\n    Hardfork[\"Homestead\"] = \"homestead\";\n    Hardfork[\"Dao\"] = \"dao\";\n    Hardfork[\"TangerineWhistle\"] = \"tangerineWhistle\";\n    Hardfork[\"SpuriousDragon\"] = \"spuriousDragon\";\n    Hardfork[\"Byzantium\"] = \"byzantium\";\n    Hardfork[\"Constantinople\"] = \"constantinople\";\n    Hardfork[\"Petersburg\"] = \"petersburg\";\n    Hardfork[\"Istanbul\"] = \"istanbul\";\n    Hardfork[\"MuirGlacier\"] = \"muirGlacier\";\n    Hardfork[\"Berlin\"] = \"berlin\";\n    Hardfork[\"London\"] = \"london\";\n    Hardfork[\"ArrowGlacier\"] = \"arrowGlacier\";\n    Hardfork[\"Shanghai\"] = \"shanghai\";\n    Hardfork[\"MergeForkIdTransition\"] = \"mergeForkIdTransition\";\n    Hardfork[\"Merge\"] = \"merge\";\n})(Hardfork = exports.Hardfork || (exports.Hardfork = {}));\nvar ConsensusType;\n(function (ConsensusType) {\n    ConsensusType[\"ProofOfStake\"] = \"pos\";\n    ConsensusType[\"ProofOfWork\"] = \"pow\";\n    ConsensusType[\"ProofOfAuthority\"] = \"poa\";\n})(ConsensusType = exports.ConsensusType || (exports.ConsensusType = {}));\nvar ConsensusAlgorithm;\n(function (ConsensusAlgorithm) {\n    ConsensusAlgorithm[\"Ethash\"] = \"ethash\";\n    ConsensusAlgorithm[\"Clique\"] = \"clique\";\n    ConsensusAlgorithm[\"Casper\"] = \"casper\";\n})(ConsensusAlgorithm = exports.ConsensusAlgorithm || (exports.ConsensusAlgorithm = {}));\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nvar Common = /** @class */ (function (_super) {\n    __extends(Common, _super);\n    /**\n     *\n     * @constructor\n     */\n    function Common(opts) {\n        var e_1, _a;\n        var _this = this;\n        var _b, _c;\n        _this = _super.call(this) || this;\n        _this._supportedHardforks = [];\n        _this._eips = [];\n        _this._customChains = (_b = opts.customChains) !== null && _b !== void 0 ? _b : [];\n        _this._chainParams = _this.setChain(opts.chain);\n        _this.DEFAULT_HARDFORK = (_c = _this._chainParams.defaultHardfork) !== null && _c !== void 0 ? _c : Hardfork.Istanbul;\n        try {\n            for (var _d = __values(_this._chainParams.hardforks), _e = _d.next(); !_e.done; _e = _d.next()) {\n                var hf = _e.value;\n                if (!hf.forkHash) {\n                    hf.forkHash = _this._calcForkHash(hf.name);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        _this._hardfork = _this.DEFAULT_HARDFORK;\n        if (opts.supportedHardforks) {\n            _this._supportedHardforks = opts.supportedHardforks;\n        }\n        if (opts.hardfork) {\n            _this.setHardfork(opts.hardfork);\n        }\n        if (opts.eips) {\n            _this.setEIPs(opts.eips);\n        }\n        return _this;\n    }\n    /**\n     * Creates a {@link Common} object for a custom chain, based on a standard one.\n     *\n     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n     * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n     *\n     * ```javascript\n     * Common.custom({chainId: 123})\n     * ```\n     *\n     * There are also selected supported custom chains which can be initialized by using one of the\n     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n     *\n     * ```javascript\n     * Common.custom(CustomChains.MaticMumbai)\n     * ```\n     *\n     * Note that these supported custom chains only provide some base parameters (usually the chain and\n     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n     * the `@ethereumjs/tx` library to a Layer-2 chain).\n     *\n     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n     */\n    Common.custom = function (chainParamsOrName, opts) {\n        var _a;\n        if (opts === void 0) { opts = {}; }\n        var baseChain = (_a = opts.baseChain) !== null && _a !== void 0 ? _a : 'mainnet';\n        var standardChainParams = __assign({}, Common._getChainParams(baseChain));\n        standardChainParams['name'] = 'custom-chain';\n        if (typeof chainParamsOrName !== 'string') {\n            return new Common(__assign({ chain: __assign(__assign({}, standardChainParams), chainParamsOrName) }, opts));\n        }\n        else {\n            if (chainParamsOrName === CustomChain.PolygonMainnet) {\n                return Common.custom({\n                    name: CustomChain.PolygonMainnet,\n                    chainId: 137,\n                    networkId: 137,\n                }, opts);\n            }\n            if (chainParamsOrName === CustomChain.PolygonMumbai) {\n                return Common.custom({\n                    name: CustomChain.PolygonMumbai,\n                    chainId: 80001,\n                    networkId: 80001,\n                }, opts);\n            }\n            if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n                return Common.custom({\n                    name: CustomChain.ArbitrumRinkebyTestnet,\n                    chainId: 421611,\n                    networkId: 421611,\n                }, opts);\n            }\n            if (chainParamsOrName === CustomChain.xDaiChain) {\n                return Common.custom({\n                    name: CustomChain.xDaiChain,\n                    chainId: 100,\n                    networkId: 100,\n                }, opts);\n            }\n            if (chainParamsOrName === CustomChain.OptimisticKovan) {\n                return Common.custom({\n                    name: CustomChain.OptimisticKovan,\n                    chainId: 69,\n                    networkId: 69,\n                }, __assign({ hardfork: Hardfork.Berlin }, opts));\n            }\n            if (chainParamsOrName === CustomChain.OptimisticEthereum) {\n                return Common.custom({\n                    name: CustomChain.OptimisticEthereum,\n                    chainId: 10,\n                    networkId: 10,\n                }, __assign({ hardfork: Hardfork.Berlin }, opts));\n            }\n            throw new Error(\"Custom chain \".concat(chainParamsOrName, \" not supported\"));\n        }\n    };\n    /**\n     * Creates a {@link Common} object for a custom chain, based on a standard one. It uses all the `Chain`\n     * params from {@link baseChain} except the ones overridden in {@link customChainParams}.\n     *\n     * @deprecated Use {@link Common.custom} instead\n     *\n     * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n     * chain params on.\n     * @param customChainParams The custom parameters of the chain.\n     * @param hardfork String identifier ('byzantium') for hardfork (optional)\n     * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n     */\n    Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n        var standardChainParams = Common._getChainParams(baseChain);\n        return new Common({\n            chain: __assign(__assign({}, standardChainParams), customChainParams),\n            hardfork: hardfork,\n            supportedHardforks: supportedHardforks,\n        });\n    };\n    /**\n     * Static method to determine if a {@link chainId} is supported as a standard chain\n     * @param chainId BN id (`1`) of a standard chain\n     * @returns boolean\n     */\n    Common.isSupportedChainId = function (chainId) {\n        var initializedChains = (0, chains_1._getInitializedChains)();\n        return Boolean(initializedChains['names'][chainId.toString()]);\n    };\n    Common._getChainParams = function (chain, customChains) {\n        var initializedChains = (0, chains_1._getInitializedChains)(customChains);\n        if (typeof chain === 'number' || ethereumjs_util_1.BN.isBN(chain)) {\n            chain = chain.toString();\n            if (initializedChains['names'][chain]) {\n                var name_1 = initializedChains['names'][chain];\n                return initializedChains[name_1];\n            }\n            throw new Error(\"Chain with ID \".concat(chain, \" not supported\"));\n        }\n        if (initializedChains[chain]) {\n            return initializedChains[chain];\n        }\n        throw new Error(\"Chain with name \".concat(chain, \" not supported\"));\n    };\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain\n     *     representation. Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */\n    Common.prototype.setChain = function (chain) {\n        var e_2, _a;\n        if (typeof chain === 'number' || typeof chain === 'string' || ethereumjs_util_1.BN.isBN(chain)) {\n            // Filter out genesis states if passed in to customChains\n            var plainCustomChains = void 0;\n            if (this._customChains &&\n                this._customChains.length > 0 &&\n                Array.isArray(this._customChains[0])) {\n                plainCustomChains = this._customChains.map(function (e) { return e[0]; });\n            }\n            else {\n                plainCustomChains = this._customChains;\n            }\n            this._chainParams = Common._getChainParams(chain, plainCustomChains);\n        }\n        else if (typeof chain === 'object') {\n            if (this._customChains.length > 0) {\n                throw new Error('Chain must be a string, number, or BN when initialized with customChains passed in');\n            }\n            var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n            try {\n                for (var required_1 = __values(required), required_1_1 = required_1.next(); !required_1_1.done; required_1_1 = required_1.next()) {\n                    var param = required_1_1.value;\n                    if (chain[param] === undefined) {\n                        throw new Error(\"Missing required chain parameter: \".concat(param));\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (required_1_1 && !required_1_1.done && (_a = required_1.return)) _a.call(required_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            this._chainParams = chain;\n        }\n        else {\n            throw new Error('Wrong input format');\n        }\n        return this._chainParams;\n    };\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n     */\n    Common.prototype.setHardfork = function (hardfork) {\n        var e_3, _a;\n        if (!this._isSupportedHardfork(hardfork)) {\n            throw new Error(\"Hardfork \".concat(hardfork, \" not set as supported in supportedHardforks\"));\n        }\n        var existing = false;\n        try {\n            for (var HARDFORK_CHANGES_1 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next(); !HARDFORK_CHANGES_1_1.done; HARDFORK_CHANGES_1_1 = HARDFORK_CHANGES_1.next()) {\n                var hfChanges = HARDFORK_CHANGES_1_1.value;\n                if (hfChanges[0] === hardfork) {\n                    if (this._hardfork !== hardfork) {\n                        this._hardfork = hardfork;\n                        this.emit('hardforkChanged', hardfork);\n                    }\n                    existing = true;\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_1_1 && !HARDFORK_CHANGES_1_1.done && (_a = HARDFORK_CHANGES_1.return)) _a.call(HARDFORK_CHANGES_1);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        if (!existing) {\n            throw new Error(\"Hardfork with name \".concat(hardfork, \" not supported\"));\n        }\n    };\n    /**\n     * Returns the hardfork based on the block number or an optional\n     * total difficulty (Merge HF) provided.\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param blockNumber\n     * @param td\n     * @returns The name of the HF\n     */\n    Common.prototype.getHardforkByBlockNumber = function (blockNumber, td) {\n        var e_4, _a;\n        blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n        td = (0, ethereumjs_util_1.toType)(td, ethereumjs_util_1.TypeOutput.BN);\n        var hardfork = Hardfork.Chainstart;\n        var minTdHF;\n        var maxTdHF;\n        var previousHF;\n        try {\n            for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var hf = _c.value;\n                // Skip comparison for not applied HFs\n                if (hf.block === null) {\n                    if (td !== undefined && td !== null && hf.td !== undefined && hf.td !== null) {\n                        if (td.gte(new ethereumjs_util_1.BN(hf.td))) {\n                            return hf.name;\n                        }\n                    }\n                    continue;\n                }\n                if (blockNumber.gte(new ethereumjs_util_1.BN(hf.block))) {\n                    hardfork = hf.name;\n                }\n                if (td && hf.td) {\n                    if (td.gte(new ethereumjs_util_1.BN(hf.td))) {\n                        minTdHF = hf.name;\n                    }\n                    else {\n                        maxTdHF = previousHF;\n                    }\n                }\n                previousHF = hf.name;\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        if (td) {\n            var msgAdd = \"block number: \".concat(blockNumber, \" (-> \").concat(hardfork, \"), \");\n            if (minTdHF) {\n                if (!this.hardforkGteHardfork(hardfork, minTdHF)) {\n                    var msg = 'HF determined by block number is lower than the minimum total difficulty HF';\n                    msgAdd += \"total difficulty: \".concat(td, \" (-> \").concat(minTdHF, \")\");\n                    throw new Error(\"\".concat(msg, \": \").concat(msgAdd));\n                }\n            }\n            if (maxTdHF) {\n                if (!this.hardforkGteHardfork(maxTdHF, hardfork)) {\n                    var msg = 'Maximum HF determined by total difficulty is lower than the block number HF';\n                    msgAdd += \"total difficulty: \".concat(td, \" (-> \").concat(maxTdHF, \")\");\n                    throw new Error(\"\".concat(msg, \": \").concat(msgAdd));\n                }\n            }\n        }\n        return hardfork;\n    };\n    /**\n     * Sets a new hardfork based on the block number or an optional\n     * total difficulty (Merge HF) provided.\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param blockNumber\n     * @param td\n     * @returns The name of the HF set\n     */\n    Common.prototype.setHardforkByBlockNumber = function (blockNumber, td) {\n        var hardfork = this.getHardforkByBlockNumber(blockNumber, td);\n        this.setHardfork(hardfork);\n        return hardfork;\n    };\n    /**\n     * Internal helper function to choose between hardfork set and hardfork provided as param\n     * @param hardfork Hardfork given to function as a parameter\n     * @returns Hardfork chosen to be used\n     */\n    Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n        if (onlySupported === void 0) { onlySupported = true; }\n        if (!hardfork) {\n            hardfork = this._hardfork;\n        }\n        else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n            throw new Error(\"Hardfork \".concat(hardfork, \" not set as supported in supportedHardforks\"));\n        }\n        return hardfork;\n    };\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params\n     */\n    Common.prototype._getHardfork = function (hardfork) {\n        var e_5, _a;\n        var hfs = this.hardforks();\n        try {\n            for (var hfs_1 = __values(hfs), hfs_1_1 = hfs_1.next(); !hfs_1_1.done; hfs_1_1 = hfs_1.next()) {\n                var hf = hfs_1_1.value;\n                if (hf['name'] === hardfork)\n                    return hf;\n            }\n        }\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\n        finally {\n            try {\n                if (hfs_1_1 && !hfs_1_1.done && (_a = hfs_1.return)) _a.call(hfs_1);\n            }\n            finally { if (e_5) throw e_5.error; }\n        }\n        throw new Error(\"Hardfork \".concat(hardfork, \" not defined for chain \").concat(this.chainName()));\n    };\n    /**\n     * Internal helper function to check if a hardfork is set to be supported by the library\n     * @param hardfork Hardfork name\n     * @returns True if hardfork is supported\n     */\n    Common.prototype._isSupportedHardfork = function (hardfork) {\n        var e_6, _a;\n        if (this._supportedHardforks.length > 0) {\n            try {\n                for (var _b = __values(this._supportedHardforks), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var supportedHf = _c.value;\n                    if (hardfork === supportedHf)\n                        return true;\n                }\n            }\n            catch (e_6_1) { e_6 = { error: e_6_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_6) throw e_6.error; }\n            }\n        }\n        else {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Sets the active EIPs\n     * @param eips\n     */\n    Common.prototype.setEIPs = function (eips) {\n        var e_7, _a;\n        var _this = this;\n        if (eips === void 0) { eips = []; }\n        var _loop_1 = function (eip) {\n            if (!(eip in eips_1.EIPs)) {\n                throw new Error(\"\".concat(eip, \" not supported\"));\n            }\n            var minHF = this_1.gteHardfork(eips_1.EIPs[eip]['minimumHardfork']);\n            if (!minHF) {\n                throw new Error(\"\".concat(eip, \" cannot be activated on hardfork \").concat(this_1.hardfork(), \", minimumHardfork: \").concat(minHF));\n            }\n            if (eips_1.EIPs[eip].requiredEIPs) {\n                ;\n                eips_1.EIPs[eip].requiredEIPs.forEach(function (elem) {\n                    if (!(eips.includes(elem) || _this.isActivatedEIP(elem))) {\n                        throw new Error(\"\".concat(eip, \" requires EIP \").concat(elem, \", but is not included in the EIP list\"));\n                    }\n                });\n            }\n        };\n        var this_1 = this;\n        try {\n            for (var eips_2 = __values(eips), eips_2_1 = eips_2.next(); !eips_2_1.done; eips_2_1 = eips_2.next()) {\n                var eip = eips_2_1.value;\n                _loop_1(eip);\n            }\n        }\n        catch (e_7_1) { e_7 = { error: e_7_1 }; }\n        finally {\n            try {\n                if (eips_2_1 && !eips_2_1.done && (_a = eips_2.return)) _a.call(eips_2);\n            }\n            finally { if (e_7) throw e_7.error; }\n        }\n        this._eips = eips;\n    };\n    /**\n     * Returns a parameter for the current chain setup\n     *\n     * If the parameter is present in an EIP, the EIP always takes precendence.\n     * Otherwise the parameter if taken from the latest applied HF with\n     * a change on the respective parameter.\n     *\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @returns The value requested or `null` if not found\n     */\n    Common.prototype.param = function (topic, name) {\n        var e_8, _a;\n        // TODO: consider the case that different active EIPs\n        // can change the same parameter\n        var value = null;\n        try {\n            for (var _b = __values(this._eips), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var eip = _c.value;\n                value = this.paramByEIP(topic, name, eip);\n                if (value !== null) {\n                    return value;\n                }\n            }\n        }\n        catch (e_8_1) { e_8 = { error: e_8_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_8) throw e_8.error; }\n        }\n        return this.paramByHardfork(topic, name, this._hardfork);\n    };\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name\n     * @returns The value requested or `null` if not found\n     */\n    Common.prototype.paramByHardfork = function (topic, name, hardfork) {\n        var e_9, _a, e_10, _b;\n        hardfork = this._chooseHardfork(hardfork);\n        var value = null;\n        try {\n            for (var HARDFORK_CHANGES_2 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next(); !HARDFORK_CHANGES_2_1.done; HARDFORK_CHANGES_2_1 = HARDFORK_CHANGES_2.next()) {\n                var hfChanges = HARDFORK_CHANGES_2_1.value;\n                // EIP-referencing HF file (e.g. berlin.json)\n                if ('eips' in hfChanges[1]) {\n                    var hfEIPs = hfChanges[1]['eips'];\n                    try {\n                        for (var hfEIPs_1 = (e_10 = void 0, __values(hfEIPs)), hfEIPs_1_1 = hfEIPs_1.next(); !hfEIPs_1_1.done; hfEIPs_1_1 = hfEIPs_1.next()) {\n                            var eip = hfEIPs_1_1.value;\n                            var valueEIP = this.paramByEIP(topic, name, eip);\n                            value = valueEIP !== null ? valueEIP : value;\n                        }\n                    }\n                    catch (e_10_1) { e_10 = { error: e_10_1 }; }\n                    finally {\n                        try {\n                            if (hfEIPs_1_1 && !hfEIPs_1_1.done && (_b = hfEIPs_1.return)) _b.call(hfEIPs_1);\n                        }\n                        finally { if (e_10) throw e_10.error; }\n                    }\n                    // Paramater-inlining HF file (e.g. istanbul.json)\n                }\n                else {\n                    if (!hfChanges[1][topic]) {\n                        throw new Error(\"Topic \".concat(topic, \" not defined\"));\n                    }\n                    if (hfChanges[1][topic][name] !== undefined) {\n                        value = hfChanges[1][topic][name].v;\n                    }\n                }\n                if (hfChanges[0] === hardfork)\n                    break;\n            }\n        }\n        catch (e_9_1) { e_9 = { error: e_9_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_2_1 && !HARDFORK_CHANGES_2_1.done && (_a = HARDFORK_CHANGES_2.return)) _a.call(HARDFORK_CHANGES_2);\n            }\n            finally { if (e_9) throw e_9.error; }\n        }\n        return value;\n    };\n    /**\n     * Returns a parameter corresponding to an EIP\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param eip Number of the EIP\n     * @returns The value requested or `null` if not found\n     */\n    Common.prototype.paramByEIP = function (topic, name, eip) {\n        if (!(eip in eips_1.EIPs)) {\n            throw new Error(\"\".concat(eip, \" not supported\"));\n        }\n        var eipParams = eips_1.EIPs[eip];\n        if (!(topic in eipParams)) {\n            throw new Error(\"Topic \".concat(topic, \" not defined\"));\n        }\n        if (eipParams[topic][name] === undefined) {\n            return null;\n        }\n        var value = eipParams[topic][name].v;\n        return value;\n    };\n    /**\n     * Returns a parameter for the hardfork active on block number\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     */\n    Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n        var activeHfs = this.activeHardforks(blockNumber);\n        var hardfork = activeHfs[activeHfs.length - 1]['name'];\n        return this.paramByHardfork(topic, name, hardfork);\n    };\n    /**\n     * Checks if an EIP is activated by either being included in the EIPs\n     * manually passed in with the {@link CommonOpts.eips} or in a\n     * hardfork currently being active\n     *\n     * Note: this method only works for EIPs being supported\n     * by the {@link CommonOpts.eips} constructor option\n     * @param eip\n     */\n    Common.prototype.isActivatedEIP = function (eip) {\n        var e_11, _a;\n        if (this.eips().includes(eip)) {\n            return true;\n        }\n        try {\n            for (var HARDFORK_CHANGES_3 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next(); !HARDFORK_CHANGES_3_1.done; HARDFORK_CHANGES_3_1 = HARDFORK_CHANGES_3.next()) {\n                var hfChanges = HARDFORK_CHANGES_3_1.value;\n                var hf = hfChanges[1];\n                if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n                    if (hf['eips'].includes(eip)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        catch (e_11_1) { e_11 = { error: e_11_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_3_1 && !HARDFORK_CHANGES_3_1.done && (_a = HARDFORK_CHANGES_3.return)) _a.call(HARDFORK_CHANGES_3);\n            }\n            finally { if (e_11) throw e_11.error; }\n        }\n        return false;\n    };\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if HF is active on block number\n     */\n    Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n        var _a;\n        if (opts === void 0) { opts = {}; }\n        blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n        var onlySupported = (_a = opts.onlySupported) !== null && _a !== void 0 ? _a : false;\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\n        var hfBlock = this.hardforkBlockBN(hardfork);\n        if (hfBlock && blockNumber.gte(hfBlock)) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if HF is active on block number\n     */\n    Common.prototype.activeOnBlock = function (blockNumber, opts) {\n        return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n    };\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */\n    Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n        var e_12, _a;\n        if (opts === void 0) { opts = {}; }\n        var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n        hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n        var hardforks;\n        if (onlyActive) {\n            hardforks = this.activeHardforks(null, opts);\n        }\n        else {\n            hardforks = this.hardforks();\n        }\n        var posHf1 = -1, posHf2 = -1;\n        var index = 0;\n        try {\n            for (var hardforks_2 = __values(hardforks), hardforks_2_1 = hardforks_2.next(); !hardforks_2_1.done; hardforks_2_1 = hardforks_2.next()) {\n                var hf = hardforks_2_1.value;\n                if (hf['name'] === hardfork1)\n                    posHf1 = index;\n                if (hf['name'] === hardfork2)\n                    posHf2 = index;\n                index += 1;\n            }\n        }\n        catch (e_12_1) { e_12 = { error: e_12_1 }; }\n        finally {\n            try {\n                if (hardforks_2_1 && !hardforks_2_1.done && (_a = hardforks_2.return)) _a.call(hardforks_2);\n            }\n            finally { if (e_12) throw e_12.error; }\n        }\n        return posHf1 >= posHf2 && posHf2 !== -1;\n    };\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @param opts Hardfork options\n     * @returns True if hardfork set is greater than hardfork provided\n     */\n    Common.prototype.gteHardfork = function (hardfork, opts) {\n        return this.hardforkGteHardfork(null, hardfork, opts);\n    };\n    /**\n     * Checks if given or set hardfork is active on the chain\n     * @param hardfork Hardfork name, optional if HF set\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if hardfork is active on the chain\n     */\n    Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n        var e_13, _a;\n        var _b;\n        if (opts === void 0) { opts = {}; }\n        var onlySupported = (_b = opts.onlySupported) !== null && _b !== void 0 ? _b : false;\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\n        try {\n            for (var _c = __values(this.hardforks()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var hf = _d.value;\n                if (hf['name'] === hardfork && hf['block'] !== null)\n                    return true;\n            }\n        }\n        catch (e_13_1) { e_13 = { error: e_13_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_13) throw e_13.error; }\n        }\n        return false;\n    };\n    /**\n     * Returns the active hardfork switches for the current chain\n     * @param blockNumber up to block if provided, otherwise for the whole chain\n     * @param opts Hardfork options (onlyActive unused)\n     * @return Array with hardfork arrays\n     */\n    Common.prototype.activeHardforks = function (blockNumber, opts) {\n        var e_14, _a;\n        if (opts === void 0) { opts = {}; }\n        var activeHardforks = [];\n        var hfs = this.hardforks();\n        try {\n            for (var hfs_2 = __values(hfs), hfs_2_1 = hfs_2.next(); !hfs_2_1.done; hfs_2_1 = hfs_2.next()) {\n                var hf = hfs_2_1.value;\n                if (hf['block'] === null)\n                    continue;\n                if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block'])\n                    break;\n                if (opts.onlySupported && !this._isSupportedHardfork(hf['name']))\n                    continue;\n                activeHardforks.push(hf);\n            }\n        }\n        catch (e_14_1) { e_14 = { error: e_14_1 }; }\n        finally {\n            try {\n                if (hfs_2_1 && !hfs_2_1.done && (_a = hfs_2.return)) _a.call(hfs_2);\n            }\n            finally { if (e_14) throw e_14.error; }\n        }\n        return activeHardforks;\n    };\n    /**\n     * Returns the latest active hardfork name for chain or block or throws if unavailable\n     * @param blockNumber up to block if provided, otherwise for the whole chain\n     * @param opts Hardfork options (onlyActive unused)\n     * @return Hardfork name\n     */\n    Common.prototype.activeHardfork = function (blockNumber, opts) {\n        if (opts === void 0) { opts = {}; }\n        var activeHardforks = this.activeHardforks(blockNumber, opts);\n        if (activeHardforks.length > 0) {\n            return activeHardforks[activeHardforks.length - 1]['name'];\n        }\n        else {\n            throw new Error(\"No (supported) active hardfork found\");\n        }\n    };\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if unscheduled\n     * @deprecated Please use {@link Common.hardforkBlockBN} for large number support\n     */\n    Common.prototype.hardforkBlock = function (hardfork) {\n        var block = this.hardforkBlockBN(hardfork);\n        return (0, ethereumjs_util_1.toType)(block, ethereumjs_util_1.TypeOutput.Number);\n    };\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if unscheduled\n     */\n    Common.prototype.hardforkBlockBN = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        var block = this._getHardfork(hardfork)['block'];\n        if (block === undefined || block === null) {\n            return null;\n        }\n        return new ethereumjs_util_1.BN(block);\n    };\n    /**\n     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Total difficulty or null if no set\n     */\n    Common.prototype.hardforkTD = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        var td = this._getHardfork(hardfork)['td'];\n        if (td === undefined || td === null) {\n            return null;\n        }\n        return new ethereumjs_util_1.BN(td);\n    };\n    /**\n     * True if block number provided is the hardfork (given or set) change block\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     */\n    Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n        blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n        hardfork = this._chooseHardfork(hardfork, false);\n        var block = this.hardforkBlockBN(hardfork);\n        return block ? block.eq(blockNumber) : false;\n    };\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if not available\n     * @deprecated Please use {@link Common.nextHardforkBlockBN} for large number support\n     */\n    Common.prototype.nextHardforkBlock = function (hardfork) {\n        var block = this.nextHardforkBlockBN(hardfork);\n        return (0, ethereumjs_util_1.toType)(block, ethereumjs_util_1.TypeOutput.Number);\n    };\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if not available\n     */\n    Common.prototype.nextHardforkBlockBN = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        var hfBlock = this.hardforkBlockBN(hardfork);\n        if (hfBlock === null) {\n            return null;\n        }\n        // Next fork block number or null if none available\n        // Logic: if accumulator is still null and on the first occurrence of\n        // a block greater than the current hfBlock set the accumulator,\n        // pass on the accumulator as the final result from this time on\n        var nextHfBlock = this.hardforks().reduce(function (acc, hf) {\n            var block = new ethereumjs_util_1.BN(hf.block);\n            return block.gt(hfBlock) && acc === null ? block : acc;\n        }, null);\n        return nextHfBlock;\n    };\n    /**\n     * True if block number provided is the hardfork change block following the hardfork given or set\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     */\n    Common.prototype.isNextHardforkBlock = function (blockNumber, hardfork) {\n        blockNumber = (0, ethereumjs_util_1.toType)(blockNumber, ethereumjs_util_1.TypeOutput.BN);\n        hardfork = this._chooseHardfork(hardfork, false);\n        var nextHardforkBlock = this.nextHardforkBlockBN(hardfork);\n        return nextHardforkBlock === null ? false : nextHardforkBlock.eq(blockNumber);\n    };\n    /**\n     * Internal helper function to calculate a fork hash\n     * @param hardfork Hardfork name\n     * @returns Fork hash as hex string\n     */\n    Common.prototype._calcForkHash = function (hardfork) {\n        var e_15, _a;\n        var genesis = Buffer.from(this.genesis().hash.substr(2), 'hex');\n        var hfBuffer = Buffer.alloc(0);\n        var prevBlock = 0;\n        try {\n            for (var _b = __values(this.hardforks()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var hf = _c.value;\n                var block = hf.block;\n                // Skip for chainstart (0), not applied HFs (null) and\n                // when already applied on same block number HFs\n                if (block !== 0 && block !== null && block !== prevBlock) {\n                    var hfBlockBuffer = Buffer.from(block.toString(16).padStart(16, '0'), 'hex');\n                    hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer]);\n                }\n                if (hf.name === hardfork)\n                    break;\n                if (block !== null) {\n                    prevBlock = block;\n                }\n            }\n        }\n        catch (e_15_1) { e_15 = { error: e_15_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_15) throw e_15.error; }\n        }\n        var inputBuffer = Buffer.concat([genesis, hfBuffer]);\n        // CRC32 delivers result as signed (negative) 32-bit integer,\n        // convert to hex string\n        var forkhash = (0, ethereumjs_util_1.intToBuffer)((0, crc_32_1.buf)(inputBuffer) >>> 0).toString('hex');\n        return \"0x\".concat(forkhash);\n    };\n    /**\n     * Returns an eth/64 compliant fork hash (EIP-2124)\n     * @param hardfork Hardfork name, optional if HF set\n     */\n    Common.prototype.forkHash = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        var data = this._getHardfork(hardfork);\n        if (data['block'] === null && data['td'] === undefined) {\n            var msg = 'No fork hash calculation possible for future hardfork';\n            throw new Error(msg);\n        }\n        if (data['forkHash'] !== undefined) {\n            return data['forkHash'];\n        }\n        return this._calcForkHash(hardfork);\n    };\n    /**\n     *\n     * @param forkHash Fork hash as a hex string\n     * @returns Array with hardfork data (name, block, forkHash)\n     */\n    Common.prototype.hardforkForForkHash = function (forkHash) {\n        var resArray = this.hardforks().filter(function (hf) {\n            return hf.forkHash === forkHash;\n        });\n        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n    };\n    /**\n     * Returns the Genesis parameters of the current chain\n     * @returns Genesis dictionary\n     */\n    Common.prototype.genesis = function () {\n        return this._chainParams['genesis'];\n    };\n    /**\n     * Returns the Genesis state of the current chain,\n     * all values are provided as hex-prefixed strings.\n     */\n    Common.prototype.genesisState = function () {\n        var e_16, _a;\n        // Use require statements here in favor of import statements\n        // to load json files on demand\n        // (high memory usage by large mainnet.json genesis state file)\n        switch (this.chainName()) {\n            case 'mainnet':\n                return require('./genesisStates/mainnet.json');\n            case 'ropsten':\n                return require('./genesisStates/ropsten.json');\n            case 'rinkeby':\n                return require('./genesisStates/rinkeby.json');\n            case 'kovan':\n                return require('./genesisStates/kovan.json');\n            case 'goerli':\n                return require('./genesisStates/goerli.json');\n            case 'sepolia':\n                return require('./genesisStates/sepolia.json');\n        }\n        // Custom chains with genesis state provided\n        if (this._customChains &&\n            this._customChains.length > 0 &&\n            Array.isArray(this._customChains[0])) {\n            try {\n                for (var _b = __values(this._customChains), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var chainArrayWithGenesis = _c.value;\n                    if (chainArrayWithGenesis[0].name === this.chainName()) {\n                        return chainArrayWithGenesis[1];\n                    }\n                }\n            }\n            catch (e_16_1) { e_16 = { error: e_16_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_16) throw e_16.error; }\n            }\n        }\n        return {};\n    };\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */\n    Common.prototype.hardforks = function () {\n        return this._chainParams['hardforks'];\n    };\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */\n    Common.prototype.bootstrapNodes = function () {\n        return this._chainParams['bootstrapNodes'];\n    };\n    /**\n     * Returns DNS networks for the current chain\n     * @returns {String[]} Array of DNS ENR urls\n     */\n    Common.prototype.dnsNetworks = function () {\n        return this._chainParams['dnsNetworks'];\n    };\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */\n    Common.prototype.hardfork = function () {\n        return this._hardfork;\n    };\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     * @deprecated Please use {@link Common.chainIdBN} for large number support\n     */\n    Common.prototype.chainId = function () {\n        return (0, ethereumjs_util_1.toType)(this.chainIdBN(), ethereumjs_util_1.TypeOutput.Number);\n    };\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */\n    Common.prototype.chainIdBN = function () {\n        return new ethereumjs_util_1.BN(this._chainParams['chainId']);\n    };\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */\n    Common.prototype.chainName = function () {\n        return this._chainParams['name'];\n    };\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     * @deprecated Please use {@link Common.networkIdBN} for large number support\n     */\n    Common.prototype.networkId = function () {\n        return (0, ethereumjs_util_1.toType)(this.networkIdBN(), ethereumjs_util_1.TypeOutput.Number);\n    };\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */\n    Common.prototype.networkIdBN = function () {\n        return new ethereumjs_util_1.BN(this._chainParams['networkId']);\n    };\n    /**\n     * Returns the active EIPs\n     * @returns List of EIPs\n     */\n    Common.prototype.eips = function () {\n        return this._eips;\n    };\n    /**\n     * Returns the consensus type of the network\n     * Possible values: \"pow\"|\"poa\"|\"pos\"\n     *\n     * Note: This value can update along a hardfork.\n     */\n    Common.prototype.consensusType = function () {\n        var e_17, _a;\n        var hardfork = this.hardfork();\n        var value;\n        try {\n            for (var HARDFORK_CHANGES_4 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_4_1 = HARDFORK_CHANGES_4.next(); !HARDFORK_CHANGES_4_1.done; HARDFORK_CHANGES_4_1 = HARDFORK_CHANGES_4.next()) {\n                var hfChanges = HARDFORK_CHANGES_4_1.value;\n                if ('consensus' in hfChanges[1]) {\n                    value = hfChanges[1]['consensus']['type'];\n                }\n                if (hfChanges[0] === hardfork)\n                    break;\n            }\n        }\n        catch (e_17_1) { e_17 = { error: e_17_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_4_1 && !HARDFORK_CHANGES_4_1.done && (_a = HARDFORK_CHANGES_4.return)) _a.call(HARDFORK_CHANGES_4);\n            }\n            finally { if (e_17) throw e_17.error; }\n        }\n        if (value) {\n            return value;\n        }\n        return this._chainParams['consensus']['type'];\n    };\n    /**\n     * Returns the concrete consensus implementation\n     * algorithm or protocol for the network\n     * e.g. \"ethash\" for \"pow\" consensus type,\n     * \"clique\" for \"poa\" consensus type or\n     * \"casper\" for \"pos\" consensus type.\n     *\n     * Note: This value can update along a hardfork.\n     */\n    Common.prototype.consensusAlgorithm = function () {\n        var e_18, _a;\n        var hardfork = this.hardfork();\n        var value;\n        try {\n            for (var HARDFORK_CHANGES_5 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_5_1 = HARDFORK_CHANGES_5.next(); !HARDFORK_CHANGES_5_1.done; HARDFORK_CHANGES_5_1 = HARDFORK_CHANGES_5.next()) {\n                var hfChanges = HARDFORK_CHANGES_5_1.value;\n                if ('consensus' in hfChanges[1]) {\n                    value = hfChanges[1]['consensus']['algorithm'];\n                }\n                if (hfChanges[0] === hardfork)\n                    break;\n            }\n        }\n        catch (e_18_1) { e_18 = { error: e_18_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_5_1 && !HARDFORK_CHANGES_5_1.done && (_a = HARDFORK_CHANGES_5.return)) _a.call(HARDFORK_CHANGES_5);\n            }\n            finally { if (e_18) throw e_18.error; }\n        }\n        if (value) {\n            return value;\n        }\n        return this._chainParams['consensus']['algorithm'];\n    };\n    /**\n     * Returns a dictionary with consensus configuration\n     * parameters based on the consensus algorithm\n     *\n     * Expected returns (parameters must be present in\n     * the respective chain json files):\n     *\n     * ethash: -\n     * clique: period, epoch\n     * aura: -\n     * casper: -\n     *\n     * Note: This value can update along a hardfork.\n     */\n    Common.prototype.consensusConfig = function () {\n        var e_19, _a;\n        var hardfork = this.hardfork();\n        var value;\n        try {\n            for (var HARDFORK_CHANGES_6 = __values(hardforks_1.hardforks), HARDFORK_CHANGES_6_1 = HARDFORK_CHANGES_6.next(); !HARDFORK_CHANGES_6_1.done; HARDFORK_CHANGES_6_1 = HARDFORK_CHANGES_6.next()) {\n                var hfChanges = HARDFORK_CHANGES_6_1.value;\n                if ('consensus' in hfChanges[1]) {\n                    // The config parameter is named after the respective consensus algorithm\n                    value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']];\n                }\n                if (hfChanges[0] === hardfork)\n                    break;\n            }\n        }\n        catch (e_19_1) { e_19 = { error: e_19_1 }; }\n        finally {\n            try {\n                if (HARDFORK_CHANGES_6_1 && !HARDFORK_CHANGES_6_1.done && (_a = HARDFORK_CHANGES_6.return)) _a.call(HARDFORK_CHANGES_6);\n            }\n            finally { if (e_19) throw e_19.error; }\n        }\n        if (value) {\n            return value;\n        }\n        var consensusAlgorithm = this.consensusAlgorithm();\n        return this._chainParams['consensus'][consensusAlgorithm];\n    };\n    /**\n     * Returns a deep copy of this {@link Common} instance.\n     */\n    Common.prototype.copy = function () {\n        var copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n        copy.removeAllListeners();\n        return copy;\n    };\n    return Common;\n}(events_1.EventEmitter));\nexports.default = Common;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}