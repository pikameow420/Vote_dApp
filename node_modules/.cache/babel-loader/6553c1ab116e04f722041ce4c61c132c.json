{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseTransaction = void 0;\nvar common_1 = __importStar(require(\"@ethereumjs/common\"));\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nvar BaseTransaction = /** @class */function () {\n  function BaseTransaction(txData) {\n    this.cache = {\n      hash: undefined,\n      dataFee: undefined\n    };\n    /**\n     * List of tx type defining EIPs,\n     * e.g. 1559 (fee market) and 2930 (access lists)\n     * for FeeMarketEIP1559Transaction objects\n     */\n    this.activeCapabilities = [];\n    /**\n     * The default chain the tx falls back to if no Common\n     * is provided and if the chain can't be derived from\n     * a passed in chainId (only EIP-2718 typed txs) or\n     * EIP-155 signature (legacy txs).\n     *\n     * @hidden\n     */\n    this.DEFAULT_CHAIN = common_1.Chain.Mainnet;\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n    this.DEFAULT_HARDFORK = common_1.Hardfork.Istanbul;\n    var nonce = txData.nonce,\n      gasLimit = txData.gasLimit,\n      to = txData.to,\n      value = txData.value,\n      data = txData.data,\n      v = txData.v,\n      r = txData.r,\n      s = txData.s,\n      type = txData.type;\n    this._type = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(type)).toNumber();\n    var toB = (0, ethereumjs_util_1.toBuffer)(to === '' ? '0x' : to);\n    var vB = (0, ethereumjs_util_1.toBuffer)(v === '' ? '0x' : v);\n    var rB = (0, ethereumjs_util_1.toBuffer)(r === '' ? '0x' : r);\n    var sB = (0, ethereumjs_util_1.toBuffer)(s === '' ? '0x' : s);\n    this.nonce = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(nonce === '' ? '0x' : nonce));\n    this.gasLimit = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasLimit === '' ? '0x' : gasLimit));\n    this.to = toB.length > 0 ? new ethereumjs_util_1.Address(toB) : undefined;\n    this.value = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(value === '' ? '0x' : value));\n    this.data = (0, ethereumjs_util_1.toBuffer)(data === '' ? '0x' : data);\n    this.v = vB.length > 0 ? new ethereumjs_util_1.BN(vB) : undefined;\n    this.r = rB.length > 0 ? new ethereumjs_util_1.BN(rB) : undefined;\n    this.s = sB.length > 0 ? new ethereumjs_util_1.BN(sB) : undefined;\n    this._validateCannotExceedMaxInteger({\n      value: this.value,\n      r: this.r,\n      s: this.s\n    });\n    // geth limits gasLimit to 2^64-1\n    this._validateCannotExceedMaxInteger({\n      gasLimit: this.gasLimit\n    }, 64);\n    // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n    this._validateCannotExceedMaxInteger({\n      nonce: this.nonce\n    }, 64, true);\n  }\n  Object.defineProperty(BaseTransaction.prototype, \"transactionType\", {\n    /**\n     * Alias for {@link BaseTransaction.type}\n     *\n     * @deprecated Use `type` instead\n     */\n    get: function () {\n      return this.type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BaseTransaction.prototype, \"type\", {\n    /**\n     * Returns the transaction type.\n     *\n     * Note: legacy txs will return tx type `0`.\n     */\n    get: function () {\n      return this._type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Checks if a tx type defining capability is active\n   * on a tx, for example the EIP-1559 fee market mechanism\n   * or the EIP-2930 access list feature.\n   *\n   * Note that this is different from the tx type itself,\n   * so EIP-2930 access lists can very well be active\n   * on an EIP-1559 tx for example.\n   *\n   * This method can be useful for feature checks if the\n   * tx type is unknown (e.g. when instantiated with\n   * the tx factory).\n   *\n   * See `Capabilites` in the `types` module for a reference\n   * on all supported capabilities.\n   */\n  BaseTransaction.prototype.supports = function (capability) {\n    return this.activeCapabilities.includes(capability);\n  };\n  BaseTransaction.prototype.validate = function (stringError) {\n    if (stringError === void 0) {\n      stringError = false;\n    }\n    var errors = [];\n    if (this.getBaseFee().gt(this.gasLimit)) {\n      errors.push(\"gasLimit is too low. given \".concat(this.gasLimit, \", need at least \").concat(this.getBaseFee()));\n    }\n    if (this.isSigned() && !this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n    return stringError ? errors : errors.length === 0;\n  };\n  /**\n   * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   */\n  BaseTransaction.prototype.getBaseFee = function () {\n    var fee = this.getDataFee().addn(this.common.param('gasPrices', 'tx'));\n    if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n      fee.iaddn(this.common.param('gasPrices', 'txCreation'));\n    }\n    return fee;\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  BaseTransaction.prototype.getDataFee = function () {\n    var txDataZero = this.common.param('gasPrices', 'txDataZero');\n    var txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n    var cost = 0;\n    for (var i = 0; i < this.data.length; i++) {\n      this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;\n    }\n    cost = new ethereumjs_util_1.BN(cost);\n    if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n      var dataLength = Math.ceil(this.data.length / 32);\n      var initCodeCost = new ethereumjs_util_1.BN(this.common.param('gasPrices', 'initCodeWordCost')).imuln(dataLength);\n      cost.iadd(initCodeCost);\n    }\n    return cost;\n  };\n  /**\n   * If the tx's `to` is to the creation address\n   */\n  BaseTransaction.prototype.toCreationAddress = function () {\n    return this.to === undefined || this.to.buf.length === 0;\n  };\n  BaseTransaction.prototype.isSigned = function () {\n    var _a = this,\n      v = _a.v,\n      r = _a.r,\n      s = _a.s;\n    if (this.type === 0) {\n      if (!v || !r || !s) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      if (v === undefined || !r || !s) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  };\n  /**\n   * Determines if the signature is valid\n   */\n  BaseTransaction.prototype.verifySignature = function () {\n    try {\n      // Main signature verification is done in `getSenderPublicKey()`\n      var publicKey = this.getSenderPublicKey();\n      return (0, ethereumjs_util_1.unpadBuffer)(publicKey).length !== 0;\n    } catch (e) {\n      return false;\n    }\n  };\n  /**\n   * Returns the sender's address\n   */\n  BaseTransaction.prototype.getSenderAddress = function () {\n    return new ethereumjs_util_1.Address((0, ethereumjs_util_1.publicToAddress)(this.getSenderPublicKey()));\n  };\n  /**\n   * Signs a transaction.\n   *\n   * Note that the signed tx is returned as a new object,\n   * use as follows:\n   * ```javascript\n   * const signedTx = tx.sign(privateKey)\n   * ```\n   */\n  BaseTransaction.prototype.sign = function (privateKey) {\n    if (privateKey.length !== 32) {\n      var msg = this._errorMsg('Private key must be 32 bytes in length.');\n      throw new Error(msg);\n    }\n    // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n    // and want to recreate a signature (where EIP155 should be applied)\n    // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n    // 2021-06-23\n    var hackApplied = false;\n    if (this.type === 0 && this.common.gteHardfork('spuriousDragon') && !this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n      hackApplied = true;\n    }\n    var msgHash = this.getMessageToSign(true);\n    var _a = (0, ethereumjs_util_1.ecsign)(msgHash, privateKey),\n      v = _a.v,\n      r = _a.r,\n      s = _a.s;\n    var tx = this._processSignature(v, r, s);\n    // Hack part 2\n    if (hackApplied) {\n      var index = this.activeCapabilities.indexOf(types_1.Capability.EIP155ReplayProtection);\n      if (index > -1) {\n        this.activeCapabilities.splice(index, 1);\n      }\n    }\n    return tx;\n  };\n  /**\n   * Does chain ID checks on common and returns a common\n   * to be used on instantiation\n   * @hidden\n   *\n   * @param common - {@link Common} instance from tx options\n   * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n   */\n  BaseTransaction.prototype._getCommon = function (common, chainId) {\n    var _a;\n    // Chain ID provided\n    if (chainId) {\n      var chainIdBN = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(chainId));\n      if (common) {\n        if (!common.chainIdBN().eq(chainIdBN)) {\n          var msg = this._errorMsg('The chain ID does not match the chain ID of Common');\n          throw new Error(msg);\n        }\n        // Common provided, chain ID does match\n        // -> Return provided Common\n        return common.copy();\n      } else {\n        if (common_1.default.isSupportedChainId(chainIdBN)) {\n          // No Common, chain ID supported by Common\n          // -> Instantiate Common with chain ID\n          return new common_1.default({\n            chain: chainIdBN,\n            hardfork: this.DEFAULT_HARDFORK\n          });\n        } else {\n          // No Common, chain ID not supported by Common\n          // -> Instantiate custom Common derived from DEFAULT_CHAIN\n          return common_1.default.forCustomChain(this.DEFAULT_CHAIN, {\n            name: 'custom-chain',\n            networkId: chainIdBN,\n            chainId: chainIdBN\n          }, this.DEFAULT_HARDFORK);\n        }\n      }\n    } else {\n      // No chain ID provided\n      // -> return Common provided or create new default Common\n      return (_a = common === null || common === void 0 ? void 0 : common.copy()) !== null && _a !== void 0 ? _a : new common_1.default({\n        chain: this.DEFAULT_CHAIN,\n        hardfork: this.DEFAULT_HARDFORK\n      });\n    }\n  };\n  /**\n   * Validates that an object with BN values cannot exceed the specified bit limit.\n   * @param values Object containing string keys and BN values\n   * @param bits Number of bits to check (64 or 256)\n   * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n   */\n  BaseTransaction.prototype._validateCannotExceedMaxInteger = function (values, bits, cannotEqual) {\n    var e_1, _a;\n    if (bits === void 0) {\n      bits = 256;\n    }\n    if (cannotEqual === void 0) {\n      cannotEqual = false;\n    }\n    try {\n      for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n          key = _d[0],\n          value = _d[1];\n        switch (bits) {\n          case 64:\n            if (cannotEqual) {\n              if (value === null || value === void 0 ? void 0 : value.gte(ethereumjs_util_1.MAX_UINT64)) {\n                var msg = this._errorMsg(\"\".concat(key, \" cannot equal or exceed MAX_UINT64 (2^64-1), given \").concat(value));\n                throw new Error(msg);\n              }\n            } else {\n              if (value === null || value === void 0 ? void 0 : value.gt(ethereumjs_util_1.MAX_UINT64)) {\n                var msg = this._errorMsg(\"\".concat(key, \" cannot exceed MAX_UINT64 (2^64-1), given \").concat(value));\n                throw new Error(msg);\n              }\n            }\n            break;\n          case 256:\n            if (cannotEqual) {\n              if (value === null || value === void 0 ? void 0 : value.gte(ethereumjs_util_1.MAX_INTEGER)) {\n                var msg = this._errorMsg(\"\".concat(key, \" cannot equal or exceed MAX_INTEGER (2^256-1), given \").concat(value));\n                throw new Error(msg);\n              }\n            } else {\n              if (value === null || value === void 0 ? void 0 : value.gt(ethereumjs_util_1.MAX_INTEGER)) {\n                var msg = this._errorMsg(\"\".concat(key, \" cannot exceed MAX_INTEGER (2^256-1), given \").concat(value));\n                throw new Error(msg);\n              }\n            }\n            break;\n          default:\n            {\n              var msg = this._errorMsg('unimplemented bits value');\n              throw new Error(msg);\n            }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * Returns the shared error postfix part for _error() method\n   * tx type implementations.\n   */\n  BaseTransaction.prototype._getSharedErrorPostfix = function () {\n    var hash = '';\n    try {\n      hash = this.isSigned() ? (0, ethereumjs_util_1.bufferToHex)(this.hash()) : 'not available (unsigned)';\n    } catch (e) {\n      hash = 'error';\n    }\n    var isSigned = '';\n    try {\n      isSigned = this.isSigned().toString();\n    } catch (e) {\n      hash = 'error';\n    }\n    var hf = '';\n    try {\n      hf = this.common.hardfork();\n    } catch (e) {\n      hf = 'error';\n    }\n    var postfix = \"tx type=\".concat(this.type, \" hash=\").concat(hash, \" nonce=\").concat(this.nonce, \" value=\").concat(this.value, \" \");\n    postfix += \"signed=\".concat(isSigned, \" hf=\").concat(hf);\n    return postfix;\n  };\n  return BaseTransaction;\n}();\nexports.BaseTransaction = BaseTransaction;","map":{"version":3,"sources":["../src/baseTransaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTransaction = void 0;\nvar common_1 = __importStar(require(\"@ethereumjs/common\"));\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nvar BaseTransaction = /** @class */ (function () {\n    function BaseTransaction(txData) {\n        this.cache = {\n            hash: undefined,\n            dataFee: undefined,\n        };\n        /**\n         * List of tx type defining EIPs,\n         * e.g. 1559 (fee market) and 2930 (access lists)\n         * for FeeMarketEIP1559Transaction objects\n         */\n        this.activeCapabilities = [];\n        /**\n         * The default chain the tx falls back to if no Common\n         * is provided and if the chain can't be derived from\n         * a passed in chainId (only EIP-2718 typed txs) or\n         * EIP-155 signature (legacy txs).\n         *\n         * @hidden\n         */\n        this.DEFAULT_CHAIN = common_1.Chain.Mainnet;\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        this.DEFAULT_HARDFORK = common_1.Hardfork.Istanbul;\n        var nonce = txData.nonce, gasLimit = txData.gasLimit, to = txData.to, value = txData.value, data = txData.data, v = txData.v, r = txData.r, s = txData.s, type = txData.type;\n        this._type = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(type)).toNumber();\n        var toB = (0, ethereumjs_util_1.toBuffer)(to === '' ? '0x' : to);\n        var vB = (0, ethereumjs_util_1.toBuffer)(v === '' ? '0x' : v);\n        var rB = (0, ethereumjs_util_1.toBuffer)(r === '' ? '0x' : r);\n        var sB = (0, ethereumjs_util_1.toBuffer)(s === '' ? '0x' : s);\n        this.nonce = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(nonce === '' ? '0x' : nonce));\n        this.gasLimit = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasLimit === '' ? '0x' : gasLimit));\n        this.to = toB.length > 0 ? new ethereumjs_util_1.Address(toB) : undefined;\n        this.value = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(value === '' ? '0x' : value));\n        this.data = (0, ethereumjs_util_1.toBuffer)(data === '' ? '0x' : data);\n        this.v = vB.length > 0 ? new ethereumjs_util_1.BN(vB) : undefined;\n        this.r = rB.length > 0 ? new ethereumjs_util_1.BN(rB) : undefined;\n        this.s = sB.length > 0 ? new ethereumjs_util_1.BN(sB) : undefined;\n        this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });\n        // geth limits gasLimit to 2^64-1\n        this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);\n        // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n        this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);\n    }\n    Object.defineProperty(BaseTransaction.prototype, \"transactionType\", {\n        /**\n         * Alias for {@link BaseTransaction.type}\n         *\n         * @deprecated Use `type` instead\n         */\n        get: function () {\n            return this.type;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTransaction.prototype, \"type\", {\n        /**\n         * Returns the transaction type.\n         *\n         * Note: legacy txs will return tx type `0`.\n         */\n        get: function () {\n            return this._type;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Checks if a tx type defining capability is active\n     * on a tx, for example the EIP-1559 fee market mechanism\n     * or the EIP-2930 access list feature.\n     *\n     * Note that this is different from the tx type itself,\n     * so EIP-2930 access lists can very well be active\n     * on an EIP-1559 tx for example.\n     *\n     * This method can be useful for feature checks if the\n     * tx type is unknown (e.g. when instantiated with\n     * the tx factory).\n     *\n     * See `Capabilites` in the `types` module for a reference\n     * on all supported capabilities.\n     */\n    BaseTransaction.prototype.supports = function (capability) {\n        return this.activeCapabilities.includes(capability);\n    };\n    BaseTransaction.prototype.validate = function (stringError) {\n        if (stringError === void 0) { stringError = false; }\n        var errors = [];\n        if (this.getBaseFee().gt(this.gasLimit)) {\n            errors.push(\"gasLimit is too low. given \".concat(this.gasLimit, \", need at least \").concat(this.getBaseFee()));\n        }\n        if (this.isSigned() && !this.verifySignature()) {\n            errors.push('Invalid Signature');\n        }\n        return stringError ? errors : errors.length === 0;\n    };\n    /**\n     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n     */\n    BaseTransaction.prototype.getBaseFee = function () {\n        var fee = this.getDataFee().addn(this.common.param('gasPrices', 'tx'));\n        if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n            fee.iaddn(this.common.param('gasPrices', 'txCreation'));\n        }\n        return fee;\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    BaseTransaction.prototype.getDataFee = function () {\n        var txDataZero = this.common.param('gasPrices', 'txDataZero');\n        var txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n        var cost = 0;\n        for (var i = 0; i < this.data.length; i++) {\n            this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);\n        }\n        cost = new ethereumjs_util_1.BN(cost);\n        if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n            var dataLength = Math.ceil(this.data.length / 32);\n            var initCodeCost = new ethereumjs_util_1.BN(this.common.param('gasPrices', 'initCodeWordCost')).imuln(dataLength);\n            cost.iadd(initCodeCost);\n        }\n        return cost;\n    };\n    /**\n     * If the tx's `to` is to the creation address\n     */\n    BaseTransaction.prototype.toCreationAddress = function () {\n        return this.to === undefined || this.to.buf.length === 0;\n    };\n    BaseTransaction.prototype.isSigned = function () {\n        var _a = this, v = _a.v, r = _a.r, s = _a.s;\n        if (this.type === 0) {\n            if (!v || !r || !s) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n        else {\n            if (v === undefined || !r || !s) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n    };\n    /**\n     * Determines if the signature is valid\n     */\n    BaseTransaction.prototype.verifySignature = function () {\n        try {\n            // Main signature verification is done in `getSenderPublicKey()`\n            var publicKey = this.getSenderPublicKey();\n            return (0, ethereumjs_util_1.unpadBuffer)(publicKey).length !== 0;\n        }\n        catch (e) {\n            return false;\n        }\n    };\n    /**\n     * Returns the sender's address\n     */\n    BaseTransaction.prototype.getSenderAddress = function () {\n        return new ethereumjs_util_1.Address((0, ethereumjs_util_1.publicToAddress)(this.getSenderPublicKey()));\n    };\n    /**\n     * Signs a transaction.\n     *\n     * Note that the signed tx is returned as a new object,\n     * use as follows:\n     * ```javascript\n     * const signedTx = tx.sign(privateKey)\n     * ```\n     */\n    BaseTransaction.prototype.sign = function (privateKey) {\n        if (privateKey.length !== 32) {\n            var msg = this._errorMsg('Private key must be 32 bytes in length.');\n            throw new Error(msg);\n        }\n        // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n        // and want to recreate a signature (where EIP155 should be applied)\n        // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n        // 2021-06-23\n        var hackApplied = false;\n        if (this.type === 0 &&\n            this.common.gteHardfork('spuriousDragon') &&\n            !this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n            hackApplied = true;\n        }\n        var msgHash = this.getMessageToSign(true);\n        var _a = (0, ethereumjs_util_1.ecsign)(msgHash, privateKey), v = _a.v, r = _a.r, s = _a.s;\n        var tx = this._processSignature(v, r, s);\n        // Hack part 2\n        if (hackApplied) {\n            var index = this.activeCapabilities.indexOf(types_1.Capability.EIP155ReplayProtection);\n            if (index > -1) {\n                this.activeCapabilities.splice(index, 1);\n            }\n        }\n        return tx;\n    };\n    /**\n     * Does chain ID checks on common and returns a common\n     * to be used on instantiation\n     * @hidden\n     *\n     * @param common - {@link Common} instance from tx options\n     * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n     */\n    BaseTransaction.prototype._getCommon = function (common, chainId) {\n        var _a;\n        // Chain ID provided\n        if (chainId) {\n            var chainIdBN = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(chainId));\n            if (common) {\n                if (!common.chainIdBN().eq(chainIdBN)) {\n                    var msg = this._errorMsg('The chain ID does not match the chain ID of Common');\n                    throw new Error(msg);\n                }\n                // Common provided, chain ID does match\n                // -> Return provided Common\n                return common.copy();\n            }\n            else {\n                if (common_1.default.isSupportedChainId(chainIdBN)) {\n                    // No Common, chain ID supported by Common\n                    // -> Instantiate Common with chain ID\n                    return new common_1.default({ chain: chainIdBN, hardfork: this.DEFAULT_HARDFORK });\n                }\n                else {\n                    // No Common, chain ID not supported by Common\n                    // -> Instantiate custom Common derived from DEFAULT_CHAIN\n                    return common_1.default.forCustomChain(this.DEFAULT_CHAIN, {\n                        name: 'custom-chain',\n                        networkId: chainIdBN,\n                        chainId: chainIdBN,\n                    }, this.DEFAULT_HARDFORK);\n                }\n            }\n        }\n        else {\n            // No chain ID provided\n            // -> return Common provided or create new default Common\n            return ((_a = common === null || common === void 0 ? void 0 : common.copy()) !== null && _a !== void 0 ? _a : new common_1.default({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK }));\n        }\n    };\n    /**\n     * Validates that an object with BN values cannot exceed the specified bit limit.\n     * @param values Object containing string keys and BN values\n     * @param bits Number of bits to check (64 or 256)\n     * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n     */\n    BaseTransaction.prototype._validateCannotExceedMaxInteger = function (values, bits, cannotEqual) {\n        var e_1, _a;\n        if (bits === void 0) { bits = 256; }\n        if (cannotEqual === void 0) { cannotEqual = false; }\n        try {\n            for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];\n                switch (bits) {\n                    case 64:\n                        if (cannotEqual) {\n                            if (value === null || value === void 0 ? void 0 : value.gte(ethereumjs_util_1.MAX_UINT64)) {\n                                var msg = this._errorMsg(\"\".concat(key, \" cannot equal or exceed MAX_UINT64 (2^64-1), given \").concat(value));\n                                throw new Error(msg);\n                            }\n                        }\n                        else {\n                            if (value === null || value === void 0 ? void 0 : value.gt(ethereumjs_util_1.MAX_UINT64)) {\n                                var msg = this._errorMsg(\"\".concat(key, \" cannot exceed MAX_UINT64 (2^64-1), given \").concat(value));\n                                throw new Error(msg);\n                            }\n                        }\n                        break;\n                    case 256:\n                        if (cannotEqual) {\n                            if (value === null || value === void 0 ? void 0 : value.gte(ethereumjs_util_1.MAX_INTEGER)) {\n                                var msg = this._errorMsg(\"\".concat(key, \" cannot equal or exceed MAX_INTEGER (2^256-1), given \").concat(value));\n                                throw new Error(msg);\n                            }\n                        }\n                        else {\n                            if (value === null || value === void 0 ? void 0 : value.gt(ethereumjs_util_1.MAX_INTEGER)) {\n                                var msg = this._errorMsg(\"\".concat(key, \" cannot exceed MAX_INTEGER (2^256-1), given \").concat(value));\n                                throw new Error(msg);\n                            }\n                        }\n                        break;\n                    default: {\n                        var msg = this._errorMsg('unimplemented bits value');\n                        throw new Error(msg);\n                    }\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    /**\n     * Returns the shared error postfix part for _error() method\n     * tx type implementations.\n     */\n    BaseTransaction.prototype._getSharedErrorPostfix = function () {\n        var hash = '';\n        try {\n            hash = this.isSigned() ? (0, ethereumjs_util_1.bufferToHex)(this.hash()) : 'not available (unsigned)';\n        }\n        catch (e) {\n            hash = 'error';\n        }\n        var isSigned = '';\n        try {\n            isSigned = this.isSigned().toString();\n        }\n        catch (e) {\n            hash = 'error';\n        }\n        var hf = '';\n        try {\n            hf = this.common.hardfork();\n        }\n        catch (e) {\n            hf = 'error';\n        }\n        var postfix = \"tx type=\".concat(this.type, \" hash=\").concat(hash, \" nonce=\").concat(this.nonce, \" value=\").concat(this.value, \" \");\n        postfix += \"signed=\".concat(isSigned, \" hf=\").concat(hf);\n        return postfix;\n    };\n    return BaseTransaction;\n}());\nexports.BaseTransaction = BaseTransaction;\n//# sourceMappingURL=baseTransaction.js.map"]},"metadata":{},"sourceType":"script"}