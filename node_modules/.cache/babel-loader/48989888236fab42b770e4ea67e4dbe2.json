{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS, getChainConfig, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { PhantomInjectedProvider } from '@web3auth/solana-provider';\nimport log from 'loglevel';\nfunction poll(callback, interval, count) {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done) poll(callback, interval, count - 1).then(res => {\n          resolve(res);\n          return res;\n        }).catch(err => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\nconst detectProvider = async function () {\n  var _window$solana;\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    interval: 1000,\n    count: 3\n  };\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!((_window$solana = window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom);\n  if (isPhantomAvailable) {\n    return window.solana;\n  }\n  const isAvailable = await poll(() => {\n    var _window$solana2;\n    return (_window$solana2 = window.solana) === null || _window$solana2 === void 0 ? void 0 : _window$solana2.isPhantom;\n  }, options.interval, options.count);\n  if (isAvailable) return window.solana;\n  return null;\n};\nclass PhantomAdapter extends BaseAdapter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.PHANTOM);\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n    _defineProperty(this, \"_wallet\", null);\n    _defineProperty(this, \"phantomProvider\", null);\n    _defineProperty(this, \"rehydrated\", false);\n    _defineProperty(this, \"_onDisconnect\", () => {\n      if (this._wallet) {\n        this._wallet.off(\"disconnect\", this._onDisconnect);\n        this.rehydrated = false; // ready to be connected again only if it was previously connected and not cleaned up\n\n        this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n        this.emit(ADAPTER_EVENTS.DISCONNECTED);\n      }\n    });\n    this.chainConfig = options.chainConfig || null;\n  }\n  get isWalletConnected() {\n    var _this$_wallet;\n    return !!((_this$_wallet = this._wallet) !== null && _this$_wallet !== void 0 && _this$_wallet.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n  get provider() {\n    var _this$phantomProvider;\n    return ((_this$phantomProvider = this.phantomProvider) === null || _this$phantomProvider === void 0 ? void 0 : _this$phantomProvider.provider) || null;\n  }\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n  setAdapterSettings(_) {}\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n    this._wallet = await detectProvider({\n      interval: 500,\n      count: 3\n    });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n  async connect() {\n    var _this = this;\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, {\n        adapter: WALLET_ADAPTERS.PHANTOM\n      });\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet);\n              resolve(this.provider);\n            };\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n            this._wallet.once(\"connect\", connect); // Raise an issue on phantom that if window is closed, disconnect event is not fired\n\n            this._wallet._handleDisconnect = function () {\n              reject(WalletInitializationError.windowClosed());\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n              return handleDisconnect.apply(_this._wallet, args);\n            };\n            this._wallet.connect().catch(reason => {\n              reject(reason);\n            });\n          });\n        } catch (error) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError(error === null || error === void 0 ? void 0 : error.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      var _this$_wallet2;\n      await ((_this$_wallet2 = this._wallet) === null || _this$_wallet2 === void 0 ? void 0 : _this$_wallet2.disconnect());\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));\n    }\n  }\n  async getUserInfo() {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n  async connectWithProvider(injectedProvider) {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, {\n      adapter: WALLET_ADAPTERS.PHANTOM,\n      reconnected: this.rehydrated\n    });\n    return this.provider;\n  }\n}\nexport { PhantomAdapter };","map":{"version":3,"sources":["../src/utils.ts","../src/phantomAdapter.ts"],"names":["poll","callback","interval","count","Promise","resolve","reject","setTimeout","done","then","res","catch","err","detectProvider","options","isPhantomAvailable","window","solana","isPhantom","isAvailable","PhantomAdapter","BaseAdapter","WALLET_ADAPTERS","PHANTOM","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","constructor","chainConfig","isWalletConnected","_wallet","isConnected","status","CONNECTED","provider","phantomProvider","_","Error","setAdapterSettings","init","checkInitializationRequirements","getChainConfig","WalletInitializationError","notInstalled","PhantomInjectedProvider","config","READY","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","error","log","checkConnectionRequirements","CONNECTING","adapter","handleDisconnect","_handleDisconnect","connectWithProvider","once","args","windowClosed","apply","reason","Web3AuthError","WalletLoginError","connectionError","message","publicKey","on","_onDisconnect","ERRORED","disconnect","cleanup","notConnectedError","DISCONNECTED","disconnectionError","getUserInfo","injectedProvider","setupProvider","reconnected","off"],"mappings":";;;;SAEgBA,IAAAA,CAAKC,QAAAA,EAA4CC,QAAAA,EAAkBC,KAAAA,EAAAA;EACjF,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAA;IACjB,IAAIH,KAAK,GAAG,CAAZ,EAAe;MACbI,UAAU,CAAC,YAAA;QACT,MAAMC,IAAI,GAAG,MAAMP,QAAQ,EAA3B;QACA,IAAIO,IAAJ,EAAUH,OAAO,CAACG,IAAD,CAAPH;QACV,IAAI,CAACG,IAAL,EACE,IAAI,CAACP,QAAD,EAAWC,QAAX,EAAqBC,KAAK,GAAG,CAA7B,CAAJ,CACGM,IADH,CACSC,GAAD,IAAA;UACJL,OAAO,CAACK,GAAD,CAAPL;UACA,OAAOK,GAAP;QACD,CAJH,CAAA,CAKGC,KALH,CAKUC,GAAD,IAASN,MAAM,CAACM,GAAD,CALxB,CAAA;MAMH,CAVS,EAUPV,QAVO,CAAVK;IAWD,CAZD,MAYO;MACLF,OAAO,CAAC,KAAD,CAAPA;IACD;EACF,CAhBM,CAAP;AAiBD;AAEM,MAAMQ,cAAc,GAAG,kBAAA;;MAC5BC,OAAAA,GAAAA,SAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,SAAAA,CAAAA,CAAAA,CAAAA,KAAAA,SAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAA+C;IAAEZ,QAAQ,EAAE,IAAZ;IAAkBC,KAAK,EAAE;EAAzB,CAAA;EAE/C,MAAMY,kBAAkB,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,CAAC,EAAA,CAAA,cAAA,GAAEA,MAAc,CAACC,MAAjB,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,IAAED,cAAAA,CAAuBE,SAAzB,CAA7D;EACA,IAAIH,kBAAJ,EAAwB;IACtB,OAAQC,MAAc,CAACC,MAAvB;EACD;EACD,MAAME,WAAW,GAAG,MAAMnB,IAAI,CAAC,MAAA;IAAA,IAAA,eAAA;IAAA,OAAA,CAAA,eAAA,GAAOgB,MAAc,CAACC,MAAtB,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOD,eAAAA,CAAuBE,SAA9B;EAAA,CAAD,EAA0CJ,OAAO,CAACZ,QAAlD,EAA4DY,OAAO,CAACX,KAApE,CAA9B;EACA,IAAIgB,WAAJ,EAAiB,OAAQH,MAAc,CAACC,MAAvB;EACjB,OAAO,IAAP;AACD,CAVM;MCQMG,cAAAA,SAAuBC,WAAAA,CAAAA;EAiBlCU,WAAAA,GAAAA;QAAYjB,OAAAA,GAAAA,SAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,SAAAA,CAAAA,CAAAA,CAAAA,KAAAA,SAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAiC,CAAA,CAAA;IAC3C,KAAA,EAAA;kCAjBsBQ,eAAe,CAACC,OAAAA,CAAAA;8CAEUC,kBAAkB,CAACC,MAAAA,CAAAA;mDAEhBC,gBAAgB,CAACD,MAAAA,CAAAA;kCAE/BE,gBAAgB,CAACC,QAAAA,CAAAA;oCAEnBC,cAAc,CAACC,SAAAA,CAAAA;qCAEJ,IAAA,CAAA;6CAEU,IAAA,CAAA;wCAErC,KAAA,CAAA;2CA0HG,MAAA;MACtB,IAAI,IAAA,CAAKI,OAAT,EAAkB;QAChB,IAAA,CAAKA,OAAL,CAAaoD,GAAb,CAAiB,YAAjB,EAA+B,IAAA,CAAKX,aAApC,CAAA;QACA,IAAA,CAAKrB,UAAL,GAAkB,KAAlB,CAFgB,CAAA;;QAIhB,IAAA,CAAKlB,MAAL,GAAc,IAAA,CAAKA,MAAL,KAAgBP,cAAc,CAACQ,SAA/B,GAA2CR,cAAc,CAACqB,KAA1D,GAAkErB,cAAc,CAACC,SAA/F;QACA,IAAA,CAAKqB,IAAL,CAAUC,cAAc,CAAC4B,YAAzB,CAAA;MACD;IACF,CAAA,CAAA;IA9HC,IAAA,CAAKhD,WAAL,GAAmBlB,OAAO,CAACkB,WAARlB,IAAuB,IAA1C;EACD;EAEoB,IAAjBmB,iBAAiB,GAAA;;IACnB,OAAO,CAAC,EAAE,CAAA,aAAA,GAAA,IAAA,CAAKC,OAAL,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,IAAA,aAAA,CAAcC,WAAd,IAA6B,IAAA,CAAKC,MAAL,KAAgBP,cAAc,CAACQ,SAA9D,CAAR;EACD;EAEW,IAARC,QAAQ,GAAA;;IACV,OAAO,CAAA,CAAA,qBAAA,GAAA,IAAA,CAAKC,eAAL,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAsBD,QAAtB,KAAkC,IAAzC;EACD;EAEW,IAARA,QAAQ,CAACE,CAAD,EAAA;IACV,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;EACD;EAEDC,kBAAkB,CAACF,CAAD,EAAA,CAAA;EAER,MAAJG,IAAI,CAAC7B,OAAD,EAAA;IACR,KAAA,CAAM8B,+BAAN,EAAA,CAAA,CAAA;;IAEA,IAAI,CAAC,IAAA,CAAKZ,WAAV,EAAuB;MACrB,IAAA,CAAKA,WAAL,GAAmBa,cAAc,CAACnB,gBAAgB,CAACD,MAAlB,EAA0B,KAA1B,CAAjC;IACD;IACD,IAAA,CAAKS,OAAL,GAAe,MAAMrB,cAAc,CAAC;MAAEX,QAAQ,EAAE,GAAZ;MAAiBC,KAAK,EAAE;IAAxB,CAAD,CAAnC;IACA,IAAI,CAAC,IAAA,CAAK+B,OAAV,EAAmB,MAAMY,yBAAyB,CAACC,YAA1BD,EAAN;IACnB,IAAA,CAAKP,eAAL,GAAuB,IAAIS,uBAAJ,CAA4B;MAAEC,MAAM,EAAE;QAAEjB,WAAW,EAAE,IAAA,CAAKA;MAApB;IAAV,CAA5B,CAAvB;IACA,IAAA,CAAKI,MAAL,GAAcP,cAAc,CAACqB,KAA7B;IACA,IAAA,CAAKC,IAAL,CAAUC,cAAc,CAACF,KAAzB,EAAgC5B,eAAe,CAACC,OAAhD,CAAA;IAEA,IAAI;MACF,IAAIT,OAAO,CAACuC,WAAZ,EAAyB;QACvB,IAAA,CAAKC,UAAL,GAAkB,IAAlB;QACA,MAAM,IAAA,CAAKC,OAAL,EAAN;MACD;IACF,CALD,CAKE,OAAOC,KAAP,EAAc;MACdC,GAAG,CAACD,KAAJC,CAAU,gDAAVA,EAA4DD,KAA5DC,CAAAA;MACA,IAAA,CAAKN,IAAL,CAAU,SAAV,EAAqBK,KAArB,CAAA;IACD;EACF;EAEY,MAAPD,OAAO,GAAA;;IACX,IAAI;MACF,KAAA,CAAMG,2BAAN,EAAA;MACA,IAAA,CAAKtB,MAAL,GAAcP,cAAc,CAAC8B,UAA7B;MACA,IAAA,CAAKR,IAAL,CAAUC,cAAc,CAACO,UAAzB,EAAqC;QAAEC,OAAO,EAAEtC,eAAe,CAACC;MAA3B,CAArC,CAAA;MAEA,IAAI,CAAC,IAAA,CAAKW,OAAV,EAAmB,MAAMY,yBAAyB,CAACC,YAA1BD,EAAN;MACnB,IAAI,CAAC,IAAA,CAAKZ,OAAL,CAAaC,WAAlB,EAA+B;QAC7B,MAAM0B,gBAAgB,GAAG,IAAA,CAAK3B,OAAL,CAAa4B,iBAAtC;QACA,IAAI;UACF,MAAM,IAAI1D,OAAJ,CAA6C,CAACC,OAAD,EAAUC,MAAV,KAAA;YACjD,MAAMiD,OAAO,GAAG,YAAA;cACd,MAAM,IAAA,CAAKQ,mBAAL,CAAyB,IAAA,CAAK7B,OAA9B,CAAN;cACA7B,OAAO,CAAC,IAAA,CAAKiC,QAAN,CAAPjC;YACD,CAHD;YAIA,IAAI,CAAC,IAAA,CAAK6B,OAAV,EAAmB,OAAO5B,MAAM,CAACwC,yBAAyB,CAACC,YAA1BD,EAAD,CAAb;YACnB,IAAA,CAAKZ,OAAL,CAAa8B,IAAb,CAAkB,SAAlB,EAA6BT,OAA7B,CAAA,CAAA,CAAA;;YAEC,IAAA,CAAKrB,OAAL,CAAwC4B,iBAAxC,GAA4D,YAAA;cAC3DxD,MAAM,CAACwC,yBAAyB,CAACoB,YAA1BpB,EAAD,CAANxC;gDAD+D2D,IAAAA,GAAAA,IAAAA,KAAAA,CAAAA,IAAAA,CAAAA,EAAAA,IAAAA,GAAAA,CAAAA,EAAAA,IAAAA,GAAAA,IAAAA,EAAAA,IAAAA,EAAAA,EAAAA;gBAAAA,IAAAA,CAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,IAAAA,CAAAA;;cAE/D,OAAOJ,gBAAgB,CAACM,KAAjBN,CAAuB,KAAI,CAAC3B,OAA5B2B,EAAqCI,IAArCJ,CAAP;YACD,CAHA;YAKD,IAAA,CAAK3B,OAAL,CAAaqB,OAAb,EAAA,CAAuB5C,KAAvB,CAA8ByD,MAAD,IAAA;cAC3B9D,MAAM,CAAC8D,MAAD,CAAN9D;YACD,CAFD,CAAA;UAGD,CAhBK,CAAN;QAiBD,CAlBD,CAkBE,OAAOkD,KAAP,EAAuB;UACvB,IAAIA,KAAK,YAAYa,aAArB,EAAoC,MAAMb,KAAN;UACpC,MAAMc,gBAAgB,CAACC,eAAjBD,CAAkCd,KAAlCc,KAAAA,IAAAA,IAAkCd,KAAlCc,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAkCd,KAAe,CAAEgB,OAAnDF,CAAN;QACD,CArBD,SAqBU;UACR,IAAA,CAAKpC,OAAL,CAAa4B,iBAAb,GAAiCD,gBAAjC;QACD;MACF,CA1BD,MA0BO;QACL,MAAM,IAAA,CAAKE,mBAAL,CAAyB,IAAA,CAAK7B,OAA9B,CAAN;MACD;MAED,IAAI,CAAC,IAAA,CAAKA,OAAL,CAAauC,SAAlB,EAA6B,MAAMH,gBAAgB,CAACC,eAAjBD,EAAN;MAC7B,IAAA,CAAKpC,OAAL,CAAawC,EAAb,CAAgB,YAAhB,EAA8B,IAAA,CAAKC,aAAnC,CAAA;MAEA,OAAO,IAAA,CAAKrC,QAAZ;IACD,CAxCD,CAwCE,OAAOkB,KAAP,EAAuB;MACvB;MACA,IAAA,CAAKpB,MAAL,GAAcP,cAAc,CAACqB,KAA7B;MACA,IAAA,CAAKI,UAAL,GAAkB,KAAlB;MACA,IAAA,CAAKH,IAAL,CAAUC,cAAc,CAACwB,OAAzB,EAAkCpB,KAAlC,CAAA;MACA,MAAMA,KAAN;IACD;EACF;EAEe,MAAVqB,UAAU,GAAA;QAAC/D,OAAAA,GAAAA,SAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,SAAAA,CAAAA,CAAAA,CAAAA,KAAAA,SAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAgC;MAAEgE,OAAO,EAAE;IAAX,CAAA;IAC/C,IAAI,CAAC,IAAA,CAAK7C,iBAAV,EAA6B,MAAMqC,gBAAgB,CAACS,iBAAjBT,CAAmC,2BAAnCA,CAAN;IAC7B,IAAI;MAAA,IAAA,cAAA;MACF,OAAA,CAAA,cAAA,GAAM,IAAA,CAAKpC,OAAX,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAM,cAAA,CAAc2C,UAAd,EAAN,CAAA;MACA,IAAI/D,OAAO,CAACgE,OAAZ,EAAqB;QACnB,IAAA,CAAK1C,MAAL,GAAcP,cAAc,CAACC,SAA7B;QACA,IAAA,CAAKS,eAAL,GAAuB,IAAvB;QACA,IAAA,CAAKL,OAAL,GAAe,IAAf;MACD;MACD,IAAA,CAAKiB,IAAL,CAAUC,cAAc,CAAC4B,YAAzB,CAAA;IACD,CARD,CAQE,OAAOxB,KAAP,EAAuB;MACvB,IAAA,CAAKL,IAAL,CAAUC,cAAc,CAACwB,OAAzB,EAAkCN,gBAAgB,CAACW,kBAAjBX,CAAqCd,KAArCc,KAAAA,IAAAA,IAAqCd,KAArCc,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAqCd,KAAe,CAAEgB,OAAtDF,CAAlC,CAAA;IACD;EACF;EAEgB,MAAXY,WAAW,GAAA;IACf,IAAI,CAAC,IAAA,CAAKjD,iBAAV,EAA6B,MAAMqC,gBAAgB,CAACS,iBAAjBT,CAAmC,uDAAnCA,CAAN;IAC7B,OAAO,CAAA,CAAP;EACD;EAEgC,MAAnBP,mBAAmB,CAACoB,gBAAD,EAAA;IAC/B,IAAI,CAAC,IAAA,CAAK5C,eAAV,EAA2B,MAAM+B,gBAAgB,CAACC,eAAjBD,CAAiC,qBAAjCA,CAAN;IAC3B,MAAM,IAAA,CAAK/B,eAAL,CAAqB6C,aAArB,CAAmCD,gBAAnC,CAAN;IACA,IAAA,CAAK/C,MAAL,GAAcP,cAAc,CAACQ,SAA7B;IACA,IAAA,CAAKc,IAAL,CAAUC,cAAc,CAACf,SAAzB,EAAoC;MAAEuB,OAAO,EAAEtC,eAAe,CAACC,OAA3B;MAAoC8D,WAAW,EAAE,IAAA,CAAK/B;IAAtD,CAApC,CAAA;IACA,OAAO,IAAA,CAAKhB,QAAZ;EACD","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS, getChainConfig, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { PhantomInjectedProvider } from '@web3auth/solana-provider';\nimport log from 'loglevel';\n\nfunction poll(callback, interval, count) {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done) poll(callback, interval, count - 1).then(res => {\n          resolve(res);\n          return res;\n        }).catch(err => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\nconst detectProvider = async function () {\n  var _window$solana;\n\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    interval: 1000,\n    count: 3\n  };\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!((_window$solana = window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom);\n\n  if (isPhantomAvailable) {\n    return window.solana;\n  }\n\n  const isAvailable = await poll(() => {\n    var _window$solana2;\n\n    return (_window$solana2 = window.solana) === null || _window$solana2 === void 0 ? void 0 : _window$solana2.isPhantom;\n  }, options.interval, options.count);\n  if (isAvailable) return window.solana;\n  return null;\n};\n\nclass PhantomAdapter extends BaseAdapter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.PHANTOM);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"_wallet\", null);\n\n    _defineProperty(this, \"phantomProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"_onDisconnect\", () => {\n      if (this._wallet) {\n        this._wallet.off(\"disconnect\", this._onDisconnect);\n\n        this.rehydrated = false; // ready to be connected again only if it was previously connected and not cleaned up\n\n        this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n        this.emit(ADAPTER_EVENTS.DISCONNECTED);\n      }\n    });\n\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get isWalletConnected() {\n    var _this$_wallet;\n\n    return !!((_this$_wallet = this._wallet) !== null && _this$_wallet !== void 0 && _this$_wallet.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider() {\n    var _this$phantomProvider;\n\n    return ((_this$phantomProvider = this.phantomProvider) === null || _this$phantomProvider === void 0 ? void 0 : _this$phantomProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(_) {}\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n\n    this._wallet = await detectProvider({\n      interval: 500,\n      count: 3\n    });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect() {\n    var _this = this;\n\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, {\n        adapter: WALLET_ADAPTERS.PHANTOM\n      });\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n\n        try {\n          await new Promise((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet);\n              resolve(this.provider);\n            };\n\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n\n            this._wallet.once(\"connect\", connect); // Raise an issue on phantom that if window is closed, disconnect event is not fired\n\n\n            this._wallet._handleDisconnect = function () {\n              reject(WalletInitializationError.windowClosed());\n\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              return handleDisconnect.apply(_this._wallet, args);\n            };\n\n            this._wallet.connect().catch(reason => {\n              reject(reason);\n            });\n          });\n        } catch (error) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError(error === null || error === void 0 ? void 0 : error.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      var _this$_wallet2;\n\n      await ((_this$_wallet2 = this._wallet) === null || _this$_wallet2 === void 0 ? void 0 : _this$_wallet2.disconnect());\n\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));\n    }\n  }\n\n  async getUserInfo() {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async connectWithProvider(injectedProvider) {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, {\n      adapter: WALLET_ADAPTERS.PHANTOM,\n      reconnected: this.rehydrated\n    });\n    return this.provider;\n  }\n\n}\n\nexport { PhantomAdapter };\n//# sourceMappingURL=phantomAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}